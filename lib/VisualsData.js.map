{"version":3,"sources":["typedefs/typedefs.ts","semanticQuery/sqExprVisitor.ts","types/enumType.ts","types/fill.ts","types/fillRule.ts","types/image.ts","types/paragraphs.ts","types/structuralType.ts","types/valueType.ts","contracts/dataShapeBinding.ts","contracts/dataShapeBindingDataReduction.ts","contracts/federatedConceptualSchema.ts","contracts/selector.ts","contracts/query.ts","contracts/queryProjection.ts","contracts/visualData.ts","formatting/dateTimeSequence.ts","formatting/displayUnitSystem.ts","formatting/numericSequence.ts","formatting/numericSequenceRange.ts","formatting/valueFormatter.ts","dataView/colorAllocator.ts","dataView/compiledDataViewMapping.ts","dataView/dataRoleHelper.ts","dataView/dataViewCategoricalReader.ts","dataView/dataViewConcatenateCategoricalColumns.ts","dataView/dataViewMappingVisitor.ts","dataView/dataViewNormalizeValues.ts","dataView/dataViewObject.ts","dataView/dataViewObjectDefinition.ts","dataView/dataViewObjectDescriptor.ts","dataView/dataViewObjectEvaluationUtils.ts","dataView/dataViewObjectEvaluator.ts","dataView/dataViewPivotCategorical.ts","dataView/dataViewPivotMatrix.ts","dataView/dataViewSelfCrossJoin.ts","dataView/dataViewPivotCategoricalToPrimaryGroups.ts","dataView/dataViewTransform.ts","displayNameGetter.ts","dataReader/dataReader.ts","iFormattingService.ts","semanticQuery/exprPatterns/fieldExprPattern.ts","dataView/dataViewAnalysis.ts","dataView/dataViewRoleWildcard.ts","dataView/dataViewScopeIdentity.ts","dataView/dataViewScopeWildcard.ts","dataView/rules/colorAllocatorCache.ts","dataView/rules/evalContext.ts","dataView/dataViewRegression.ts","dataView/dataViewSelectTransform.ts","dataView/rules/categoricalEvalContext.ts","dataView/rules/tableEvalContext.ts","dataView/rules/ruleEvaluation.ts","dataView/rules/colorRuleEvaluation.ts","dataView/utils/dataViewMatrixUtils.ts","dataView/utils/dataViewMetadataColumnUtils.ts","contracts/conceptualSchema.ts","dataView/scriptResultUtil.ts","segmentation/dataViewMerger.ts","semanticQuery/sqExprRewriter.ts","semanticQuery/exprPatterns/equalsToInRewriter.ts","semanticQuery/exprPatterns/filterScopeIdsCollector.ts","semanticQuery/exprPatterns/scopeIdentityExtractor.ts","semanticQuery/primitiveValueEncoding.ts","semanticQuery/sqAggregationOperations.ts","semanticQuery/sqHierarchyExprUtils.ts","semanticQuery/sqExprGroupUtils.ts","semanticQuery/sqExpr.ts","semanticQuery/sqExprUtils.ts","semanticQuery/semanticQueryRewriter.ts","semanticQuery/semanticQuery.ts","dataView/dataViewBuilder.ts","dataView/rules/staticEvalContext.ts","dataView/rules/matrixEvalContext.ts","services/formattingService.ts","services/serialization/sqExprShortSerializer.ts","selection/selectionId.ts"],"names":[],"mappings":"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","file":"VisualsData.js","sourcesContent":["/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\n///<reference path=\"../../Typedefs/jquery/jquery.d.ts\"/>\r\n///<reference path=\"../../Typedefs/globalize/globalize.d.ts\"/>\r\n///<reference path=\"../../Typedefs/lodash/lodash.d.ts\"/>\r\n","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n\r\n    /** Allows generic traversal and type discovery for a SQExpr tree. */\r\n    export interface ISQExprVisitorWithArg<T, TArg> {\r\n        visitEntity(expr: SQEntityExpr, arg: TArg): T;\r\n        visitColumnRef(expr: SQColumnRefExpr, arg: TArg): T;\r\n        visitMeasureRef(expr: SQMeasureRefExpr, arg: TArg): T;\r\n        visitAggr(expr: SQAggregationExpr, arg: TArg): T;\r\n        visitHierarchy(expr: SQHierarchyExpr, arg: TArg): T;\r\n        visitHierarchyLevel(expr: SQHierarchyLevelExpr, arg: TArg): T;\r\n        visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr, arg: TArg): T;\r\n        visitAnd(expr: SQAndExpr, arg: TArg): T;\r\n        visitBetween(expr: SQBetweenExpr, arg: TArg): T;\r\n        visitIn(expr: SQInExpr, arg: TArg): T;\r\n        visitOr(expr: SQOrExpr, arg: TArg): T;\r\n        visitCompare(expr: SQCompareExpr, arg: TArg): T;\r\n        visitContains(expr: SQContainsExpr, arg: TArg): T;\r\n        visitExists(expr: SQExistsExpr, arg: TArg): T;\r\n        visitNot(expr: SQNotExpr, arg: TArg): T;\r\n        visitStartsWith(expr: SQStartsWithExpr, arg: TArg): T;\r\n        visitConstant(expr: SQConstantExpr, arg: TArg): T;\r\n        visitDateSpan(expr: SQDateSpanExpr, arg: TArg): T;\r\n        visitDateAdd(expr: SQDateAddExpr, arg: TArg): T;\r\n        visitNow(expr: SQNowExpr, arg: TArg): T;\r\n        visitDefaultValue(expr: SQDefaultValueExpr, arg: TArg): T;\r\n        visitAnyValue(expr: SQAnyValueExpr, arg: TArg): T;\r\n        visitArithmetic(expr: SQArithmeticExpr, arg: TArg): T;\r\n        visitFillRule(expr: SQFillRuleExpr, arg: TArg): T;\r\n        visitResourcePackageItem(expr: SQResourcePackageItemExpr, arg: TArg): T;\r\n        visitScopedEval(expr: SQScopedEvalExpr, arg: TArg): T;\r\n    }\r\n\r\n    export interface ISQExprVisitor<T> extends ISQExprVisitorWithArg<T, void> {\r\n    }\r\n\r\n    /** Default IQueryExprVisitorWithArg implementation that others may derive from. */\r\n    export class DefaultSQExprVisitorWithArg<T, TArg> implements ISQExprVisitorWithArg<T, TArg> {\r\n        public visitEntity(expr: SQEntityExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitMeasureRef(expr: SQMeasureRefExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitAggr(expr: SQAggregationExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitBetween(expr: SQBetweenExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitIn(expr: SQInExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitAnd(expr: SQAndExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitOr(expr: SQOrExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitCompare(expr: SQCompareExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitContains(expr: SQContainsExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitExists(expr: SQExistsExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitNot(expr: SQNotExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitStartsWith(expr: SQStartsWithExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitConstant(expr: SQConstantExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitDateSpan(expr: SQDateSpanExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitDateAdd(expr: SQDateAddExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitNow(expr: SQNowExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitDefaultValue(expr: SQDefaultValueExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitAnyValue(expr: SQAnyValueExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitArithmetic(expr: SQArithmeticExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitFillRule(expr: SQFillRuleExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitResourcePackageItem(expr: SQResourcePackageItemExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitScopedEval(expr: SQScopedEvalExpr, arg: TArg): T {\r\n            return this.visitDefault(expr, arg);\r\n        }\r\n\r\n        public visitDefault(expr: SQExpr, arg: TArg): T {\r\n            return;\r\n        }\r\n    }\r\n\r\n    /** Default ISQExprVisitor implementation that others may derive from. */\r\n    export class DefaultSQExprVisitor<T> extends DefaultSQExprVisitorWithArg<T, void> implements ISQExprVisitor<T> {\r\n    }\r\n\r\n    /** Default ISQExprVisitor implementation that implements default traversal and that others may derive from. */\r\n    export class DefaultSQExprVisitorWithTraversal implements ISQExprVisitor<void>, IFillRuleDefinitionVisitor<void, void> {\r\n        public visitEntity(expr: SQEntityExpr): void {\r\n            this.visitDefault(expr);\r\n        }\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr): void {\r\n            expr.source.accept(this);\r\n        }\r\n\r\n        public visitMeasureRef(expr: SQMeasureRefExpr): void {\r\n            expr.source.accept(this);\r\n        }\r\n\r\n        public visitAggr(expr: SQAggregationExpr): void {\r\n            expr.arg.accept(this);\r\n        } \r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr): void {\r\n            expr.arg.accept(this);\r\n        }\r\n\r\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr): void {\r\n            expr.arg.accept(this);\r\n        }\r\n\r\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr): void {\r\n            expr.arg.accept(this);\r\n        }\r\n\r\n        public visitBetween(expr: SQBetweenExpr): void {\r\n            expr.arg.accept(this);\r\n            expr.lower.accept(this);\r\n            expr.upper.accept(this);\r\n        }\r\n\r\n        public visitIn(expr: SQInExpr): void {\r\n            let args = expr.args;\r\n            for (let i = 0, len = args.length; i < len; i++)\r\n                args[i].accept(this);\r\n\r\n            let values = expr.values;\r\n            for (let i = 0, len = values.length; i < len; i++) {\r\n                let valueTuple = values[i];\r\n                for (let j = 0, jlen = valueTuple.length; j < jlen; j++)\r\n                    valueTuple[j].accept(this);\r\n            }\r\n        }\r\n\r\n        public visitAnd(expr: SQAndExpr): void {\r\n            expr.left.accept(this);\r\n            expr.right.accept(this);\r\n        }\r\n\r\n        public visitOr(expr: SQOrExpr): void {\r\n            expr.left.accept(this);\r\n            expr.right.accept(this);\r\n        }\r\n\r\n        public visitCompare(expr: SQCompareExpr): void {\r\n            expr.left.accept(this);\r\n            expr.right.accept(this);\r\n        }\r\n\r\n        public visitContains(expr: SQContainsExpr): void {\r\n            expr.left.accept(this);\r\n            expr.right.accept(this);\r\n        }\r\n\r\n        public visitExists(expr: SQExistsExpr): void {\r\n            expr.arg.accept(this);\r\n        }\r\n\r\n        public visitNot(expr: SQNotExpr): void {\r\n            expr.arg.accept(this);\r\n        }\r\n\r\n        public visitStartsWith(expr: SQStartsWithExpr): void {\r\n            expr.left.accept(this);\r\n            expr.right.accept(this);\r\n        }\r\n\r\n        public visitConstant(expr: SQConstantExpr): void {\r\n            this.visitDefault(expr);\r\n        }\r\n\r\n        public visitDateSpan(expr: SQDateSpanExpr): void {\r\n            expr.arg.accept(this);\r\n        }\r\n\r\n        public visitDateAdd(expr: SQDateAddExpr): void {\r\n            expr.arg.accept(this);\r\n        }\r\n\r\n        public visitNow(expr: SQNowExpr): void {\r\n            this.visitDefault(expr);\r\n        }\r\n\r\n        public visitDefaultValue(expr: SQDefaultValueExpr): void {\r\n            this.visitDefault(expr);\r\n        }\r\n\r\n        public visitAnyValue(expr: SQAnyValueExpr): void {\r\n            this.visitDefault(expr);\r\n        }\r\n\r\n        public visitArithmetic(expr: SQArithmeticExpr): void {\r\n            expr.left.accept(this);\r\n            expr.right.accept(this);\r\n        }\r\n\r\n        public visitFillRule(expr: SQFillRuleExpr): void {\r\n            expr.input.accept(this);\r\n\r\n            let rule = expr.rule,\r\n                gradient2 = rule.linearGradient2,\r\n                gradient3 = rule.linearGradient3;\r\n\r\n            if (gradient2) {\r\n                this.visitLinearGradient2(gradient2);\r\n            }\r\n\r\n            if (gradient3) {\r\n                this.visitLinearGradient3(gradient3);\r\n            }\r\n        }\r\n\r\n        public visitLinearGradient2(gradient2: LinearGradient2Definition): void {\r\n            debug.assertValue(gradient2, 'gradient2');\r\n\r\n            this.visitFillRuleStop(gradient2.min);\r\n            this.visitFillRuleStop(gradient2.max);\r\n        }\r\n\r\n        public visitLinearGradient3(gradient3: LinearGradient3Definition): void {\r\n            debug.assertValue(gradient3, 'gradient3');\r\n\r\n            this.visitFillRuleStop(gradient3.min);\r\n            this.visitFillRuleStop(gradient3.mid);\r\n            this.visitFillRuleStop(gradient3.max);\r\n        }\r\n\r\n        public visitResourcePackageItem(expr: SQResourcePackageItemExpr): void {\r\n            this.visitDefault(expr);\r\n        }\r\n\r\n        public visitScopedEval(expr: SQScopedEvalExpr): void {\r\n            expr.expression.accept(this);\r\n            for (let scopeExpr of expr.scope) {\r\n                scopeExpr.accept(this);\r\n            }\r\n        }\r\n\r\n        public visitDefault(expr: SQExpr): void {\r\n            return;\r\n        }\r\n\r\n        private visitFillRuleStop(stop: RuleColorStopDefinition): void {\r\n            debug.assertValue(stop, 'stop');\r\n\r\n            stop.color.accept(this);\r\n\r\n            let value = stop.value;\r\n            if (value)\r\n                value.accept(this);\r\n        }\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    /** Defines a custom enumeration data type, and its values. */\r\n    export interface IEnumType {\r\n        /** Gets the members of the enumeration, limited to the validMembers, if appropriate. */\r\n        members(validMembers?: EnumMemberValue[]): IEnumMember[];\r\n    }\r\n\r\n    export function createEnumType(members: IEnumMember[]): IEnumType {\r\n        return new EnumType(members);\r\n    }\r\n\r\n    class EnumType implements IEnumType {\r\n        private allMembers: IEnumMember[];\r\n\r\n        constructor(allMembers: IEnumMember[]) {\r\n            debug.assertValue(allMembers, 'allMembers');\r\n\r\n            this.allMembers = allMembers;\r\n        }\r\n\r\n        public members(validMembers?: EnumMemberValue[]): IEnumMember[] {\r\n            let allMembers = this.allMembers;\r\n            if (!validMembers)\r\n                return allMembers;\r\n\r\n            let membersToReturn: IEnumMember[] = [];\r\n            for (let member of allMembers) {\r\n                if (_.contains(validMembers, member.value))\r\n                    membersToReturn.push(member);\r\n            }\r\n            return membersToReturn;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    import SQExpr = powerbi.data.SQExpr;\r\n\r\n    export interface FillDefinition {\r\n        solid?: {\r\n            color?: SQExpr;\r\n        };\r\n        gradient?: {\r\n            startColor?: SQExpr;\r\n            endColor?: SQExpr;\r\n        };\r\n        pattern?: {\r\n            patternKind?: SQExpr;\r\n            color?: SQExpr;\r\n        };\r\n    }\r\n\r\n    export module FillSolidColorTypeDescriptor {\r\n        /** Gets a value indicating whether the descriptor is nullable or not. */\r\n        export function nullable(descriptor: FillSolidColorTypeDescriptor): boolean {\r\n            debug.assertValue(descriptor, 'descriptor');\r\n\r\n            if (descriptor === true)\r\n                return false;\r\n\r\n            let advancedDescriptor = <FillSolidColorAdvancedTypeDescriptor>descriptor;\r\n            return !!advancedDescriptor.nullable;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    import SQExpr = powerbi.data.SQExpr;\r\n\r\n    export interface FillRuleTypeDescriptor {\r\n    }\r\n\r\n    export interface FillRuleDefinition extends FillRuleGeneric<SQExpr, SQExpr> {\r\n    }\r\n\r\n    export interface FillRule extends FillRuleGeneric<string, number> {\r\n    }\r\n\r\n    export type LinearGradient2 = LinearGradient2Generic<string, number>;\r\n    export type LinearGradient3 = LinearGradient3Generic<string, number>;\r\n\r\n    export type LinearGradient2Definition = LinearGradient2Generic<SQExpr, SQExpr>;\r\n    export type LinearGradient3Definition = LinearGradient3Generic<SQExpr, SQExpr>;\r\n\r\n    export type RuleColorStopDefinition = RuleColorStopGeneric<SQExpr, SQExpr>;\r\n    export type RuleColorStop = RuleColorStopGeneric<string, number>;\r\n\r\n    export interface IFillRuleDefinitionVisitor<T2, T3> {\r\n        visitLinearGradient2(linearGradient2: LinearGradient2Definition, arg?: any): T2;\r\n        visitLinearGradient3(linearGradient3: LinearGradient3Definition, arg?: any): T3;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    import SQExpr = powerbi.data.SQExpr;\r\n\r\n    export interface ImageTypeDescriptor {\r\n    }\r\n\r\n    export type ImageDefinition = ImageDefinitionGeneric<SQExpr>;\r\n\r\n    export module ImageDefinition {\r\n        export const urlType: ValueTypeDescriptor = { misc: { imageUrl: true } };\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    import SQExpr = powerbi.data.SQExpr;\r\n\r\n    export interface ParagraphsTypeDescriptor {\r\n    }\r\n\r\n    export type ParagraphsDefinition = ParagraphDefinition[];\r\n    export type ParagraphDefinition = ParagraphDefinitionGeneric<SQExpr>;\r\n    export type TextRunDefinition = TextRunDefinitionGeneric<SQExpr>;\r\n\r\n    export interface ParagraphDefinitionGeneric<TExpr> {\r\n        horizontalTextAlignment?: string;\r\n        textRuns: TextRunDefinitionGeneric<TExpr>[];\r\n    }\r\n\r\n    export interface TextRunDefinitionGeneric<TExpr> {\r\n        textStyle?: TextRunStyle;\r\n        url?: string;\r\n        value: string | TExpr;\r\n    }\r\n\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    import SemanticFilter = powerbi.data.SemanticFilter;\r\n\r\n    export type StructuralObjectDefinition =\r\n        FillDefinition |\r\n        FillRuleDefinition |\r\n        SemanticFilter |\r\n        DefaultValueDefinition |\r\n        ImageDefinition |\r\n        ParagraphsDefinition;\r\n\r\n    export module StructuralTypeDescriptor {\r\n        export function isValid(type: StructuralTypeDescriptor): boolean {\r\n            debug.assertValue(type, 'type');\r\n\r\n            if (type.fill ||\r\n                type.fillRule ||\r\n                type.filter ||\r\n                type.expression ||\r\n                type.image ||\r\n                type.paragraphs) {\r\n                return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    import EnumExtensions = jsCommon.EnumExtensions;\r\n\r\n    export interface ValueTypeDescriptor {\r\n        extendedType?: ExtendedType;\r\n    }\r\n    \r\n    /** Describes a data value type, including a primitive type and extended type if any (derived from data category). */\r\n    export class ValueType implements ValueTypeDescriptor {\r\n        private static typeCache: { [id: string]: ValueType } = {};\r\n\r\n        private underlyingType: ExtendedType;\r\n        private category: string;\r\n\r\n        private temporalType: TemporalType;\r\n        private geographyType: GeographyType;\r\n        private miscType: MiscellaneousType;\r\n        private formattingType: FormattingType;\r\n        private enumType: IEnumType;\r\n        private scriptingType: ScriptType;\r\n\r\n        /** Do not call the ValueType constructor directly. Use the ValueType.fromXXX methods. */\r\n        constructor(type: ExtendedType, category?: string, enumType?: IEnumType) {\r\n            debug.assert((!!type && ExtendedType[type] != null) || type === ExtendedType.Null, 'type');\r\n            debug.assert(!!category || category === null, 'category');\r\n            debug.assert(type !== ExtendedType.Enumeration || !!enumType, 'enumType');\r\n\r\n            this.underlyingType = type;\r\n            this.category = category;\r\n\r\n            if (EnumExtensions.hasFlag(type, ExtendedType.Temporal)) {\r\n                this.temporalType = new TemporalType(type);\r\n            }\r\n            if (EnumExtensions.hasFlag(type, ExtendedType.Geography)) {\r\n                this.geographyType = new GeographyType(type);\r\n            }\r\n            if (EnumExtensions.hasFlag(type, ExtendedType.Miscellaneous)) {\r\n                this.miscType = new MiscellaneousType(type);\r\n            }\r\n            if (EnumExtensions.hasFlag(type, ExtendedType.Formatting)) {\r\n                this.formattingType = new FormattingType(type);\r\n            }\r\n            if (EnumExtensions.hasFlag(type, ExtendedType.Enumeration)) {\r\n                this.enumType = enumType;\r\n            }\r\n            if (EnumExtensions.hasFlag(type, ExtendedType.Scripting)) {\r\n                this.scriptingType = new ScriptType(type);\r\n            }\r\n        }\r\n\r\n        /** Creates or retrieves a ValueType object based on the specified ValueTypeDescriptor. */\r\n        public static fromDescriptor(descriptor: ValueTypeDescriptor): ValueType {\r\n            descriptor = descriptor || {};\r\n\r\n            // Simplified primitive types\r\n            if (descriptor.text) return ValueType.fromExtendedType(ExtendedType.Text);\r\n            if (descriptor.integer) return ValueType.fromExtendedType(ExtendedType.Integer);\r\n            if (descriptor.numeric) return ValueType.fromExtendedType(ExtendedType.Double);\r\n            if (descriptor.bool) return ValueType.fromExtendedType(ExtendedType.Boolean);\r\n            if (descriptor.dateTime) return ValueType.fromExtendedType(ExtendedType.DateTime);\r\n            if (descriptor.duration) return ValueType.fromExtendedType(ExtendedType.Duration);\r\n            if (descriptor.binary) return ValueType.fromExtendedType(ExtendedType.Binary);\r\n            if (descriptor.none) return ValueType.fromExtendedType(ExtendedType.None);\r\n\r\n            // Extended types\r\n            if (descriptor.scripting) {\r\n                if (descriptor.scripting.source) return ValueType.fromExtendedType(ExtendedType.ScriptSource);\r\n            }\r\n            if (descriptor.enumeration) return ValueType.fromEnum(descriptor.enumeration);\r\n            if (descriptor.temporal) {\r\n                if (descriptor.temporal.year) return ValueType.fromExtendedType(ExtendedType.Year_Integer);\r\n                if (descriptor.temporal.month) return ValueType.fromExtendedType(ExtendedType.Month_Integer);\r\n            }\r\n            if (descriptor.geography) {\r\n                if (descriptor.geography.address) return ValueType.fromExtendedType(ExtendedType.Address);\r\n                if (descriptor.geography.city) return ValueType.fromExtendedType(ExtendedType.City);\r\n                if (descriptor.geography.continent) return ValueType.fromExtendedType(ExtendedType.Continent);\r\n                if (descriptor.geography.country) return ValueType.fromExtendedType(ExtendedType.Country);\r\n                if (descriptor.geography.county) return ValueType.fromExtendedType(ExtendedType.County);\r\n                if (descriptor.geography.region) return ValueType.fromExtendedType(ExtendedType.Region);\r\n                if (descriptor.geography.postalCode) return ValueType.fromExtendedType(ExtendedType.PostalCode_Text);\r\n                if (descriptor.geography.stateOrProvince) return ValueType.fromExtendedType(ExtendedType.StateOrProvince);\r\n                if (descriptor.geography.place) return ValueType.fromExtendedType(ExtendedType.Place);\r\n                if (descriptor.geography.latitude) return ValueType.fromExtendedType(ExtendedType.Latitude_Double);\r\n                if (descriptor.geography.longitude) return ValueType.fromExtendedType(ExtendedType.Longitude_Double);\r\n            }\r\n            if (descriptor.misc) {\r\n                if (descriptor.misc.image) return ValueType.fromExtendedType(ExtendedType.Image);\r\n                if (descriptor.misc.imageUrl) return ValueType.fromExtendedType(ExtendedType.ImageUrl);\r\n                if (descriptor.misc.webUrl) return ValueType.fromExtendedType(ExtendedType.WebUrl);\r\n            }\r\n            if (descriptor.formatting) {\r\n                if (descriptor.formatting.color) return ValueType.fromExtendedType(ExtendedType.Color);\r\n                if (descriptor.formatting.formatString) return ValueType.fromExtendedType(ExtendedType.FormatString);\r\n                if (descriptor.formatting.alignment) return ValueType.fromExtendedType(ExtendedType.Alignment);\r\n                if (descriptor.formatting.labelDisplayUnits) return ValueType.fromExtendedType(ExtendedType.LabelDisplayUnits);\r\n                if (descriptor.formatting.fontSize) return ValueType.fromExtendedType(ExtendedType.FontSize);\r\n                if (descriptor.formatting.labelDensity) return ValueType.fromExtendedType(ExtendedType.LabelDensity);\r\n            }\r\n            if (descriptor.extendedType) {\r\n                return ValueType.fromExtendedType(descriptor.extendedType);\r\n            }\r\n\r\n            return ValueType.fromExtendedType(ExtendedType.Null);\r\n        }\r\n\r\n        /** Advanced: Generally use fromDescriptor instead. Creates or retrieves a ValueType object for the specified ExtendedType. */\r\n        public static fromExtendedType(extendedType: ExtendedType): ValueType {\r\n            extendedType = extendedType || ExtendedType.Null;\r\n\r\n            let primitiveType = getPrimitiveType(extendedType),\r\n                category = getCategoryFromExtendedType(extendedType);\r\n            debug.assert(\r\n                primitiveType !== PrimitiveType.Null || extendedType === ExtendedType.Null,\r\n                'Cannot create ValueType for abstract extended type. Consider using fromDescriptor instead.');\r\n            return ValueType.fromPrimitiveTypeAndCategory(primitiveType, category);\r\n        }\r\n\r\n        /** Creates or retrieves a ValueType object for the specified PrimitiveType and data category. */\r\n        public static fromPrimitiveTypeAndCategory(primitiveType: PrimitiveType, category?: string): ValueType {\r\n            primitiveType = primitiveType || PrimitiveType.Null;\r\n            category = category || null;\r\n\r\n            let id = primitiveType.toString();\r\n            if (category)\r\n                id += '|' + category;\r\n\r\n            return ValueType.typeCache[id] || (ValueType.typeCache[id] = new ValueType(toExtendedType(primitiveType, category), category));\r\n        }\r\n\r\n        /** Creates a ValueType to describe the given IEnumType. */\r\n        public static fromEnum(enumType: IEnumType): ValueType {\r\n            debug.assertValue(enumType, 'enumType');\r\n\r\n            return new ValueType(ExtendedType.Enumeration, null, enumType);\r\n        }\r\n\r\n        /** Determines if the specified type is compatible from at least one of the otherTypes. */\r\n        public static isCompatibleTo(type: ValueTypeDescriptor, otherTypes: ValueTypeDescriptor[]): boolean {\r\n            debug.assertValue(type, 'type');\r\n            debug.assertValue(otherTypes, 'otherTypes');\r\n\r\n            let valueType = ValueType.fromDescriptor(type);\r\n            for (let otherType of otherTypes) {\r\n                let otherValueType = ValueType.fromDescriptor(otherType);\r\n\r\n                if (otherValueType.isCompatibleFrom(valueType))\r\n                    return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        /** Determines if the instance ValueType is convertable from the 'other' ValueType. */\r\n        public isCompatibleFrom(other: ValueType): boolean {\r\n            debug.assertValue(other, 'other');\r\n\r\n            let otherPrimitiveType = other.primitiveType;\r\n            if (this === other ||\r\n                this.primitiveType === otherPrimitiveType ||\r\n                otherPrimitiveType === PrimitiveType.Null)\r\n                return true;\r\n            return false;\r\n        }\r\n\r\n        /** Gets the exact primitive type of this ValueType. */\r\n        public get primitiveType(): PrimitiveType {\r\n            return getPrimitiveType(this.underlyingType);\r\n        }\r\n\r\n        /** Gets the exact extended type of this ValueType. */\r\n        public get extendedType(): ExtendedType {\r\n            return this.underlyingType;\r\n        }\r\n\r\n        /** Gets the data category string (if any) for this ValueType. */\r\n        public get categoryString(): string {\r\n            return this.category;\r\n        }\r\n\r\n        // Simplified primitive types\r\n\r\n        /** Indicates whether the type represents text values. */\r\n        public get text(): boolean {\r\n            return this.primitiveType === PrimitiveType.Text;\r\n        }\r\n\r\n        /** Indicates whether the type represents any numeric value. */\r\n        public get numeric(): boolean {\r\n            return EnumExtensions.hasFlag(this.underlyingType, ExtendedType.Numeric);\r\n        }\r\n\r\n        /** Indicates whether the type represents integer numeric values. */\r\n        public get integer(): boolean {\r\n            return this.primitiveType === PrimitiveType.Integer;\r\n        }\r\n\r\n        /** Indicates whether the type represents Boolean values. */\r\n        public get bool(): boolean {\r\n            return this.primitiveType === PrimitiveType.Boolean;\r\n        }\r\n\r\n        /** Indicates whether the type represents any date/time values. */\r\n        public get dateTime(): boolean {\r\n            return this.primitiveType === PrimitiveType.DateTime ||\r\n                this.primitiveType === PrimitiveType.Date ||\r\n                this.primitiveType === PrimitiveType.Time;\r\n        }\r\n\r\n        /** Indicates whether the type represents duration values. */\r\n        public get duration(): boolean {\r\n            return this.primitiveType === PrimitiveType.Duration;\r\n        }\r\n\r\n        /** Indicates whether the type represents binary values. */\r\n        public get binary(): boolean {\r\n            return this.primitiveType === PrimitiveType.Binary;\r\n        }\r\n\r\n        /** Indicates whether the type represents none values. */\r\n        public get none(): boolean {\r\n            return this.primitiveType === PrimitiveType.None;\r\n        }\r\n\r\n        // Extended types\r\n\r\n        /** Returns an object describing temporal values represented by the type, if it represents a temporal type. */\r\n        public get temporal(): TemporalType {\r\n            return this.temporalType;\r\n        }\r\n\r\n        /** Returns an object describing geographic values represented by the type, if it represents a geographic type. */\r\n        public get geography(): GeographyType {\r\n            return this.geographyType;\r\n        }\r\n\r\n        /** Returns an object describing the specific values represented by the type, if it represents a miscellaneous extended type. */\r\n        public get misc(): MiscellaneousType {\r\n            return this.miscType;\r\n        }\r\n\r\n        /** Returns an object describing the formatting values represented by the type, if it represents a formatting type. */\r\n        public get formatting(): FormattingType {\r\n            return this.formattingType;\r\n        }\r\n\r\n        /** Returns an object describing the enum values represented by the type, if it represents an enumeration type. */\r\n        public get enum(): IEnumType {\r\n            return this.enumType;\r\n        }\r\n\r\n        public get scripting(): ScriptType {\r\n            return this.scriptingType;\r\n        }\r\n    }\r\n\r\n    export class ScriptType implements ScriptTypeDescriptor {\r\n        private underlyingType: ExtendedType;\r\n\r\n        constructor(type: ExtendedType) {\r\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Scripting), 'type');\r\n            this.underlyingType = type;\r\n        }\r\n\r\n        public get source(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ScriptSource);\r\n        }\r\n    }\r\n\r\n    export class TemporalType implements TemporalTypeDescriptor {\r\n        private underlyingType: ExtendedType;\r\n\r\n        constructor(type: ExtendedType) {\r\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Temporal), 'type');\r\n            this.underlyingType = type;\r\n        }\r\n\r\n        public get year(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Year);\r\n        }\r\n        public get month(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Month);\r\n        }\r\n    }\r\n\r\n    export class GeographyType implements GeographyTypeDescriptor {\r\n        private underlyingType: ExtendedType;\r\n\r\n        constructor(type: ExtendedType) {\r\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Geography), 'type');\r\n            this.underlyingType = type;\r\n        }\r\n\r\n        public get address(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Address);\r\n        }\r\n        public get city(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.City);\r\n        }\r\n        public get continent(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Continent);\r\n        }\r\n        public get country(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Country);\r\n        }\r\n        public get county(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.County);\r\n        }\r\n        public get region(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Region);\r\n        }\r\n        public get postalCode(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.PostalCode);\r\n        }\r\n        public get stateOrProvince(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.StateOrProvince);\r\n        }\r\n        public get place(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Place);\r\n        }\r\n        public get latitude(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Latitude);\r\n        }\r\n        public get longitude(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Longitude);\r\n        }\r\n    }\r\n\r\n    export class MiscellaneousType implements MiscellaneousTypeDescriptor {\r\n        private underlyingType: ExtendedType;\r\n\r\n        constructor(type: ExtendedType) {\r\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Miscellaneous), 'type');\r\n            this.underlyingType = type;\r\n        }\r\n\r\n        public get image(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Image);\r\n        }\r\n        public get imageUrl(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.ImageUrl);\r\n        }\r\n        public get webUrl(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.WebUrl);\r\n        }\r\n    }\r\n\r\n    export class FormattingType implements FormattingTypeDescriptor {\r\n        private underlyingType: ExtendedType;\r\n\r\n        constructor(type: ExtendedType) {\r\n            debug.assert(!!type && EnumExtensions.hasFlag(type, ExtendedType.Formatting), 'type');\r\n            this.underlyingType = type;\r\n        }\r\n\r\n        public get color(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Color);\r\n        }\r\n\r\n        public get formatString(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FormatString);\r\n        }\r\n\r\n        public get alignment(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.Alignment);\r\n        }\r\n\r\n        public get labelDisplayUnits(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDisplayUnits);\r\n        }\r\n\r\n        public get fontSize(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.FontSize);\r\n        }\r\n\r\n        public get labelDensity(): boolean {\r\n            return matchesExtendedTypeWithAnyPrimitive(this.underlyingType, ExtendedType.LabelDensity);\r\n        }\r\n    }\r\n\r\n    /** Defines primitive value types. Must be consistent with types defined by server conceptual schema. */\r\n    export enum PrimitiveType {\r\n        Null = 0,\r\n        Text = 1,\r\n        Decimal = 2,\r\n        Double = 3,\r\n        Integer = 4,\r\n        Boolean = 5,\r\n        Date = 6,\r\n        DateTime = 7,\r\n        DateTimeZone = 8,\r\n        Time = 9,\r\n        Duration = 10,\r\n        Binary = 11,\r\n        None = 12,\r\n    }\r\n\r\n    /** Defines extended value types, which include primitive types and known data categories constrained to expected primitive types. */\r\n    export enum ExtendedType {\r\n        // Flags (1 << 8-15 range [0xFF00])\r\n        // Important: Enum members must be declared before they are used in TypeScript.\r\n        Numeric = 1 << 8,\r\n        Temporal = 1 << 9,\r\n        Geography = 1 << 10,\r\n        Miscellaneous = 1 << 11,\r\n        Formatting = 1 << 12,\r\n        Scripting = 1 << 13,        \r\n\r\n        // Primitive types (0-255 range [0xFF] | flags)\r\n        // The member names and base values must match those in PrimitiveType.\r\n        Null = 0,\r\n        Text = 1,\r\n        Decimal = Numeric | 2,\r\n        Double = Numeric | 3,\r\n        Integer = Numeric | 4,\r\n        Boolean = 5,\r\n        Date = Temporal | 6,\r\n        DateTime = Temporal | 7,\r\n        DateTimeZone = Temporal | 8,\r\n        Time = Temporal | 9,\r\n        Duration = 10,\r\n        Binary = 11,\r\n        None = 12,\r\n\r\n        // Extended types (0-32767 << 16 range [0xFFFF0000] | corresponding primitive type | flags)\r\n        // Temporal\r\n        Year = Temporal | (1 << 16),\r\n        Year_Text = Year | Text,\r\n        Year_Integer = Year | Integer,\r\n        Year_Date = Year | Date,\r\n        Year_DateTime = Year | DateTime,\r\n        Month = Temporal | (2 << 16),\r\n        Month_Text = Month | Text,\r\n        Month_Integer = Month | Integer,\r\n        Month_Date = Month | Date,\r\n        Month_DateTime = Month | DateTime,\r\n        // Geography\r\n        Address = Text | Geography | (100 << 16),\r\n        City = Text | Geography | (101 << 16),\r\n        Continent = Text | Geography | (102 << 16),\r\n        Country = Text | Geography | (103 << 16),\r\n        County = Text | Geography | (104 << 16),\r\n        Region = Text | Geography | (105 << 16),\r\n        PostalCode = Geography | (106 << 16),\r\n        PostalCode_Text = PostalCode | Text,\r\n        PostalCode_Integer = PostalCode | Integer,\r\n        StateOrProvince = Text | Geography | (107 << 16),\r\n        Place = Text | Geography | (108 << 16),\r\n        Latitude = Geography | (109 << 16),\r\n        Latitude_Decimal = Latitude | Decimal,\r\n        Latitude_Double = Latitude | Double,\r\n        Longitude = Geography | (110 << 16),\r\n        Longitude_Decimal = Longitude | Decimal,\r\n        Longitude_Double = Longitude | Double,\r\n        // Miscellaneous\r\n        Image = Binary | Miscellaneous | (200 << 16),\r\n        ImageUrl = Text | Miscellaneous | (201 << 16),\r\n        WebUrl = Text | Miscellaneous | (202 << 16),\r\n        // Formatting\r\n        Color = Text | Formatting | (300 << 16),\r\n        FormatString = Text | Formatting | (301 << 16),\r\n        Alignment = Text | Formatting | (306 << 16),\r\n        LabelDisplayUnits = Text | Formatting | (307 << 16),\r\n        FontSize = Double | Formatting | (308 << 16),\r\n        LabelDensity = Double | Formatting | (309 << 16),\r\n        // Enumeration\r\n        Enumeration = Text | 400 << 16,\r\n        // Scripting\r\n        ScriptSource = Text | Scripting | (500 << 16),        \r\n        // NOTE: To avoid confusion, underscores should be used only to delimit primitive type variants of an extended type\r\n        // (e.g. Year_Integer or Latitude_Double above)\r\n    }\r\n\r\n    const PrimitiveTypeMask = 0xFF;\r\n    const PrimitiveTypeWithFlagsMask = 0xFFFF;\r\n    const PrimitiveTypeFlagsExcludedMask = 0xFFFF0000;\r\n\r\n    function getPrimitiveType(extendedType: ExtendedType): PrimitiveType {\r\n        return extendedType & PrimitiveTypeMask;\r\n    }\r\n\r\n    function isPrimitiveType(extendedType: ExtendedType): boolean {\r\n        return (extendedType & PrimitiveTypeWithFlagsMask) === extendedType;\r\n    }\r\n\r\n    function getCategoryFromExtendedType(extendedType: ExtendedType): string {\r\n        if (isPrimitiveType(extendedType))\r\n            return null;\r\n\r\n        let category = ExtendedType[extendedType];\r\n        if (category) {\r\n            // Check for ExtendedType declaration without a primitive type.\r\n            // If exists, use it as category (e.g. Longitude rather than Longitude_Double)\r\n            // Otherwise use the ExtendedType declaration with a primitive type (e.g. Address)\r\n            let delimIdx = category.lastIndexOf('_');\r\n            if (delimIdx > 0) {\r\n                let baseCategory = category.slice(0, delimIdx);\r\n                if (ExtendedType[baseCategory]) {\r\n                    debug.assert(\r\n                        (ExtendedType[baseCategory] & PrimitiveTypeFlagsExcludedMask) === (extendedType & PrimitiveTypeFlagsExcludedMask),\r\n                        'Unexpected value for ExtendedType base member of ' + extendedType);\r\n                    category = baseCategory;\r\n                }\r\n            }\r\n        }\r\n        return category || null;\r\n    }\r\n\r\n    function toExtendedType(primitiveType: PrimitiveType, category?: string): ExtendedType {\r\n        let primitiveString = PrimitiveType[primitiveType];\r\n        let t = ExtendedType[primitiveString];\r\n        if (t == null) {\r\n            debug.assertFail('Unexpected primitiveType ' + primitiveType);\r\n            t = ExtendedType.Null;\r\n        }\r\n\r\n        if (primitiveType && category) {\r\n            let categoryType: ExtendedType = ExtendedType[category];\r\n            if (categoryType) {\r\n                let categoryPrimitiveType = getPrimitiveType(categoryType);\r\n                if (categoryPrimitiveType === PrimitiveType.Null) {\r\n                    // Category supports multiple primitive types, check if requested primitive type is supported\r\n                    // (note: important to use t here rather than primitiveType as it may include primitive type flags)\r\n                    categoryType = t | categoryType;\r\n                    if (ExtendedType[categoryType]) {\r\n                        debug.assert(\r\n                            ExtendedType[categoryType] === (category + '_' + primitiveString),\r\n                            'Unexpected name for ExtendedType member ' + categoryType);\r\n                        t = categoryType;\r\n                    }\r\n                }\r\n                else if (categoryPrimitiveType === primitiveType) {\r\n                    // Primitive type matches the single supported type for the category\r\n                    t = categoryType;\r\n                }\r\n            }\r\n        }\r\n\r\n        return t;\r\n    }\r\n\r\n    function matchesExtendedTypeWithAnyPrimitive(a: ExtendedType, b: ExtendedType): boolean {\r\n        return (a & PrimitiveTypeFlagsExcludedMask) === (b & PrimitiveTypeFlagsExcludedMask);\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    /**\r\n     * Represents the versions of the data shape binding structure.\r\n     * NOTE Keep this file in sync with the Sql\\InfoNav\\src\\Data\\Contracts\\DsqGeneration\\DataShapeBindingVersions.cs\r\n     * file in the TFS Dev branch.\r\n     */\r\n    export const enum DataShapeBindingVersions {\r\n        /** The initial version of data shape binding */\r\n        Version0 = 0,\r\n        /** Explicit subtotal support for axis groupings. */\r\n        Version1 = 1,\r\n    }\r\n\r\n    export interface DataShapeBindingLimitTarget {\r\n        Primary?: number;\r\n    }\r\n\r\n    export enum DataShapeBindingLimitType {\r\n        Top = 0,\r\n        First = 1,\r\n        Last = 2,\r\n        Sample = 3,\r\n        Bottom = 4,\r\n    }\r\n\r\n    export interface DataShapeBindingLimit {\r\n        Count?: number;\r\n        Target: DataShapeBindingLimitTarget;\r\n        Type: DataShapeBindingLimitType;\r\n    }\r\n\r\n    export interface DataShapeBinding {\r\n        Version?: number;\r\n        Primary: DataShapeBindingAxis;\r\n        Secondary?: DataShapeBindingAxis;\r\n        Aggregates?: DataShapeBindingAggregate[];\r\n        Projections?: number[];\r\n        Limits?: DataShapeBindingLimit[];\r\n        Highlights?: FilterDefinition[];\r\n        DataReduction?: DataShapeBindingDataReduction;\r\n        IncludeEmptyGroups?: boolean;\r\n        SuppressedJoinPredicates?: number[];\r\n    }\r\n\r\n    export interface DataShapeBindingDataReduction {\r\n        Primary?: DataShapeBindingDataReductionAlgorithm;\r\n        Secondary?: DataShapeBindingDataReductionAlgorithm;\r\n        DataVolume?: number;\r\n    }\r\n\r\n    export interface DataShapeBindingDataReductionAlgorithm {\r\n        Top?: DataShapeBindingDataReductionTopLimit;\r\n        Sample?: DataShapeBindingDataReductionSampleLimit;\r\n        Bottom?: DataShapeBindingDataReductionBottomLimit;\r\n        Window?: DataShapeBindingDataReductionDataWindow;\r\n    }\r\n\r\n    export interface DataShapeBindingDataReductionTopLimit {\r\n        Count?: number;\r\n    }\r\n\r\n    export interface DataShapeBindingDataReductionSampleLimit {\r\n        Count?: number;\r\n    }\r\n\r\n    export interface DataShapeBindingDataReductionBottomLimit {\r\n        Count?: number;\r\n    }\r\n\r\n    export interface DataShapeBindingDataReductionDataWindow {\r\n        Count?: number;\r\n        RestartTokens?: RestartToken;\r\n    }\r\n\r\n    export interface DataShapeBindingAxis {\r\n        Groupings: DataShapeBindingAxisGrouping[];\r\n    }\r\n\r\n    export enum SubtotalType {\r\n        None = 0,\r\n        Before = 1,\r\n        After = 2\r\n    }\r\n\r\n    export interface DataShapeBindingAxisGrouping {\r\n        Projections: number[];\r\n        GroupBy?: number[];\r\n        SuppressedProjections?: number[];\r\n        Subtotal?: SubtotalType;\r\n        ShowItemsWithNoData?: number[];\r\n    }\r\n\r\n    export interface DataShapeBindingAggregate {\r\n        Select: number;\r\n        Kind: DataShapeBindingAggregateKind;\r\n    }\r\n\r\n    export const enum DataShapeBindingAggregateKind {\r\n        None = 0,\r\n        Min = 1,\r\n        Max = 1 << 1,\r\n    }\r\n} \r\n","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export module DataShapeBindingDataReduction {\r\n\r\n        export function createFrom(reduction: ReductionAlgorithm): DataShapeBindingDataReductionAlgorithm {\r\n            if (!reduction)\r\n                return;\r\n\r\n            var result: DataShapeBindingDataReductionAlgorithm;\r\n            if (reduction.top) {\r\n                result = {\r\n                    Top: {}\r\n                };\r\n\r\n                if (reduction.top.count)\r\n                    result.Top.Count = reduction.top.count;\r\n            }\r\n\r\n            if (reduction.bottom) {\r\n                result = {\r\n                    Bottom: {}\r\n                };\r\n\r\n                if (reduction.bottom.count)\r\n                    result.Bottom.Count = reduction.bottom.count;\r\n            }\r\n\r\n            if (reduction.sample) {\r\n                result = {\r\n                    Sample: {}\r\n                };\r\n\r\n                if (reduction.sample.count)\r\n                    result.Sample.Count = reduction.sample.count;\r\n            }\r\n\r\n            if (reduction.window) {\r\n                result = {\r\n                    Window: {}\r\n                };\r\n\r\n                if (reduction.window.count)\r\n                    result.Window.Count = reduction.window.count;\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export interface FederatedConceptualSchemaInitOptions {\r\n        schemas: { [name: string]: ConceptualSchema };\r\n        links?: ConceptualSchemaLink[];\r\n    }\r\n\r\n    /** Represents a federated conceptual schema. */\r\n    export class FederatedConceptualSchema {\r\n        private schemas: { [name: string]: ConceptualSchema };\r\n        private links: ConceptualSchemaLink[];\r\n\r\n        constructor(options: FederatedConceptualSchemaInitOptions) {\r\n            debug.assertValue(options, 'options');\r\n\r\n            this.schemas = options.schemas; \r\n            if (options.links)\r\n                this.links = options.links;\r\n        }\r\n\r\n        public schema(name: string): ConceptualSchema {\r\n            return this.schemas[name];\r\n        }\r\n    }\r\n\r\n    /** Describes a semantic relationship between ConceptualSchemas. */\r\n    export interface ConceptualSchemaLink {\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n\r\n    export module Selector {\r\n        export function filterFromSelector(selectors: Selector[], isNot?: boolean): SemanticFilter {\r\n            if (_.isEmpty(selectors))\r\n                return;\r\n\r\n            let exprs: SQExpr[] = [];\r\n            for (let i = 0, ilen = selectors.length; i < ilen; i++) {\r\n                let identity = selectors[i];\r\n                let data = identity.data;\r\n                let exprToAdd: SQExpr = undefined;\r\n                if (data && data.length) {\r\n                    for (let j = 0, jlen = data.length; j < jlen; j++) {\r\n                        exprToAdd = SQExprBuilder.and(exprToAdd, <SQExpr>(<DataViewScopeIdentity>identity.data[j]).expr);\r\n                    }\r\n                }\r\n\r\n                if (exprToAdd)\r\n                    exprs.push(exprToAdd);\r\n            }\r\n\r\n            if (!_.isEmpty(exprs))\r\n                return DataViewScopeIdentity.filterFromExprs(exprs, isNot);\r\n        }\r\n\r\n        export function matchesData(selector: Selector, identities: DataViewScopeIdentity[]): boolean {\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertValue(selector.data, 'selector.data');\r\n            debug.assertValue(identities, 'identities');\r\n\r\n            let selectorData = selector.data;\r\n            if (selectorData.length !== identities.length)\r\n                return false;\r\n\r\n            for (let i = 0, len = selectorData.length; i < len; i++) {\r\n                let dataItem = selector.data[i];\r\n                let selectorDataItem = <DataViewScopeIdentity>dataItem;\r\n                if (selectorDataItem.expr) {\r\n                    if (!DataViewScopeIdentity.equals(selectorDataItem, identities[i]))\r\n                        return false;\r\n                }\r\n                else {\r\n                    if (!DataViewScopeWildcard.matches(<DataViewScopeWildcard>dataItem, identities[i]))\r\n                        return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        export function matchesKeys(selector: Selector, keysList: SQExpr[][]): boolean {\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertValue(selector.data, 'selector.data');\r\n            debug.assertValue(keysList, 'keysList');\r\n\r\n            let selectorData = selector.data,\r\n                selectorDataLength = selectorData.length;\r\n            if (selectorDataLength !== keysList.length)\r\n                return false;\r\n\r\n            for (let i = 0; i < selectorDataLength; i++) {\r\n                let selectorDataItem = selector.data[i],\r\n                    selectorDataExprs: SQExpr[];\r\n\r\n                if ((<DataViewScopeIdentity>selectorDataItem).expr) {\r\n                    selectorDataExprs = ScopeIdentityExtractor.getKeys(<SQExpr>(<DataViewScopeIdentity>selectorDataItem).expr);\r\n                }\r\n                else if ((<DataViewScopeWildcard>selectorDataItem).exprs) {\r\n                    selectorDataExprs = <SQExpr[]>(<DataViewScopeWildcard>selectorDataItem).exprs;\r\n                } else { \r\n                    // In case DataViewRoleWildcard\r\n                    return false;\r\n                }\r\n\r\n                if (!selectorDataExprs)\r\n                    continue;\r\n                if (!SQExprUtils.sequenceEqual(keysList[i], selectorDataExprs))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        /** Determines whether two selectors are equal. */\r\n        export function equals(x: Selector, y: Selector): boolean {\r\n            // Normalize falsy to null\r\n            x = x || null;\r\n            y = y || null;\r\n\r\n            if (x === y)\r\n                return true;\r\n\r\n            if (!x !== !y)\r\n                return false;\r\n\r\n            debug.assertValue(x, 'x');\r\n            debug.assertValue(y, 'y');\r\n\r\n            if (x.id !== y.id)\r\n                return false;\r\n            if (x.metadata !== y.metadata)\r\n                return false;\r\n            if (!equalsDataArray(x.data, y.data))\r\n                return false;\r\n\r\n            return true;\r\n        }\r\n\r\n        function equalsDataArray(x: DataRepetitionSelector[], y: DataRepetitionSelector[]): boolean {\r\n            // Normalize falsy to null\r\n            x = x || null;\r\n            y = y || null;\r\n\r\n            if (x === y)\r\n                return true;\r\n\r\n            if (!x !== !y)\r\n                return false;\r\n\r\n            if (x.length !== y.length)\r\n                return false;\r\n\r\n            for (let i = 0, len = x.length; i < len; i++) {\r\n                if (!equalsData(x[i], y[i]))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function equalsData(x: DataRepetitionSelector, y: DataRepetitionSelector): boolean {\r\n            if (!(<DataViewScopeIdentity>x).expr && (<DataViewScopeIdentity>y).expr) {\r\n                // TODO: We need to also check wildcard selectors too (once that's supported/figured out).\r\n                return false;\r\n            }\r\n\r\n            return DataViewScopeIdentity.equals(<DataViewScopeIdentity>x, <DataViewScopeIdentity>y);\r\n        }\r\n\r\n        export function getKey(selector: Selector): string {\r\n            let toStringify: any = {};\r\n            if (selector.data) {\r\n                let data = [];\r\n                for (let i = 0, ilen = selector.data.length; i < ilen; i++) {\r\n                    data.push(selector.data[i].key);\r\n                }\r\n                toStringify.data = data;\r\n            }\r\n            if (selector.metadata)\r\n                toStringify.metadata = selector.metadata;\r\n            if (selector.id)\r\n                toStringify.id = selector.id;\r\n            return JSON.stringify(toStringify);\r\n        }\r\n\r\n        export function containsWildcard(selector: Selector): boolean {\r\n            debug.assertValue(selector, 'selector');\r\n\r\n            let dataItems = selector.data;\r\n            if (!dataItems)\r\n                return false;\r\n\r\n            for (let dataItem of dataItems) {\r\n                let wildCard = <DataViewScopeWildcard & DataViewRoleWildcard>dataItem;\r\n                if (wildCard.exprs || wildCard.roles)\r\n                    return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        export function hasRoleWildcard(selector: Selector): boolean {\r\n            debug.assertValue(selector, 'selector');\r\n\r\n            let dataItems = selector.data;\r\n            if (_.isEmpty(dataItems))\r\n                return false;\r\n\r\n            for (let dataItem of dataItems) {\r\n                if (isRoleWildcard(dataItem))\r\n                    return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        export function isRoleWildcard(dataItem: DataRepetitionSelector): dataItem is DataViewRoleWildcard {\r\n            return !_.isEmpty((<DataViewRoleWildcard>dataItem).roles);\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n\r\n    export interface QueryDefinition {\r\n        Version?: number;\r\n        From: EntitySource[];\r\n        Where?: QueryFilter[];\r\n        OrderBy?: QuerySortClause[];\r\n        Select: QueryExpressionContainer[];\r\n        GroupBy?: QueryExpressionContainer[];\r\n    }\r\n\r\n    export interface FilterDefinition {\r\n        Version?: number;\r\n        From: EntitySource[];\r\n        Where: QueryFilter[];\r\n    }    \r\n\r\n    export enum EntitySourceType {\r\n        Table = 0,\r\n        Pod = 1,\r\n    }\r\n\r\n    export interface EntitySource {\r\n        Name: string;\r\n        EntitySet?: string; // TODO: Remove this when Q&A Silverlight is removed and make Entity required\r\n        Entity?: string;\r\n        Schema?: string;\r\n        Type?: EntitySourceType;\r\n    }\r\n\r\n    export interface QueryFilter {\r\n        Target?: QueryExpressionContainer[];\r\n        Condition: QueryExpressionContainer;\r\n    }\r\n\r\n    export interface QuerySortClause {\r\n        Expression: QueryExpressionContainer;\r\n        Direction: SortDirection;\r\n    }\r\n\r\n    export interface QueryExpressionContainer {\r\n        Name?: string;\r\n\r\n        SourceRef?: QuerySourceRefExpression;\r\n        Column?: QueryColumnExpression;\r\n        Measure?: QueryMeasureExpression;\r\n        Aggregation?: QueryAggregationExpression;\r\n        Hierarchy?: QueryHierarchyExpression;\r\n        HierarchyLevel?: QueryHierarchyLevelExpression;\r\n        PropertyVariationSource?: QueryPropertyVariationSourceExpression;\r\n\r\n        // Logical\r\n        And?: QueryBinaryExpression;\r\n        Between?: QueryBetweenExpression;\r\n        In?: QueryInExpression;\r\n        Or?: QueryBinaryExpression;\r\n        Comparison?: QueryComparisonExpression;\r\n        Not?: QueryNotExpression;\r\n        Contains?: QueryContainsExpression;\r\n        StartsWith?: QueryStartsWithExpression;\r\n        Exists?: QueryExistsExpression;\r\n\r\n        // Constants\r\n        Boolean?: QueryBooleanExpression;\r\n        DateTime?: QueryDateTimeExpression;\r\n        DateTimeSecond?: QueryDateTimeSecondExpression;\r\n        Date?: QueryDateTimeExpression;\r\n        Decimal?: QueryDecimalExpression;\r\n        Integer?: QueryIntegerExpression;\r\n        Null?: QueryNullExpression;\r\n        Number?: QueryNumberExpression;\r\n        String?: QueryStringExpression;\r\n        Literal?: QueryLiteralExpression;\r\n\r\n        DateSpan?: QueryDateSpanExpression;\r\n        DateAdd?: QueryDateAddExpression;\r\n        Now?: QueryNowExpression;\r\n\r\n        // Default Values\r\n        DefaultValue?: QueryDefaultValueExpression;\r\n        AnyValue?: QueryAnyValueExpression;\r\n\r\n        Arithmetic?: QueryArithmeticExpression;\r\n\r\n        // Client-only expressions\r\n        FillRule?: QueryFillRuleExpression;\r\n        ResourcePackageItem?: QueryResourcePackageItem;\r\n\r\n        // Evaluation Expressions\r\n        ScopedEval?: QueryScopedEvalExpression;\r\n    }\r\n\r\n    export interface QueryPropertyExpression {\r\n        Expression: QueryExpressionContainer;\r\n        Property: string;\r\n    }\r\n\r\n    export interface QueryColumnExpression extends QueryPropertyExpression {\r\n    }\r\n\r\n    export interface QueryMeasureExpression extends QueryPropertyExpression {\r\n    }\r\n\r\n    export interface QuerySourceRefExpression {\r\n        Source: string;\r\n    }\r\n\r\n    export interface QueryAggregationExpression {\r\n        Function: QueryAggregateFunction;\r\n        Expression: QueryExpressionContainer;\r\n    }\r\n\r\n    export interface QueryHierarchyExpression {\r\n        Expression: QueryExpressionContainer;\r\n        Hierarchy: string;\r\n    }\r\n\r\n    export interface QueryHierarchyLevelExpression {\r\n        Expression: QueryExpressionContainer;\r\n        Level: string;\r\n    }\r\n\r\n    export interface QueryPropertyVariationSourceExpression {\r\n        Expression: QueryExpressionContainer;\r\n        Name: string;\r\n        Property: string;\r\n    }\r\n\r\n    export interface QueryBinaryExpression {\r\n        Left: QueryExpressionContainer;\r\n        Right: QueryExpressionContainer;\r\n    }\r\n\r\n    export interface QueryBetweenExpression {\r\n        Expression: QueryExpressionContainer;\r\n        LowerBound: QueryExpressionContainer;\r\n        UpperBound: QueryExpressionContainer;\r\n    }\r\n\r\n    export interface QueryInExpression {\r\n        Expressions: QueryExpressionContainer[];\r\n        Values: QueryExpressionContainer[][];\r\n    }\r\n\r\n    export interface QueryComparisonExpression extends QueryBinaryExpression {\r\n        ComparisonKind: QueryComparisonKind;\r\n    }\r\n\r\n    export interface QueryContainsExpression extends QueryBinaryExpression { }\r\n\r\n    export interface QueryNotExpression {\r\n        Expression: QueryExpressionContainer;\r\n    }\r\n\r\n    export interface QueryStartsWithExpression extends QueryBinaryExpression { }\r\n\r\n    export interface QueryExistsExpression {\r\n        Expression: QueryExpressionContainer;\r\n    }\r\n\r\n    export interface QueryConstantExpression<T> {\r\n        Value: T;\r\n    }\r\n\r\n    export interface QueryLiteralExpression {\r\n        Value: string;\r\n    }\r\n\r\n    export interface QueryBooleanExpression extends QueryConstantExpression<boolean> { }\r\n    export interface QueryDateTimeExpression extends QueryConstantExpression<string> { }\r\n    export interface QueryDateTimeSecondExpression extends QueryConstantExpression<string> { }\r\n    export interface QueryDecimalExpression extends QueryConstantExpression<number> { }\r\n    export interface QueryIntegerExpression extends QueryConstantExpression<number> { }\r\n    export interface QueryNumberExpression extends QueryConstantExpression<string> { }\r\n    export interface QueryNullExpression { }\r\n    export interface QueryStringExpression extends QueryConstantExpression<string> { }\r\n\r\n    export interface QueryDateSpanExpression {\r\n        TimeUnit: TimeUnit;\r\n        Expression: QueryExpressionContainer;\r\n    }\r\n\r\n    export interface QueryDateAddExpression {\r\n        Amount: number;\r\n        TimeUnit: TimeUnit;\r\n        Expression: QueryExpressionContainer;\r\n    }\r\n\r\n    export interface QueryNowExpression { }\r\n\r\n    export interface QueryDefaultValueExpression { }\r\n\r\n    export interface QueryAnyValueExpression { }\r\n\r\n    export interface QueryArithmeticExpression {\r\n        Left: QueryExpressionContainer;\r\n        Right: QueryExpressionContainer;\r\n        Operator: ArithmeticOperatorKind;\r\n    }\r\n\r\n    export const enum ArithmeticOperatorKind {\r\n        Add = 0,\r\n        Subtract = 1,\r\n        Multiply = 2,\r\n        Divide = 3,\r\n    }\r\n\r\n    export function getArithmeticOperatorName(arithmeticOperatorKind: ArithmeticOperatorKind): string {\r\n        switch (arithmeticOperatorKind) {\r\n            case ArithmeticOperatorKind.Add:\r\n                return \"Add\";\r\n            case ArithmeticOperatorKind.Subtract:\r\n                return \"Subtract\";\r\n            case ArithmeticOperatorKind.Multiply:\r\n                return \"Multiply\";\r\n            case ArithmeticOperatorKind.Divide:\r\n                return \"Divide\";\r\n        }\r\n        throw new Error('Unexpected ArithmeticOperatorKind: ' + arithmeticOperatorKind);\r\n    }\r\n\r\n    export interface QueryFillRuleExpression {\r\n        Input: QueryExpressionContainer;\r\n        FillRule: FillRuleGeneric<QueryExpressionContainer, QueryExpressionContainer>;\r\n    }\r\n\r\n    export interface QueryResourcePackageItem {\r\n        PackageName: string;\r\n        PackageType: number;\r\n        ItemName: string;\r\n    }\r\n\r\n    export interface QueryScopedEvalExpression {\r\n        Expression: QueryExpressionContainer;\r\n        Scope: QueryExpressionContainer[];\r\n    }\r\n\r\n    export enum TimeUnit {\r\n        Day = 0,\r\n        Week = 1,\r\n        Month = 2,\r\n        Year = 3,\r\n        Decade = 4,\r\n        Second = 5,\r\n        Minute = 6,\r\n        Hour = 7,\r\n    }\r\n\r\n    export enum QueryAggregateFunction {\r\n        Sum = 0,\r\n        Avg = 1,\r\n        Count = 2,\r\n        Min = 3,\r\n        Max = 4,\r\n        CountNonNull = 5,\r\n        Median = 6,\r\n        StandardDeviation = 7,\r\n        Variance = 8,\r\n    }\r\n\r\n    export enum QueryComparisonKind {\r\n        Equal = 0,\r\n        GreaterThan = 1,\r\n        GreaterThanOrEqual = 2,\r\n        LessThan = 3,\r\n        LessThanOrEqual = 4,\r\n    }\r\n\r\n    /** Defines semantic data types. */\r\n    export enum SemanticType {\r\n        None = 0x0,\r\n        Number = 0x1,\r\n        Integer = Number + 0x2,\r\n        DateTime = 0x4,\r\n        Time = 0x08,\r\n        Date = DateTime + 0x10,\r\n        Month = Integer + 0x20,\r\n        Year = Integer + 0x40,\r\n        YearAndMonth = 0x80,\r\n        MonthAndDay = 0x100,\r\n        Decade = Integer + 0x200,\r\n        YearAndWeek = 0x400,\r\n        String = 0x800,\r\n        Boolean = 0x1000,\r\n        Table = 0x2000,\r\n        Range = 0x4000,\r\n    }\r\n\r\n    export interface QueryMetadata {\r\n        Select?: SelectMetadata[];\r\n        Filters?: FilterMetadata[];\r\n    }\r\n\r\n    // TODO: Stop using SemanticType and ConceptualDataCategory here (may need server contract changes)\r\n    export interface SelectMetadata {\r\n        Restatement: string;\r\n        \r\n        /* SemanticType or PrimitiveType. */\r\n        Type?: number; \r\n\r\n        Format?: string;\r\n        DataCategory?: ConceptualDataCategory;\r\n\r\n        /** The select projection name. */\r\n        Name?: string;\r\n\r\n        /* If defined, this indicates the KPI class*/\r\n        kpiStatusGraphic?: string; // old version of kpi data\r\n\r\n        /* If defined, this indicates the KPI metadata*/\r\n        kpi?: DataViewKpiColumnMetadata;\r\n    }\r\n\r\n    export interface FilterMetadata {\r\n        Restatement: string;\r\n        Kind?: FilterKind;\r\n        /** The expression being filtered.  This is reflected in the filter card UI. */\r\n        expression?: QueryExpressionContainer;\r\n    }\r\n\r\n    export enum FilterKind {\r\n        Default,\r\n        Period,\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n\r\n    /** Represents a projection from a query result. */\r\n    export interface QueryProjection {\r\n        /** Name of item in the semantic query Select clause. */\r\n        queryRef: string;\r\n\r\n        /** Optional format string. */\r\n        format?: string; // TODO: Deprecate this, and populate format string through objects instead.\r\n    }\r\n\r\n    /** A set of QueryProjections, grouped by visualization property, and ordered within that property. */\r\n    export interface QueryProjectionsByRole {\r\n        [roleName: string]: QueryProjectionCollection;\r\n    }\r\n\r\n    export class QueryProjectionCollection {\r\n        private items: QueryProjection[];\r\n\r\n        /* The activeProjectionReference is an array that contains all the items that we are grouping on in case of a drillable\r\n           role. For example, if you have a drill role with [Country, State, City] and the user drilled to state, the active items\r\n           will include [Country and State]. This means that the query will group on both country and state and the state \"last item\"\r\n           is the item that the user drilled to.\r\n        */\r\n        private _activeProjectionRefs: string[];\r\n        private _showAll: boolean;\r\n\r\n        public constructor(items: QueryProjection[], activeProjectionRefs?: string[], showAll?: boolean) {\r\n            debug.assertValue(items, 'items');\r\n\r\n            this.items = items;\r\n            this._activeProjectionRefs = activeProjectionRefs;\r\n            this._showAll = showAll;\r\n        }\r\n\r\n        /** Returns all projections in a mutable array. */\r\n        public all(): QueryProjection[] {\r\n            return this.items;\r\n        }\r\n\r\n        public get activeProjectionRefs(): string[] {\r\n            return this._activeProjectionRefs;\r\n        }\r\n\r\n        public set activeProjectionRefs(queryReferences: string[]) {\r\n            if (!_.isEmpty(queryReferences)) {\r\n                let queryRefs = this.items.map(val => val.queryRef);\r\n\r\n                for (let queryReference of queryReferences) {\r\n                    if (!_.contains(queryRefs, queryReference))\r\n                        return;\r\n                }\r\n\r\n                this._activeProjectionRefs = queryReferences;\r\n            }\r\n        }\r\n\r\n        public get showAll(): boolean {\r\n            return this._showAll;\r\n        }\r\n\r\n        public set showAll(value: boolean) {\r\n            this._showAll = value;\r\n        }\r\n\r\n        public addActiveQueryReference(queryRef: string): void {\r\n            if (!this._activeProjectionRefs)\r\n                this._activeProjectionRefs = [queryRef];\r\n            else\r\n                this._activeProjectionRefs.push(queryRef);\r\n        }\r\n\r\n        public getLastActiveQueryReference(): string {\r\n            if (!_.isEmpty(this._activeProjectionRefs)) {\r\n                return this._activeProjectionRefs[this._activeProjectionRefs.length - 1];\r\n            }\r\n        }\r\n\r\n        public clone(): QueryProjectionCollection {\r\n            return new QueryProjectionCollection(_.clone(this.items), _.clone(this._activeProjectionRefs), this._showAll);\r\n        }\r\n    }\r\n\r\n    export module QueryProjectionsByRole {\r\n        /** Clones the QueryProjectionsByRole. */\r\n        export function clone(roles: QueryProjectionsByRole): QueryProjectionsByRole {\r\n            if (!roles)\r\n                return roles;\r\n\r\n            let clonedRoles: QueryProjectionsByRole = {};\r\n\r\n            for (let roleName in roles)\r\n                clonedRoles[roleName] = roles[roleName].clone();\r\n\r\n            return clonedRoles;\r\n        }\r\n\r\n        /** Returns the QueryProjectionCollection for that role.  Even returns empty collections so that 'drillable' and 'activeProjection' fields are preserved. */\r\n        export function getRole(roles: QueryProjectionsByRole, name: string): QueryProjectionCollection {\r\n            debug.assertAnyValue(roles, 'roles');\r\n            debug.assertValue(name, 'name');\r\n\r\n            if (!roles)\r\n                return;\r\n\r\n            return roles[name];\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n\r\n    export interface VisualElement {\r\n        DataRoles?: DataRole[];\r\n        Settings?: VisualElementSettings;\r\n    }\r\n\r\n    /** Defines common settings for a visual element. */\r\n    export interface VisualElementSettings {\r\n        DisplayUnitSystemType?: DisplayUnitSystemType;\r\n    }\r\n\r\n    export interface DataRole {\r\n        Name: string;\r\n        Projection: number;\r\n        isActive?: boolean;\r\n    }\r\n\r\n    /** The system used to determine display units used during formatting */\r\n    export enum DisplayUnitSystemType {\r\n        /** Default display unit system, which saves space by using units such as K, M, bn with PowerView rules for when to pick a unit. Suitable for chart axes. */\r\n        Default,\r\n\r\n        /** A verbose display unit system that will only respect the formatting defined in the model. Suitable for explore mode single-value cards. */\r\n        Verbose,\r\n\r\n        /**\r\n         * A display unit system that uses units such as K, M, bn if we have at least one of those units (e.g. 0.9M is not valid as it's less than 1 million).\r\n         * Suitable for dashboard tile cards\r\n         */\r\n        WholeUnits,\r\n\r\n        /**A display unit system that also contains Auto and None units for data labels*/\r\n        DataLabels,\r\n    }\r\n}\r\n\r\nmodule powerbi.data.contracts {\r\n\r\n    export interface DataViewSource {\r\n        data: any;\r\n        type?: string;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    /** Repreasents the sequence of the dates/times */\r\n    export class DateTimeSequence {\r\n        // Constants\r\n        private static MIN_COUNT: number = 1;\r\n        private static MAX_COUNT: number = 1000;        \r\n\r\n        // Fields\r\n        public min: Date;\r\n        public max: Date;\r\n        public unit: DateTimeUnit;\r\n        public sequence: Date[];\r\n        public interval: number;\r\n        public intervalOffset: number;\r\n\r\n        // Constructors\r\n        /** Creates new instance of the DateTimeSequence */\r\n        constructor(unit: DateTimeUnit) { \r\n            this.unit = unit;\r\n            this.sequence = [];\r\n            this.min = new Date(\"9999-12-31T23:59:59.999\");\r\n            this.max = new Date(\"0001-01-01T00:00:00.000\");\r\n        }\r\n\r\n        // Methods\r\n        /** \r\n         * Add a new Date to a sequence.\r\n         * @param date - date to add\r\n         */\r\n        public add(date: Date) { \r\n            if (date < this.min) { \r\n                this.min = date;\r\n            }\r\n            if (date > this.max) { \r\n                this.max = date;\r\n            }\r\n            this.sequence.push(date);\r\n        }\r\n\r\n        // Methods\r\n        /** \r\n         * Extends the sequence to cover new date range\r\n         * @param min - new min to be covered by sequence\r\n         * @param max - new max to be covered by sequence\r\n         */\r\n        public extendToCover(min: Date, max: Date): void {\r\n            let x: Date = this.min;\r\n            while (min < x) {\r\n                x = DateTimeSequence.addInterval(x, -this.interval, this.unit);\r\n                this.sequence.splice(0, 0, x);\r\n            }\r\n            this.min = x;\r\n\r\n            x = this.max;\r\n            while (x < max) {\r\n                x = DateTimeSequence.addInterval(x, this.interval, this.unit);\r\n                this.sequence.push(x);\r\n            }\r\n            this.max = x;\r\n        }\r\n\r\n        /** \r\n         * Move the sequence to cover new date range\r\n         * @param min - new min to be covered by sequence\r\n         * @param max - new max to be covered by sequence\r\n         */\r\n        public moveToCover(min: Date, max: Date): void { \r\n            let delta: number = DateTimeSequence.getDelta(min, max, this.unit);\r\n            let count = Math.floor(delta / this.interval);\r\n            this.min = DateTimeSequence.addInterval(this.min, count * this.interval, this.unit);\r\n\r\n            this.sequence = [];            \r\n            this.sequence.push(this.min);\r\n            this.max = this.min;\r\n            while (this.max < max) {\r\n                this.max = DateTimeSequence.addInterval(this.max, this.interval, this.unit);\r\n                this.sequence.push(this.max);\r\n            }\r\n        }\r\n\r\n        // Static\r\n        /**\r\n         * Calculate a new DateTimeSequence\r\n         * @param dataMin - Date representing min of the data range\r\n         * @param dataMax - Date representing max of the data range\r\n         * @param expectedCount - expected number of intervals in the sequence\r\n         * @param unit - of the intervals in the sequence\r\n         */\r\n        public static calculate(dataMin: Date, dataMax: Date, expectedCount: number, unit?: DateTimeUnit): DateTimeSequence {\r\n            if (!unit) { \r\n                unit = DateTimeSequence.getIntervalUnit(dataMin, dataMax, expectedCount);\r\n            }\r\n            switch (unit) {\r\n                case DateTimeUnit.Year:\r\n                    return DateTimeSequence.calculateYears(dataMin, dataMax, expectedCount);\r\n                case DateTimeUnit.Month:\r\n                    return DateTimeSequence.calculateMonths(dataMin, dataMax, expectedCount);\r\n                case DateTimeUnit.Week:\r\n                    return DateTimeSequence.calculateWeeks(dataMin, dataMax, expectedCount);\r\n                case DateTimeUnit.Day:\r\n                    return DateTimeSequence.calculateDays(dataMin, dataMax, expectedCount);\r\n                case DateTimeUnit.Hour:\r\n                    return DateTimeSequence.calculateHours(dataMin, dataMax, expectedCount);\r\n                case DateTimeUnit.Minute:\r\n                    return DateTimeSequence.calculateMinutes(dataMin, dataMax, expectedCount);\r\n                case DateTimeUnit.Second:\r\n                    return DateTimeSequence.calculateSeconds(dataMin, dataMax, expectedCount);\r\n                case DateTimeUnit.Millisecond:\r\n                    return DateTimeSequence.calculateMilliseconds(dataMin, dataMax, expectedCount);\r\n                default:\r\n                    debug.assertFail(\"Unsupported DateTimeUnit\");\r\n            }\r\n        }\r\n\r\n        public static calculateYears(dataMin: Date, dataMax: Date, expectedCount: number): DateTimeSequence {\r\n            debug.assertValue(dataMin, \"dataMin\");\r\n            debug.assertValue(dataMax, \"dataMax\");\r\n            debug.assert(!expectedCount || (expectedCount >= DateTimeSequence.MIN_COUNT && expectedCount <= DateTimeSequence.MAX_COUNT), \"Expected count is out of range\");\r\n\r\n            // Calculate range and sequence\r\n            let yearsRange = NumericSequenceRange.calculateDataRange(dataMin.getFullYear(), dataMax.getFullYear(), false);\r\n\r\n            // Calculate year sequence\r\n            let sequence = NumericSequence.calculate(NumericSequenceRange.calculate(0, yearsRange.max - yearsRange.min), expectedCount, 0, null, null, [1, 2, 5]);\r\n            let newMinYear = Math.floor(yearsRange.min / sequence.interval) * sequence.interval; \r\n            let date = new Date(newMinYear, 0, 1);\r\n\r\n            // Convert to date sequence\r\n            let result = DateTimeSequence.fromNumericSequence(date, sequence, DateTimeUnit.Year);\r\n            return result;\r\n        }\r\n\r\n        public static calculateMonths(dataMin: Date, dataMax: Date, expectedCount: number): DateTimeSequence {\r\n            debug.assertValue(dataMin, \"dataMin\");\r\n            debug.assertValue(dataMax, \"dataMax\");\r\n            debug.assert(expectedCount === undefined || (expectedCount >= DateTimeSequence.MIN_COUNT && expectedCount <= DateTimeSequence.MAX_COUNT), \"expected count is out of range\");\r\n\r\n            // Calculate range\r\n            let minYear = dataMin.getFullYear();\r\n            let maxYear = dataMax.getFullYear();\r\n            let minMonth = dataMin.getMonth();\r\n            let maxMonth = (maxYear - minYear) * 12 + dataMax.getMonth();\r\n            let date = new Date(minYear, 0, 1);\r\n            \r\n            // Calculate month sequence\r\n            let sequence = NumericSequence.calculateUnits(minMonth, maxMonth, expectedCount, [1, 2, 3, 6, 12]);\r\n\r\n            // Convert to date sequence\r\n            let result = DateTimeSequence.fromNumericSequence(date, sequence, DateTimeUnit.Month);\r\n            return result;\r\n        }\r\n\r\n        public static calculateWeeks(dataMin: Date, dataMax: Date, expectedCount: number): DateTimeSequence {\r\n            debug.assertValue(dataMin, \"dataMin\");\r\n            debug.assertValue(dataMax, \"dataMax\");\r\n            debug.assert(expectedCount === undefined || (expectedCount >= DateTimeSequence.MIN_COUNT && expectedCount <= DateTimeSequence.MAX_COUNT), \"expected count is out of range\");\r\n\r\n            let firstDayOfWeek = 0;\r\n            let minDayOfWeek = dataMin.getDay();\r\n            let dayOffset = (minDayOfWeek - firstDayOfWeek + 7) % 7;\r\n            let minDay = dataMin.getDate() - dayOffset;\r\n\r\n            // Calculate range\r\n            let date = new Date(dataMin.getFullYear(), dataMin.getMonth(), minDay);\r\n            let min = 0;\r\n            let max = Double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, DateTimeUnit.Week));\r\n\r\n            // Calculate week sequence\r\n            let sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 4, 8]);\r\n\r\n            // Convert to date sequence\r\n            let result = DateTimeSequence.fromNumericSequence(date, sequence, DateTimeUnit.Week);\r\n            return result;\r\n        }\r\n\r\n        public static calculateDays(dataMin: Date, dataMax: Date, expectedCount: number): DateTimeSequence {\r\n            debug.assertValue(dataMin, \"dataMin\");\r\n            debug.assertValue(dataMax, \"dataMax\");\r\n            debug.assert(expectedCount === undefined || (expectedCount >= DateTimeSequence.MIN_COUNT && expectedCount <= DateTimeSequence.MAX_COUNT), \"expected count is out of range\");\r\n\r\n            // Calculate range\r\n            let date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate());\r\n            let min = 0;\r\n            let max = Double.ceilWithPrecision(DateTimeSequence.getDelta(dataMin, dataMax, DateTimeUnit.Day));\r\n            \r\n            // Calculate day sequence\r\n            let sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 7, 14]);\r\n\r\n            // Convert to date sequence\r\n            let result = DateTimeSequence.fromNumericSequence(date, sequence, DateTimeUnit.Day);\r\n            return result;\r\n        }\r\n\r\n        public static calculateHours(dataMin: Date, dataMax: Date, expectedCount: number): DateTimeSequence {\r\n            debug.assertValue(dataMin, \"dataMin\");\r\n            debug.assertValue(dataMax, \"dataMax\");\r\n            debug.assert(expectedCount === undefined || (expectedCount >= DateTimeSequence.MIN_COUNT && expectedCount <= DateTimeSequence.MAX_COUNT), \"expected count is out of range\");\r\n\r\n            // Calculate range\r\n            let date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate());\r\n            let min = Double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, DateTimeUnit.Hour));\r\n            let max = Double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, DateTimeUnit.Hour));\r\n            \r\n            // Calculate hour sequence\r\n            let sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 3, 6, 12, 24]);\r\n\r\n            // Convert to date sequence\r\n            let result = DateTimeSequence.fromNumericSequence(date, sequence, DateTimeUnit.Hour);\r\n            return result;\r\n        }\r\n\r\n        public static calculateMinutes(dataMin: Date, dataMax: Date, expectedCount: number): DateTimeSequence {\r\n            debug.assertValue(dataMin, \"dataMin\");\r\n            debug.assertValue(dataMax, \"dataMax\");\r\n            debug.assert(expectedCount === undefined || (expectedCount >= DateTimeSequence.MIN_COUNT && expectedCount <= DateTimeSequence.MAX_COUNT), \"expected count is out of range\");\r\n\r\n            // Calculate range\r\n            let date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours());\r\n            let min = Double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, DateTimeUnit.Minute));\r\n            let max = Double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, DateTimeUnit.Minute));\r\n\r\n            // Calculate minutes numeric sequence\r\n            let sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 5, 10, 15, 30, 60, 60 * 2, 60 * 3, 60 * 6, 60 * 12, 60 * 24]);\r\n\r\n            // Convert to date sequence\r\n            let result = DateTimeSequence.fromNumericSequence(date, sequence, DateTimeUnit.Minute);\r\n            return result;\r\n        }\r\n\r\n        public static calculateSeconds(dataMin: Date, dataMax: Date, expectedCount: number): DateTimeSequence {\r\n            debug.assertValue(dataMin, \"dataMin\");\r\n            debug.assertValue(dataMax, \"dataMax\");\r\n            debug.assert(expectedCount === undefined || (expectedCount >= DateTimeSequence.MIN_COUNT && expectedCount <= DateTimeSequence.MAX_COUNT), \"expected count is out of range\");\r\n\r\n            // Calculate range\r\n            let date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours(), dataMin.getMinutes());\r\n            let min = Double.floorWithPrecision(DateTimeSequence.getDelta(date, dataMin, DateTimeUnit.Second));\r\n            let max = Double.ceilWithPrecision(DateTimeSequence.getDelta(date, dataMax, DateTimeUnit.Second));\r\n\r\n            // Calculate minutes numeric sequence\r\n            let sequence = NumericSequence.calculateUnits(min, max, expectedCount, [1, 2, 5, 10, 15, 30, 60, 60 * 2, 60 * 5, 60 * 10, 60 * 15, 60 * 30, 60 * 60]);\r\n\r\n            // Convert to date sequence\r\n            let result = DateTimeSequence.fromNumericSequence(date, sequence, DateTimeUnit.Second);\r\n            return result;\r\n        }\r\n\r\n        public static calculateMilliseconds(dataMin: Date, dataMax: Date, expectedCount: number): DateTimeSequence {\r\n            debug.assertValue(dataMin, \"dataMin\");\r\n            debug.assertValue(dataMax, \"dataMax\");\r\n            debug.assert(expectedCount === undefined || (expectedCount >= DateTimeSequence.MIN_COUNT && expectedCount <= DateTimeSequence.MAX_COUNT), \"expected count is out of range\");\r\n\r\n            // Calculate range\r\n            let date = new Date(dataMin.getFullYear(), dataMin.getMonth(), dataMin.getDate(), dataMin.getHours(), dataMin.getMinutes(), dataMin.getSeconds());\r\n            let min = DateTimeSequence.getDelta(date, dataMin, DateTimeUnit.Millisecond);\r\n            let max = DateTimeSequence.getDelta(date, dataMax, DateTimeUnit.Millisecond);\r\n            \r\n            // Calculate milliseconds numeric sequence\r\n            let sequence = NumericSequence.calculate(NumericSequenceRange.calculate(min, max), expectedCount, 0);\r\n\r\n            // Convert to date sequence\r\n            let result = DateTimeSequence.fromNumericSequence(date, sequence, DateTimeUnit.Millisecond);\r\n            return result;\r\n        }\r\n\r\n        private static fromNumericSequence(date: Date, sequence: NumericSequence, unit: DateTimeUnit) { \r\n            let result = new DateTimeSequence(unit);\r\n            for (let i = 0; i < sequence.sequence.length; i++) { \r\n                let x: number = sequence.sequence[i];\r\n                let d: Date = DateTimeSequence.addInterval(date, x, unit);\r\n                result.add(d);\r\n            }\r\n            result.interval = sequence.interval;\r\n            result.intervalOffset = sequence.intervalOffset;\r\n            return result;\r\n        }\r\n\r\n        private static addInterval(value: Date, interval: number, unit: DateTimeUnit): Date {\r\n            interval = Math.round(interval);\r\n            switch (unit)\r\n            {\r\n                case DateTimeUnit.Year:\r\n                    return DateUtils.addYears(value, interval);\r\n                case DateTimeUnit.Month:\r\n                    return DateUtils.addMonths(value, interval);\r\n                case DateTimeUnit.Week:\r\n                    return DateUtils.addWeeks(value, interval);\r\n                case DateTimeUnit.Day:\r\n                    return DateUtils.addDays(value, interval);\r\n                case DateTimeUnit.Hour:\r\n                    return DateUtils.addHours(value, interval);\r\n                case DateTimeUnit.Minute:\r\n                    return DateUtils.addMinutes(value, interval);\r\n                case DateTimeUnit.Second:\r\n                    return DateUtils.addSeconds(value, interval);\r\n                case DateTimeUnit.Millisecond:\r\n                    return DateUtils.addMilliseconds(value, interval);\r\n            }\r\n        }\r\n\r\n        private static getDelta(min: Date, max: Date, unit: DateTimeUnit): number {\r\n            let delta: number = 0;\r\n            switch (unit) {\r\n                case DateTimeUnit.Year:\r\n                    delta = max.getFullYear() - min.getFullYear();\r\n                    break;\r\n                case DateTimeUnit.Month:\r\n                    delta = (max.getFullYear() - min.getFullYear()) * 12 + max.getMonth() - min.getMonth();\r\n                    break;\r\n                case DateTimeUnit.Week:\r\n                    delta = (max.getTime() - min.getTime()) / (7 * 24 * 3600000);\r\n                    break;\r\n                case DateTimeUnit.Day:\r\n                    delta = (max.getTime() - min.getTime()) / (24 * 3600000);\r\n                    break;\r\n                case DateTimeUnit.Hour:\r\n                    delta = (max.getTime() - min.getTime()) / 3600000;\r\n                    break;\r\n                case DateTimeUnit.Minute:\r\n                    delta = (max.getTime() - min.getTime()) / 60000;\r\n                    break;\r\n                case DateTimeUnit.Second:\r\n                    delta = (max.getTime() - min.getTime()) / 1000;\r\n                    break;\r\n                case DateTimeUnit.Millisecond:\r\n                    delta = max.getTime() - min.getTime();\r\n                    break;\r\n            }\r\n            return delta;\r\n        }\r\n\r\n        public static getIntervalUnit(min:Date, max:Date, maxCount: number): DateTimeUnit {\r\n            maxCount = Math.max(maxCount, 2);\r\n            let totalDays = DateTimeSequence.getDelta(min, max, DateTimeUnit.Day);\r\n            if (totalDays > 356 && totalDays >= 30 * 6 * maxCount)\r\n                return DateTimeUnit.Year;\r\n            if (totalDays > 60 && totalDays > 7 * maxCount)\r\n                return DateTimeUnit.Month;\r\n            if (totalDays > 14 && totalDays > 2 * maxCount)\r\n                return DateTimeUnit.Week;\r\n            let totalHours = DateTimeSequence.getDelta(min, max, DateTimeUnit.Hour);\r\n            if (totalDays > 2 && totalHours > 12 * maxCount)\r\n                return DateTimeUnit.Day;\r\n            if (totalHours >= 24 && totalHours >= maxCount)\r\n                return DateTimeUnit.Hour;\r\n            let totalMinutes = DateTimeSequence.getDelta(min, max, DateTimeUnit.Minute);\r\n            if (totalMinutes > 2 && totalMinutes >= maxCount)\r\n                return DateTimeUnit.Minute;\r\n            let totalSeconds = DateTimeSequence.getDelta(min, max, DateTimeUnit.Second);\r\n            if (totalSeconds > 2 && totalSeconds >= 0.8 * maxCount)\r\n                return DateTimeUnit.Second;\r\n            let totalMilliseconds = DateTimeSequence.getDelta(min, max, DateTimeUnit.Millisecond);\r\n            if (totalMilliseconds > 0)\r\n                return DateTimeUnit.Millisecond;\r\n  \r\n            // If the size of the range is 0 we need to guess the unit based on the date's non-zero values starting with milliseconds\r\n            let date = min;\r\n            if (date.getMilliseconds() !== 0)\r\n                return DateTimeUnit.Millisecond;\r\n            if (date.getSeconds() !== 0)\r\n                return DateTimeUnit.Second;\r\n            if (date.getMinutes() !== 0)\r\n                return DateTimeUnit.Minute;\r\n            if (date.getHours() !== 0)\r\n                return DateTimeUnit.Hour;\r\n            if (date.getDate() !== 1)\r\n                return DateTimeUnit.Day;\r\n            if (date.getMonth() !== 0)\r\n                return DateTimeUnit.Month;\r\n            \r\n            return DateTimeUnit.Year;\r\n        }\r\n    }\r\n\r\n    /** DateUtils module provides DateTimeSequence with set of additional date manipulation routines */\r\n    export module DateUtils { \r\n        let MonthDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n        let MonthDaysLeap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n\r\n        /**\r\n         * Returns bool indicating weither the provided year is a leap year.\r\n         * @param year - year value\r\n         */\r\n        function isLeap(year: number): boolean { \r\n            return ((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0);\r\n        }\r\n\r\n        /** \r\n         * Returns number of days in the provided year/month.\r\n         * @param year - year value\r\n         * @param month - month value\r\n         */\r\n        function getMonthDays(year: number, month: number) { \r\n            return isLeap(year) ? MonthDaysLeap[month] : MonthDays[month];\r\n        }\r\n\r\n        /**\r\n         * Adds a specified number of years to the provided date.\r\n         * @param date - date value\r\n         * @param yearDelta - number of years to add\r\n         */\r\n        export function addYears(date: Date, yearDelta: number): Date { \r\n            let year = date.getFullYear();\r\n            let month = date.getMonth();\r\n            let day = date.getDate();\r\n            let isLeapDay = month === 2 && day === 29;\r\n\r\n            let result = new Date(date.getTime());\r\n            year = year + yearDelta;\r\n            if (isLeapDay && !isLeap(year)) {\r\n                day = 28;\r\n            } \r\n            result.setFullYear(year, month, day);\r\n            return result;\r\n        }\r\n\r\n        /** \r\n         * Adds a specified number of months to the provided date.\r\n         * @param date - date value\r\n         * @param monthDelta - number of months to add\r\n         */\r\n        export function addMonths(date: Date, monthDelta: number): Date { \r\n            let year = date.getFullYear();\r\n            let month = date.getMonth();\r\n            let day = date.getDate();\r\n           \r\n            let result = new Date(date.getTime());\r\n            year += (monthDelta - (monthDelta % 12)) / 12;\r\n            month += monthDelta % 12;\r\n\r\n            // VSTS 1325771: Certain column charts don't display any data\r\n            // Wrap arround the month if is after december (value 11)\r\n            if (month > 11) {\r\n                month = month % 12;\r\n                year++;\r\n            }\r\n\r\n            day = Math.min(day, getMonthDays(year, month));\r\n            result.setFullYear(year, month, day);\r\n            return result;\r\n        }\r\n\r\n        /** \r\n         * Adds a specified number of weeks to the provided date.\r\n         * @param date - date value\r\n         * @param weeks - number of weeks to add\r\n         */\r\n        export function addWeeks(date: Date, weeks: number): Date { \r\n            return addDays(date, weeks * 7);\r\n        }\r\n\r\n        /** \r\n         * Adds a specified number of days to the provided date.\r\n         * @param date - date value\r\n         * @param days - number of days to add\r\n         */\r\n        export function addDays(date: Date, days: number): Date { \r\n            let year = date.getFullYear();\r\n            let month = date.getMonth();\r\n            let day = date.getDate();           \r\n            let result = new Date(date.getTime());\r\n            result.setFullYear(year, month, day + days);\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * Adds a specified number of hours to the provided date.\r\n         * @param date - date value\r\n         * @param hours - number of hours to add\r\n         */\r\n        export function addHours(date: Date, hours: number): Date { \r\n            return new Date(date.getTime() + hours * 3600000);\r\n        }\r\n\r\n        /**\r\n         * Adds a specified number of minutes to the provided date.\r\n         * @param date - date value\r\n         * @param minutes - number of minutes to add\r\n         */\r\n        export function addMinutes(date: Date, minutes: number): Date { \r\n            return new Date(date.getTime() + minutes * 60000);\r\n        }\r\n\r\n        /** \r\n         * Adds a specified number of seconds to the provided date.\r\n         * @param date - date value\r\n         * @param seconds - number of seconds to add\r\n         */\r\n        export function addSeconds(date: Date, seconds: number): Date { \r\n            return new Date(date.getTime() + seconds * 1000);\r\n        }\r\n\r\n        /** \r\n         * Adds a specified number of milliseconds to the provided date.\r\n         * @param date - date value\r\n         * @param milliseconds - number of milliseconds to add\r\n         */\r\n        export function addMilliseconds(date: Date, milliseconds: number): Date { \r\n            return new Date(date.getTime() + milliseconds);\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    // Constants\r\n    const maxExponent = 24;\r\n    const defaultScientificBigNumbersBoundary = 1E15;\r\n    const scientificSmallNumbersBoundary = 1E-4;\r\n    const PERCENTAGE_FORMAT = '%';\r\n    const SCIENTIFIC_FORMAT = 'E+0';\r\n    const DEFAULT_SCIENTIFIC_FORMAT = '0.##' + SCIENTIFIC_FORMAT;\r\n\r\n    // Regular expressions\r\n    /**\r\n     * This regex looks for strings that match one of the following conditions:\r\n     *   - Optionally contain \"0\", \"#\", followed by a period, followed by at least one \"0\" or \"#\" (Ex. ###,000.###)\r\n     *   - Contains at least one of \"0\", \"#\", or \",\" (Ex. ###,000)\r\n     *   - Contain a \"g\" (indicates to use the general .NET numeric format string)\r\n     * The entire string (start to end) must match, and the match is not case-sensitive.\r\n     */\r\n    const SUPPORTED_SCIENTIFIC_FORMATS = /^([0\\#,]*\\.[0\\#]+|[0\\#,]+|g)$/i;\r\n\r\n    export class DisplayUnit {\r\n        // Fields\r\n        public value: number;\r\n        public title: string;\r\n        public labelFormat: string;\r\n        public applicableRangeMin: number;\r\n        public applicableRangeMax: number;\r\n\r\n        // Methods\r\n        public project(value: number): number {\r\n            if (this.value) {\r\n                return Double.removeDecimalNoise(value / this.value);\r\n            } else {\r\n                return value;\r\n            }\r\n        }\r\n\r\n        public reverseProject(value: number): number {\r\n            if (this.value) {\r\n                return value * this.value;\r\n            } else {\r\n                return value;\r\n            }\r\n        }\r\n\r\n        public isApplicableTo(value: number): boolean {\r\n            value = Math.abs(value);\r\n            let precision = Double.getPrecision(value, 3);\r\n            return Double.greaterOrEqualWithPrecision(value, this.applicableRangeMin, precision) && Double.lessWithPrecision(value, this.applicableRangeMax, precision);\r\n        }\r\n\r\n        public isScaling(): boolean {\r\n            return this.value > 1;\r\n        }\r\n    }\r\n\r\n    export class DisplayUnitSystem {\r\n        // Fields\r\n        public units: DisplayUnit[];\r\n        public displayUnit: DisplayUnit;\r\n        private unitBaseValue: number;\r\n        protected static UNSUPPORTED_FORMATS = /^(p\\d*)|(.*\\%)|(e\\d*)$/i;\r\n\r\n        // Constructor\r\n        constructor(units?: DisplayUnit[]) {\r\n            this.units = units ? units : [];\r\n        }\r\n\r\n        // Properties\r\n        public get title(): string {\r\n            return this.displayUnit ? this.displayUnit.title : undefined;\r\n        }\r\n\r\n        // Methods\r\n        public update(value: number): void {\r\n            if (value === undefined)\r\n                return;\r\n\r\n            this.unitBaseValue = value;\r\n            this.displayUnit = this.findApplicableDisplayUnit(value);\r\n        }\r\n\r\n        private findApplicableDisplayUnit(value: number): DisplayUnit {\r\n            for (let unit of this.units) {\r\n                if (unit.isApplicableTo(value))\r\n                    return unit;\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        public format(value: number, format: string, decimals?: number, trailingZeros?: boolean): string {\r\n            debug.assert(typeof (value) === \"number\", \"value must be a number\");\r\n            if (this.isFormatSupported(format)) {\r\n                decimals = this.getNumberOfDecimalsForFormatting(format, decimals);\r\n\r\n                if (this.hasScientitifcFormat(format)) {\r\n                    return this.formatHelper(value, '', format, decimals, trailingZeros);\r\n                }\r\n                if (this.isScalingUnit() && this.shouldRespectScalingUnit(format)) {\r\n                    return this.formatHelper(this.displayUnit.project(value), this.displayUnit.labelFormat, format, decimals, trailingZeros);\r\n                }\r\n                if (decimals != null) {\r\n                    return this.formatHelper(value, '', format, decimals, trailingZeros);\r\n                }\r\n            }\r\n            \r\n            return formattingService.formatValue(value, format);\r\n        }\r\n\r\n        public isFormatSupported(format: string): boolean {\r\n            return !DisplayUnitSystem.UNSUPPORTED_FORMATS.test(format);\r\n        }\r\n\r\n        public isPercentageFormat(format: string): boolean {\r\n            return format && format.indexOf(PERCENTAGE_FORMAT) >= 0;\r\n        }\r\n\r\n        public shouldRespectScalingUnit(format: string): boolean {\r\n            return !this.isPercentageFormat(format);\r\n        }\r\n\r\n        public getNumberOfDecimalsForFormatting(format: string, decimals?: number) {\r\n            return decimals;\r\n        }\r\n\r\n        public isScalingUnit(): boolean {\r\n            return this.displayUnit && this.displayUnit.isScaling();\r\n        }\r\n\r\n        private formatHelper(value: number, nonScientificFormat: string, format: string, decimals?: number, trailingZeros?: boolean) {\r\n            // If the format is \"general\" and we want to override the number of decimal places then use the default numeric format string.\r\n            if ((format === 'g' || format === 'G') && decimals != null)\r\n                format = visuals.valueFormatter.DefaultNumericFormat;\r\n\r\n            format = NumberFormat.addDecimalsToFormat(format, decimals, trailingZeros);\r\n\r\n            if (format && !formattingService.isStandardNumberFormat(format))\r\n                return formattingService.formatNumberWithCustomOverride(value, format, nonScientificFormat);\r\n\r\n            if (!format)\r\n                format = 'G';\r\n            if (!nonScientificFormat)\r\n                nonScientificFormat = '{0}';\r\n\r\n            let text = formattingService.formatValue(value, format);\r\n            return formattingService.format(nonScientificFormat, [text]);\r\n        }\r\n\r\n        /** Formats a single value by choosing an appropriate base for the DisplayUnitSystem before formatting. */\r\n        public formatSingleValue(value: number, format: string, decimals?: number, trailingZeros?: boolean): string {\r\n            // Change unit base to a value appropriate for this value\r\n            this.update(this.shouldUseValuePrecision(value) ? Double.getPrecision(value, 8) : value);\r\n\r\n            return this.format(value, format, decimals, trailingZeros);\r\n        }\r\n\r\n        private shouldUseValuePrecision(value: number): boolean {\r\n            if (this.units.length === 0)\r\n                return true;\r\n\r\n            // Check if the value is big enough to have a valid unit by checking against the smallest unit (that it's value bigger than 1).\r\n            let applicableRangeMin: number = 0;\r\n            for (let i = 0; i < this.units.length; i++) {\r\n                if (this.units[i].isScaling()) {\r\n                    applicableRangeMin = this.units[i].applicableRangeMin;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return Math.abs(value) < applicableRangeMin;\r\n        }\r\n\r\n        protected isScientific(value: number): boolean {\r\n            return value < - defaultScientificBigNumbersBoundary || value > defaultScientificBigNumbersBoundary ||\r\n                (-scientificSmallNumbersBoundary < value && value < scientificSmallNumbersBoundary && value !== 0);\r\n        }\r\n\r\n        protected hasScientitifcFormat(format: string): boolean {\r\n            return format && format.toUpperCase().indexOf(\"E\") !== -1;\r\n        }\r\n\r\n        protected supportsScientificFormat(format: string): boolean {\r\n            if (format)\r\n                return SUPPORTED_SCIENTIFIC_FORMATS.test(format);\r\n\r\n            return true;\r\n        }\r\n\r\n        protected shouldFallbackToScientific(value: number, format: string): boolean {\r\n            return !this.hasScientitifcFormat(format)\r\n                && this.supportsScientificFormat(format)\r\n                && this.isScientific(value);\r\n        }\r\n\r\n        protected getScientificFormat(data: number, format: string, decimals: number, trailingZeros: boolean): string {\r\n            // Use scientific format outside of the range\r\n            if (this.isFormatSupported(format) && this.shouldFallbackToScientific(data, format)) {\r\n                let numericFormat = NumberFormat.getNumericFormat(data, format);\r\n                if (decimals)\r\n                    numericFormat = NumberFormat.addDecimalsToFormat(numericFormat ? numericFormat : '0', Math.abs(decimals), trailingZeros);\r\n\r\n                if (numericFormat)\r\n                    return numericFormat + SCIENTIFIC_FORMAT;\r\n                else\r\n                    return DEFAULT_SCIENTIFIC_FORMAT;\r\n            }\r\n\r\n            return format;\r\n        }\r\n    }\r\n\r\n    /** Provides a unit system that is defined by formatting in the model, and is suitable for visualizations shown in single number visuals in explore mode. */\r\n    export class NoDisplayUnitSystem extends DisplayUnitSystem {\r\n        // Constructor\r\n        constructor() {\r\n            super([]);\r\n        }\r\n    }\r\n\r\n    /** Provides a unit system that creates a more concise format for displaying values. This is suitable for most of the cases where\r\n        we are showing values (chart axes) and as such it is the default unit system. */\r\n    export class DefaultDisplayUnitSystem extends DisplayUnitSystem {\r\n        private static units: DisplayUnit[];\r\n\r\n        // Constructor\r\n        constructor(unitLookup: (exponent: number) => DisplayUnitSystemNames) {\r\n            super(DefaultDisplayUnitSystem.getUnits(unitLookup));\r\n        }\r\n\r\n        // Methods\r\n        public format(data: number, format: string, decimals?: number, trailingZeros?: boolean): string {\r\n            format = this.getScientificFormat(data, format, decimals, trailingZeros);\r\n\r\n            return super.format(data, format, decimals, trailingZeros);\r\n        }\r\n\r\n        public static reset(): void {\r\n            DefaultDisplayUnitSystem.units = null;\r\n        }\r\n\r\n        private static getUnits(unitLookup: (exponent: number) => DisplayUnitSystemNames): DisplayUnit[] {\r\n            if (!DefaultDisplayUnitSystem.units) {\r\n                DefaultDisplayUnitSystem.units = createDisplayUnits(unitLookup, (value: number, previousUnitValue: number, min: number) => {\r\n                    // When dealing with millions/billions/trillions we need to switch to millions earlier: for example instead of showing 100K 200K 300K we should show 0.1M 0.2M 0.3M etc\r\n                    if (value - previousUnitValue >= 1000) {\r\n                        return value / 10;\r\n                    }\r\n\r\n                    return min;\r\n                });\r\n\r\n                // Ensure last unit has max of infinity\r\n                DefaultDisplayUnitSystem.units[DefaultDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;\r\n            }\r\n            return DefaultDisplayUnitSystem.units;\r\n        }\r\n    }\r\n\r\n    /** Provides a unit system that creates a more concise format for displaying values, but only allows showing a unit if we have at least\r\n        one of those units (e.g. 0.9M is not allowed since it's less than 1 million). This is suitable for cases such as dashboard tiles\r\n        where we have restricted space but do not want to show partial units. */\r\n    export class WholeUnitsDisplayUnitSystem extends DisplayUnitSystem {\r\n        private static units: DisplayUnit[];\r\n\r\n        // Constructor\r\n        constructor(unitLookup: (exponent: number) => DisplayUnitSystemNames) {\r\n            super(WholeUnitsDisplayUnitSystem.getUnits(unitLookup));\r\n        }\r\n\r\n        public static reset(): void {\r\n            WholeUnitsDisplayUnitSystem.units = null;\r\n        }\r\n\r\n        private static getUnits(unitLookup: (exponent: number) => DisplayUnitSystemNames): DisplayUnit[] {\r\n            if (!WholeUnitsDisplayUnitSystem.units) {\r\n                WholeUnitsDisplayUnitSystem.units = createDisplayUnits(unitLookup);\r\n\r\n                // Ensure last unit has max of infinity\r\n                WholeUnitsDisplayUnitSystem.units[WholeUnitsDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;\r\n            }\r\n\r\n            return WholeUnitsDisplayUnitSystem.units;\r\n        }\r\n\r\n        public format(data: number, format: string, decimals?: number, trailingZeros?: boolean): string {\r\n            format = this.getScientificFormat(data, format, decimals, trailingZeros);\r\n\r\n            return super.format(data, format, decimals, trailingZeros);\r\n        }\r\n    }\r\n\r\n    export class DataLabelsDisplayUnitSystem extends DisplayUnitSystem {\r\n\r\n        // Constants\r\n        private static AUTO_DISPLAYUNIT_VALUE = 0;\r\n        private static NONE_DISPLAYUNIT_VALUE = 1;\r\n        protected static UNSUPPORTED_FORMATS = /^(e\\d*)$/i;\r\n\r\n        private static units: DisplayUnit[];\r\n\r\n        constructor(unitLookup: (exponent: number) => DisplayUnitSystemNames) {\r\n            super(DataLabelsDisplayUnitSystem.getUnits(unitLookup));\r\n        }\r\n\r\n        public isFormatSupported(format: string): boolean {\r\n            return !DataLabelsDisplayUnitSystem.UNSUPPORTED_FORMATS.test(format);\r\n        }\r\n\r\n        private static getUnits(unitLookup: (exponent: number) => DisplayUnitSystemNames): DisplayUnit[] {\r\n            if (!DataLabelsDisplayUnitSystem.units) {\r\n                let units = [];\r\n                let adjustMinBasedOnPreviousUnit = (value: number, previousUnitValue: number, min: number): number => {\r\n                    // Never returns true, we are always ignoring\r\n                    // We do not early switch (e.g. 100K instead of 0.1M)\r\n                    // Intended? If so, remove this function, otherwise, remove if statement\r\n                    if (value === -1)\r\n                        if (value - previousUnitValue >= 1000) {\r\n                            return value / 10;\r\n                        }\r\n                    return min;\r\n                };\r\n\r\n                // Add Auto & None\r\n                let names = unitLookup(-1);\r\n                addUnitIfNonEmpty(units, DataLabelsDisplayUnitSystem.AUTO_DISPLAYUNIT_VALUE, names.title, names.format, adjustMinBasedOnPreviousUnit);\r\n\r\n                names = unitLookup(0);\r\n                addUnitIfNonEmpty(units, DataLabelsDisplayUnitSystem.NONE_DISPLAYUNIT_VALUE, names.title, names.format, adjustMinBasedOnPreviousUnit);\r\n\r\n                // Add normal units\r\n                DataLabelsDisplayUnitSystem.units = units.concat(createDisplayUnits(unitLookup, adjustMinBasedOnPreviousUnit));\r\n\r\n                // Ensure last unit has max of infinity\r\n                DataLabelsDisplayUnitSystem.units[DataLabelsDisplayUnitSystem.units.length - 1].applicableRangeMax = Infinity;\r\n            }\r\n            return DataLabelsDisplayUnitSystem.units;\r\n        }\r\n\r\n        public format(data: number, format: string, decimals?: number, trailingZeros?: boolean): string {\r\n            format = this.getScientificFormat(data, format, decimals, trailingZeros);\r\n\r\n            return super.format(data, format, decimals, trailingZeros);\r\n        }\r\n    }\r\n\r\n    export interface DisplayUnitSystemNames {\r\n        title: string;\r\n        format: string;\r\n    }\r\n\r\n    function createDisplayUnits(unitLookup: (exponent: number) => DisplayUnitSystemNames, adjustMinBasedOnPreviousUnit?: (value: number, previousUnitValue: number, min: number) => number) {\r\n        let units = [];\r\n        for (let i = 3; i < maxExponent; i++) {\r\n            let names = unitLookup(i);\r\n            if (names)\r\n                addUnitIfNonEmpty(units, Double.pow10(i), names.title, names.format, adjustMinBasedOnPreviousUnit);\r\n        }\r\n\r\n        return units;\r\n    }\r\n\r\n    function addUnitIfNonEmpty(\r\n        units: DisplayUnit[],\r\n        value: number,\r\n        title: string,\r\n        labelFormat: string,\r\n        adjustMinBasedOnPreviousUnit?: (value: number, previousUnitValue: number, min: number) => number): void {\r\n        if (title || labelFormat) {\r\n            let min = value;\r\n\r\n            if (units.length > 0) {\r\n                let previousUnit = units[units.length - 1];\r\n\r\n                if (adjustMinBasedOnPreviousUnit)\r\n                    min = adjustMinBasedOnPreviousUnit(value, previousUnit.value, min);\r\n\r\n                previousUnit.applicableRangeMax = min;\r\n            }\r\n            let unit = new DisplayUnit();\r\n            unit.value = value;\r\n            unit.applicableRangeMin = min;\r\n            unit.applicableRangeMax = min * 1000;\r\n            unit.title = title;\r\n            unit.labelFormat = labelFormat;\r\n            units.push(unit);\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    export class NumericSequence {\r\n        private static MIN_COUNT: number = 1;\r\n        private static MAX_COUNT: number = 1000;\r\n\r\n        private maxAllowedMargin: number;\r\n        private canExtendMin: boolean;\r\n        private canExtendMax: boolean;\r\n\r\n        public interval: number;\r\n        public intervalOffset: number;\r\n        public min: number;\r\n        public max: number;\r\n        public precision: number;\r\n        public sequence: number[];\r\n\r\n        public static calculate (range: NumericSequenceRange, expectedCount: number, maxAllowedMargin?: number, minPower?: number, useZeroRefPoint?: boolean, steps?: number[]): NumericSequence {\r\n            debug.assertValue(range, \"range\");\r\n            debug.assert(expectedCount === undefined || (expectedCount >= NumericSequence.MIN_COUNT && expectedCount <= NumericSequence.MAX_COUNT), \"expectedCount\");\r\n            debug.assert(minPower === undefined|| (minPower >= Double.MIN_EXP && minPower <= Double.MAX_EXP), \"minPower\");\r\n            debug.assert(maxAllowedMargin === undefined|| (maxAllowedMargin >= 0), \"maxAllowedMargin\");\r\n\r\n            let result = new NumericSequence();\r\n\r\n            if (expectedCount === undefined)\r\n                expectedCount = 10;\r\n            else\r\n                expectedCount = Double.ensureInRange(expectedCount, NumericSequence.MIN_COUNT, NumericSequence.MAX_COUNT);\r\n            if (minPower === undefined)\r\n                minPower = Double.MIN_EXP;\r\n            if (useZeroRefPoint === undefined)\r\n                useZeroRefPoint = false;\r\n            if (maxAllowedMargin === undefined)\r\n                maxAllowedMargin = 1;\r\n            if (steps === undefined)\r\n                steps = [1, 2, 5];\r\n\r\n            // Handle single stop case\r\n            if (range.forcedSingleStop) {\r\n                result.interval = range.getSize();\r\n                result.intervalOffset = result.interval - (range.forcedSingleStop - range.min);\r\n                result.min = range.min;\r\n                result.max = range.max;\r\n                result.sequence = [range.forcedSingleStop];\r\n                return result;\r\n            }\r\n\r\n            let interval = 0;\r\n            let min = 0;\r\n            let max = 9;\r\n            let canExtendMin = maxAllowedMargin > 0 && !range.hasFixedMin;\r\n            let canExtendMax = maxAllowedMargin > 0 && !range.hasFixedMax;\r\n\r\n            let size = range.getSize();\r\n            let exp = Double.log10(size);\r\n\r\n            // Account for Exp of steps\r\n            let stepExp = Double.log10(steps[0]);\r\n            exp = exp - stepExp;\r\n\r\n            // Account for MaxCount\r\n            let expectedCountExp = Double.log10(expectedCount);\r\n            exp = exp - expectedCountExp;\r\n\r\n            // Account for MinPower\r\n            exp = Math.max(exp, minPower - stepExp + 1);\r\n            let count = undefined;\r\n            // Create array of \"good looking\" numbers\r\n            if (interval !== 0) {\r\n                // If explicit interval is defined - use it instead of the steps array.\r\n                let power = Double.pow10(exp);\r\n                let roundMin = Double.floorToPrecision(range.min, power);\r\n                let roundMax = Double.ceilToPrecision(range.max, power);\r\n                let roundRange = NumericSequenceRange.calculateFixedRange(roundMin, roundMax);\r\n\r\n                roundRange.shrinkByStep(range, interval);\r\n                min = roundRange.min;\r\n                max = roundRange.max;\r\n                count = Math.floor(roundRange.getSize() / interval);\r\n            }\r\n            else {\r\n                // No interval defined -> find optimal interval\r\n                let dexp;\r\n                for (dexp = 0; dexp < 3; dexp++) {\r\n                    let e = exp + dexp;\r\n                    let power = Double.pow10(e);\r\n\r\n                    let roundMin = Double.floorToPrecision(range.min, power);\r\n                    let roundMax = Double.ceilToPrecision(range.max, power);\r\n\r\n                    // Go throught the steps array looking for the smallest step that produces the right interval count.\r\n                    let stepsCount = steps.length;\r\n                    let stepPower = Double.pow10(e - 1);\r\n                    for (let i = 0; i < stepsCount; i++) {\r\n                        let step = steps[i] * stepPower;\r\n                        let roundRange = NumericSequenceRange.calculateFixedRange(roundMin, roundMax, useZeroRefPoint);\r\n                        roundRange.shrinkByStep(range, step);\r\n\r\n                        // If the range is based on Data we might need to extend it to provide nice data margins.\r\n                        if (canExtendMin && range.min === roundRange.min && maxAllowedMargin >= 1)\r\n                            roundRange.min -= step;\r\n                        if (canExtendMax && range.max === roundRange.max && maxAllowedMargin >= 1)\r\n                            roundRange.max += step;\r\n\r\n                        // Count the intervals\r\n                        count = Double.ceilWithPrecision(roundRange.getSize() / step);\r\n\r\n                        if (count <= expectedCount || (dexp === 2 && i === stepsCount - 1) || (expectedCount === 1 && count === 2 && (step > range.getSize() || (range.min < 0 && range.max > 0 && step * 2 >= range.getSize())))) {\r\n                            interval = step;\r\n                            min = roundRange.min;\r\n                            max = roundRange.max;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    // Increase the scale power until the interval is found\r\n                    if (interval !== 0)\r\n                        break;\r\n                }\r\n            }\r\n\r\n            // Avoid extreme count cases (>1000 ticks)\r\n            if (count > expectedCount * 32 || count > NumericSequence.MAX_COUNT) {\r\n                count = Math.min(expectedCount * 32, NumericSequence.MAX_COUNT);\r\n                interval = (max - min) / count;\r\n            }\r\n\r\n            result.min = min;\r\n            result.max = max;\r\n            result.interval = interval;\r\n            result.intervalOffset = min - range.min;\r\n            result.maxAllowedMargin = maxAllowedMargin;\r\n            result.canExtendMin = canExtendMin;\r\n            result.canExtendMax = canExtendMax;\r\n\r\n            // Fill in the Sequence\r\n            let precision = Double.getPrecision(interval, 0);\r\n            result.precision = precision;\r\n\r\n            let sequence = [];\r\n\r\n            let x = Double.roundToPrecision(min, precision);\r\n            sequence.push(x);\r\n            for (let i = 0; i < count; i++) {\r\n                x = Double.roundToPrecision(x + interval, precision);\r\n                sequence.push(x);\r\n            }\r\n            \r\n            result.sequence = sequence;\r\n\r\n            result.trimMinMax(range.min, range.max);\r\n\r\n            return result;\r\n        }\r\n\r\n        /** \r\n         * Calculates the sequence of int numbers which are mapped to the multiples of the units grid. \r\n         * @min - The minimum of the range.\r\n         * @max - The maximum of the range.\r\n         * @maxCount - The max count of intervals.\r\n         * @steps - array of intervals.\r\n         */\r\n        public static calculateUnits(min: number, max: number, maxCount: number, steps: number[]): NumericSequence {\r\n            // Initialization actions\r\n            maxCount = Double.ensureInRange(maxCount, NumericSequence.MIN_COUNT, NumericSequence.MAX_COUNT);\r\n            if (min === max) {\r\n                max = min + 1;\r\n            }\r\n            let stepCount = 0;\r\n            let step = 0;\r\n\r\n            // Calculate step\r\n            for (let i = 0; i < steps.length; i++)\r\n            {\r\n                step = steps[i];\r\n                let maxStepCount = Double.ceilWithPrecision(max / step);\r\n                let minStepCount = Double.floorWithPrecision(min / step);\r\n                stepCount = maxStepCount - minStepCount;\r\n                    \r\n                if (stepCount <= maxCount) {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Calculate the offset\r\n            let offset = -min;\r\n            offset = offset % step;\r\n\r\n            // Create sequence\r\n            let result = new NumericSequence();\r\n            result.sequence = [];\r\n            for (let x = min + offset; ; x += step)\r\n            {\r\n                result.sequence.push(x);\r\n                if (x >= max)\r\n                    break;\r\n            }\r\n            result.interval = step;\r\n            result.intervalOffset = offset;\r\n            result.min = result.sequence[0];\r\n            result.max = result.sequence[result.sequence.length - 1];\r\n            return result;\r\n        }\r\n\r\n        public trimMinMax(min: number, max: number): void {        \r\n            let minMargin = (min - this.min) / this.interval;\r\n            let maxMargin = (this.max - max) / this.interval;\r\n            let marginPrecision = 0.001;\r\n\r\n            if (!this.canExtendMin || (minMargin > this.maxAllowedMargin && minMargin > marginPrecision)) {\r\n                this.min = min;\r\n            }\r\n\r\n            if (!this.canExtendMax || (maxMargin > this.maxAllowedMargin && maxMargin > marginPrecision)) {\r\n                this.max = max;\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    export class NumericSequenceRange {\r\n        private static DEFAULT_MAX: number = 10;\r\n        private static MIN_SUPPORTED_DOUBLE = -1E307;\r\n        private static MAX_SUPPORTED_DOUBLE = 1E307;\r\n\r\n        public min: number;\r\n        public max: number;\r\n        public includeZero: boolean;\r\n        public forcedSingleStop: number;\r\n        public hasDataRange: boolean;\r\n        public hasFixedMin: boolean;\r\n        public hasFixedMax: boolean;\r\n\r\n        private _ensureIncludeZero(): void { \r\n            if (this.includeZero) {\r\n                // fixed min and max has higher priority than includeZero\r\n                if (this.min > 0 && !this.hasFixedMin) {\r\n                    this.min = 0;\r\n                }\r\n                if (this.max < 0 && !this.hasFixedMax) {\r\n                    this.max = 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        private _ensureNotEmpty(): void { \r\n            if (this.min === this.max) {\r\n                if (!this.min) {\r\n                    this.min = 0;\r\n                    this.max = NumericSequenceRange.DEFAULT_MAX;\r\n                    this.hasFixedMin = true;\r\n                    this.hasFixedMax = true;\r\n                } else {\r\n                    // We are dealing with a single data value (includeZero is not set)\r\n                    // In order to fix the range we need to extend it in both directions by half of the interval.\r\n                    // Interval is calculated based on the number:\r\n                    // 1. Integers below 10,000 are extended by 0.5: so the [2006-2006] empty range is extended to [2005.5-2006.5] range and the ForsedSingleStop=2006\r\n                    // 2. Other numbers are extended by half of their power: [700,001-700,001] => [650,001-750,001] and the ForsedSingleStop=null as we want the intervals to be calculated to cover the range.\r\n                    let value = this.min;\r\n                    let exp = Double.log10(Math.abs(value));\r\n                    let step: number;\r\n                    if (exp >= 0 && exp < 4) {\r\n                        step = 0.5;\r\n                        this.forcedSingleStop = value;\r\n                    } else {\r\n                        step = Double.pow10(exp) / 2;\r\n                        this.forcedSingleStop = null;\r\n                    }\r\n                    this.min = value - step;\r\n                    this.max = value + step;\r\n                }\r\n            }\r\n        }\r\n\r\n        private _ensureDirection() { \r\n            if (this.min > this.max) { \r\n                let temp = this.min;\r\n                this.min = this.max;\r\n                this.max = temp;\r\n            }\r\n        }\r\n\r\n        public getSize(): number {\r\n            return this.max - this.min;\r\n        }\r\n\r\n        public shrinkByStep(range: NumericSequenceRange, step: number) {\r\n            debug.assertValue(range, \"range\");\r\n            debug.assert(step > 0, \"step\");\r\n\r\n            let oldCount = this.min / step;\r\n            let newCount = range.min / step;\r\n            let deltaCount = Math.floor(newCount - oldCount);\r\n            this.min += deltaCount * step;\r\n\r\n            oldCount = this.max / step;\r\n            newCount = range.max / step;\r\n            deltaCount = Math.ceil(newCount - oldCount);\r\n            this.max += deltaCount * step;\r\n        }\r\n\r\n        public static calculate(dataMin: number, dataMax: number, fixedMin?:number, fixedMax?:number, includeZero?: boolean): NumericSequenceRange { \r\n            debug.assert(dataMin <= dataMax, \"dataMin should be less or equal to dataMax.\");\r\n            debug.assert(!fixedMin || !fixedMax || fixedMin <= fixedMax, \"fixedMin should be less or equal to fixedMax.\");\r\n\r\n            let result = new NumericSequenceRange(); \r\n            result.includeZero = includeZero ? true : false;\r\n            result.hasDataRange = ValueUtil.hasValue(dataMin) && ValueUtil.hasValue(dataMax);\r\n            result.hasFixedMin = ValueUtil.hasValue(fixedMin);\r\n            result.hasFixedMax = ValueUtil.hasValue(fixedMax);\r\n\r\n            dataMin = Double.ensureInRange(dataMin, NumericSequenceRange.MIN_SUPPORTED_DOUBLE, NumericSequenceRange.MAX_SUPPORTED_DOUBLE);\r\n            dataMax = Double.ensureInRange(dataMax, NumericSequenceRange.MIN_SUPPORTED_DOUBLE, NumericSequenceRange.MAX_SUPPORTED_DOUBLE);\r\n\r\n            // Calculate the range using the min, max, dataRange\r\n            if (result.hasFixedMin && result.hasFixedMax) {\r\n                result.min = fixedMin;\r\n                result.max = fixedMax;\r\n            } else if (result.hasFixedMin) {\r\n                result.min = fixedMin;\r\n                result.max = dataMax > fixedMin ? dataMax : fixedMin;\r\n            } else if (result.hasFixedMax) {\r\n                result.min = dataMin < fixedMax ? dataMin : fixedMax;\r\n                result.max = fixedMax;\r\n            } else if (result.hasDataRange) {\r\n                result.min = dataMin;\r\n                result.max = dataMax;\r\n            } else {\r\n                result.min = 0;\r\n                result.max = 0;\r\n            }\r\n\r\n            result._ensureIncludeZero();\r\n            result._ensureNotEmpty();\r\n            result._ensureDirection();\r\n            \r\n            if (result.min === 0) {\r\n                result.hasFixedMin = true; // If the range starts from zero we should prevent extending the intervals into the negative range\r\n            } else if (result.max === 0) {\r\n                result.hasFixedMax = true; // If the range ends at zero we should prevent extending the intervals into the positive range\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public static calculateDataRange(dataMin: number, dataMax: number, includeZero?: boolean): NumericSequenceRange { \r\n            if (!ValueUtil.hasValue(dataMin) || !ValueUtil.hasValue(dataMax)) {\r\n                return NumericSequenceRange.calculateFixedRange(0, NumericSequenceRange.DEFAULT_MAX);\r\n            } else {\r\n                return NumericSequenceRange.calculate(dataMin, dataMax, null, null, includeZero);\r\n            }\r\n        }\r\n\r\n        public static calculateFixedRange(fixedMin: number, fixedMax: number, includeZero?: boolean): NumericSequenceRange { \r\n            debug.assertValue(fixedMin, \"fixedMin\");\r\n            debug.assertValue(fixedMax, \"fixedMax\");\r\n\r\n            let result = new NumericSequenceRange(); \r\n            result.hasDataRange = false;\r\n            result.includeZero = includeZero;\r\n            result.min = fixedMin;\r\n            result.max = fixedMax;\r\n            result._ensureIncludeZero();\r\n            result._ensureNotEmpty();\r\n            result._ensureDirection();\r\n            result.hasFixedMin = true;\r\n            result.hasFixedMax = true;\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /** Note: Exported for testability */\r\n    export module ValueUtil {\r\n        export function hasValue(value: any): boolean {\r\n            return value !== undefined && value !== null;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.visuals {\r\n\r\n    /**\r\n     * Formats the value using provided format expression\r\n     * @param value - value to be formatted and converted to string.\r\n     * @param format - format to be applied if the number shouldn't be abbreviated.\r\n     * If the number should be abbreviated this string is checked for special characters like $ or % if any\r\n     */\r\n    export interface ICustomValueFormatter {\r\n        (value: any, format?: string): string;\r\n    }\r\n\r\n    export interface ICustomValueColumnFormatter {\r\n        (value: any, column: DataViewMetadataColumn, formatStringProp: DataViewObjectPropertyIdentifier): string;\r\n    }\r\n\r\n    export interface ValueFormatterOptions {\r\n        /** The format string to use. */\r\n        format?: string;\r\n\r\n        /** The data value. */\r\n        value?: any;\r\n\r\n        /** The data value. */\r\n        value2?: any;\r\n\r\n        /** The number of ticks. */\r\n        tickCount?: any;\r\n\r\n        /** The display unit system to use */\r\n        displayUnitSystemType?: DisplayUnitSystemType;\r\n\r\n        /** True if we are formatting single values in isolation (e.g. card), as opposed to multiple values with a common base (e.g. chart axes) */\r\n        formatSingleValues?: boolean;\r\n\r\n        /** True if we want to trim off unnecessary zeroes after the decimal and remove a space before the % symbol */\r\n        allowFormatBeautification?: boolean;\r\n\r\n        /** Specifies the maximum number of decimal places to show*/\r\n        precision?: number;\r\n\r\n        /** Detect axis precision based on value */\r\n        detectAxisPrecision?: boolean;\r\n\r\n        /** Specifies the column type of the data value */\r\n        columnType?: ValueTypeDescriptor;\r\n    }\r\n\r\n    export interface IValueFormatter {\r\n        format(value: any): string;\r\n        displayUnit?: DisplayUnit;\r\n        options?: ValueFormatterOptions;\r\n    }\r\n\r\n    /** Captures all locale-specific options used by the valueFormatter. */\r\n    export interface ValueFormatterLocalizationOptions {\r\n        null: string;\r\n        true: string;\r\n        false: string;\r\n        NaN: string;\r\n        infinity: string;\r\n        negativeInfinity: string;\r\n\r\n        /** Returns a beautified form the given format string. */\r\n        beautify(format: string): string;\r\n\r\n        /** Returns an object describing the given exponent in the current language. */\r\n        describe(exponent: number): DisplayUnitSystemNames;\r\n        restatementComma: string;\r\n        restatementCompoundAnd: string;\r\n        restatementCompoundOr: string;\r\n    }\r\n\r\n    export module valueFormatter {\r\n        import StringExtensions = jsCommon.StringExtensions;\r\n        const BeautifiedFormat: { [x: string]: string } = {\r\n            '0.00 %;-0.00 %;0.00 %': 'Percentage',\r\n            '0.0 %;-0.0 %;0.0 %': 'Percentage1',\r\n        };\r\n\r\n        export const DefaultIntegerFormat = 'g';\r\n        export const DefaultNumericFormat = '#,0.00';\r\n        export const DefaultDateFormat = 'd';\r\n\r\n        const defaultLocalizedStrings = {\r\n            'NullValue': '(Blank)',\r\n            'BooleanTrue': 'True',\r\n            'BooleanFalse': 'False',\r\n            'NaNValue': 'NaN',\r\n            'InfinityValue': '+Infinity',\r\n            'NegativeInfinityValue': '-Infinity',\r\n            'RestatementComma': '{0}, {1}',\r\n            'RestatementCompoundAnd': '{0} and {1}',\r\n            'RestatementCompoundOr': '{0} or {1}',\r\n            'DisplayUnitSystem_EAuto_Title': 'Auto',\r\n            'DisplayUnitSystem_E0_Title': 'None',\r\n            'DisplayUnitSystem_E3_LabelFormat': '{0}K',\r\n            'DisplayUnitSystem_E3_Title': 'Thousands',\r\n            'DisplayUnitSystem_E6_LabelFormat': '{0}M',\r\n            'DisplayUnitSystem_E6_Title': 'Millions',\r\n            'DisplayUnitSystem_E9_LabelFormat': '{0}bn',\r\n            'DisplayUnitSystem_E9_Title': 'Billions',\r\n            'DisplayUnitSystem_E12_LabelFormat': '{0}T',\r\n            'DisplayUnitSystem_E12_Title': 'Trillions',\r\n            'Percentage': '#,0.##%',\r\n            'Percentage1': '#,0.#%',\r\n            'TableTotalLabel': 'Total',\r\n            'Tooltip_HighlightedValueDisplayName': 'Highlighted',\r\n            'Funnel_PercentOfFirst': 'Percent of first',\r\n            'Funnel_PercentOfPrevious': 'Percent of previous',\r\n            'Funnel_PercentOfFirst_Highlight': 'Percent of first (highlight)',\r\n            'Funnel_PercentOfPrevious_Highlight': 'Percent of previous (highlight)',\r\n            // Geotagging strings\r\n            'GeotaggingString_Continent': 'continent',\r\n            'GeotaggingString_Continents': 'continents',\r\n            'GeotaggingString_Country': 'country',\r\n            'GeotaggingString_Countries': 'countries',\r\n            'GeotaggingString_State': 'state',\r\n            'GeotaggingString_States': 'states',\r\n            'GeotaggingString_City': 'city',\r\n            'GeotaggingString_Cities': 'cities',\r\n            'GeotaggingString_Town': 'town',\r\n            'GeotaggingString_Towns': 'towns',\r\n            'GeotaggingString_Province': 'province',\r\n            'GeotaggingString_Provinces': 'provinces',\r\n            'GeotaggingString_County': 'county',\r\n            'GeotaggingString_Counties': 'counties',\r\n            'GeotaggingString_Village': 'village',\r\n            'GeotaggingString_Villages': 'villages',\r\n            'GeotaggingString_Post': 'post',\r\n            'GeotaggingString_Zip': 'zip',\r\n            'GeotaggingString_Code': 'code',\r\n            'GeotaggingString_Place': 'place',\r\n            'GeotaggingString_Places': 'places',\r\n            'GeotaggingString_Address': 'address',\r\n            'GeotaggingString_Addresses': 'addresses',\r\n            'GeotaggingString_Street': 'street',\r\n            'GeotaggingString_Streets': 'streets',\r\n            'GeotaggingString_Longitude': 'longitude',\r\n            'GeotaggingString_Longitude_Short': 'lon',\r\n            'GeotaggingString_Latitude': 'latitude',\r\n            'GeotaggingString_Latitude_Short': 'lat',\r\n            'GeotaggingString_PostalCode': 'postal code',\r\n            'GeotaggingString_PostalCodes': 'postal codes',\r\n            'GeotaggingString_ZipCode': 'zip code',\r\n            'GeotaggingString_ZipCodes': 'zip codes',\r\n            'GeotaggingString_Territory': 'territory',\r\n            'GeotaggingString_Territories': 'territories',\r\n        };\r\n\r\n        function beautify(format: string): string {\r\n            let key = BeautifiedFormat[format];\r\n            if (key)\r\n                return defaultLocalizedStrings[key] || format;\r\n            return format;\r\n        }\r\n\r\n        function describeUnit(exponent: number): DisplayUnitSystemNames {\r\n            let exponentLookup = (exponent === -1) ? 'Auto' : exponent.toString();\r\n\r\n            let title: string = defaultLocalizedStrings[\"DisplayUnitSystem_E\" + exponentLookup + \"_Title\"];\r\n            let format: string = (exponent <= 0) ? '{0}' : defaultLocalizedStrings[\"DisplayUnitSystem_E\" + exponentLookup + \"_LabelFormat\"];\r\n\r\n            if (title || format)\r\n                return { title: title, format: format };\r\n        }\r\n\r\n        export function getLocalizedString(stringId: string): string {\r\n            return defaultLocalizedStrings[stringId];\r\n        }\r\n\r\n        // NOTE: Define default locale options, but these can be overriden by setLocaleOptions.\r\n        let locale: ValueFormatterLocalizationOptions = {\r\n            null: defaultLocalizedStrings['NullValue'],\r\n            true: defaultLocalizedStrings['BooleanTrue'],\r\n            false: defaultLocalizedStrings['BooleanFalse'],\r\n            NaN: defaultLocalizedStrings['NaNValue'],\r\n            infinity: defaultLocalizedStrings['InfinityValue'],\r\n            negativeInfinity: defaultLocalizedStrings['NegativeInfinityValue'],\r\n            beautify: format => beautify(format),\r\n            describe: exponent => describeUnit(exponent),\r\n            restatementComma: defaultLocalizedStrings['RestatementComma'],\r\n            restatementCompoundAnd: defaultLocalizedStrings['RestatementCompoundAnd'],\r\n            restatementCompoundOr: defaultLocalizedStrings['RestatementCompoundOr'],\r\n        };\r\n\r\n        const MaxScaledDecimalPlaces = 2;\r\n        const MaxValueForDisplayUnitRounding = 1000;\r\n        const MinIntegerValueForDisplayUnits = 10000;\r\n        const MinPrecisionForDisplayUnits = 2;\r\n\r\n        const DateTimeMetadataColumn: DataViewMetadataColumn = {\r\n            displayName: '',\r\n            type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.DateTime),\r\n        };\r\n\r\n        export function getFormatMetadata(format: string): powerbi.NumberFormat.NumericFormatMetadata {\r\n            return powerbi.NumberFormat.getCustomFormatMetadata(format);\r\n        }\r\n\r\n        export function setLocaleOptions(options: ValueFormatterLocalizationOptions): void {\r\n            debug.assertValue(options, 'options');\r\n\r\n            locale = options;\r\n\r\n            DefaultDisplayUnitSystem.reset();\r\n            WholeUnitsDisplayUnitSystem.reset();\r\n        }\r\n\r\n        export function createDefaultFormatter(formatString: string, allowFormatBeautification: boolean = false): IValueFormatter {\r\n            let formatBeaut: string = allowFormatBeautification ? locale.beautify(formatString) : formatString;\r\n            return {\r\n                format: function (value: any): string {\r\n                    if (value == null)\r\n                        return locale.null;\r\n\r\n                    return formatCore(value, formatBeaut);\r\n                }\r\n            };\r\n        }\r\n\r\n        /** Creates an IValueFormatter to be used for a range of values. */\r\n        export function create(options: ValueFormatterOptions): IValueFormatter {\r\n            debug.assertValue(options, 'options');\r\n\r\n            let format = !!options.allowFormatBeautification ? locale.beautify(options.format) : options.format;\r\n\r\n            if (shouldUseNumericDisplayUnits(options)) {\r\n                let displayUnitSystem = createDisplayUnitSystem(options.displayUnitSystemType);\r\n\r\n                let singleValueFormattingMode = !!options.formatSingleValues;\r\n\r\n                displayUnitSystem.update(Math.max(Math.abs(options.value || 0), Math.abs(options.value2 || 0)));\r\n\r\n                let forcePrecision = options.precision != null;\r\n\r\n                let decimals: number;\r\n\r\n                if (forcePrecision)\r\n                    decimals = -options.precision;\r\n                else if (displayUnitSystem.displayUnit && displayUnitSystem.displayUnit.value > 1)\r\n                    decimals = -MaxScaledDecimalPlaces;\r\n\r\n                // Detect axis precision\r\n                if (options.detectAxisPrecision) {\r\n                    // Trailing zeroes\r\n                    forcePrecision = true;\r\n\r\n                    let axisValue = options.value;\r\n                    if (displayUnitSystem.displayUnit && displayUnitSystem.displayUnit.value > 0)\r\n                        axisValue = axisValue / displayUnitSystem.displayUnit.value;\r\n\r\n                    if (Double.isInteger(axisValue))\r\n                        decimals = 0;\r\n                    else\r\n                        decimals = Double.log10(axisValue);\r\n                }\r\n\r\n                return {\r\n                    format: function (value: any): string {\r\n                        let formattedValue: string = getStringFormat(value, true /*nullsAreBlank*/);\r\n                        if (!StringExtensions.isNullOrUndefinedOrWhiteSpaceString(formattedValue))\r\n                            return formattedValue;\r\n\r\n                        // Round to Double.DEFAULT_PRECISION\r\n                        if (value && !displayUnitSystem.isScalingUnit() && Math.abs(value) < MaxValueForDisplayUnitRounding && !forcePrecision)\r\n                            value = Double.roundToPrecision(value);\r\n\r\n                        return singleValueFormattingMode ?\r\n                            displayUnitSystem.formatSingleValue(value, format, decimals, forcePrecision) :\r\n                            displayUnitSystem.format(value, format, decimals, forcePrecision);\r\n                    },\r\n                    displayUnit: displayUnitSystem.displayUnit,\r\n                    options: options\r\n                };\r\n            }\r\n\r\n            if (shouldUseDateUnits(options.value, options.value2, options.tickCount)) {\r\n                let unit = DateTimeSequence.getIntervalUnit(options.value /* minDate */, options.value2 /* maxDate */, options.tickCount);\r\n\r\n                return {\r\n                    format: function (value: any): string {\r\n                        if (value == null)\r\n                            return locale.null;\r\n\r\n                        let formatString = formattingService.dateFormatString(unit);\r\n                        return formatCore(value, formatString);\r\n                    },\r\n                    options: options\r\n                };\r\n            }\r\n\r\n            return createDefaultFormatter(format);\r\n        }\r\n\r\n        export function format(value: any, format?: string, allowFormatBeautification?: boolean): string {\r\n            if (value == null)\r\n                return locale.null;\r\n\r\n            return formatCore(\r\n                value,\r\n                !!allowFormatBeautification ? locale.beautify(format) : format);\r\n        }\r\n\r\n        function getValueFormat(value: any, columnType: ValueTypeDescriptor): string {\r\n            // If column type not defined or is not datetime\r\n            // ...and the value is of time datetime,\r\n            // then use the default date format string\r\n            if ((!columnType || !columnType.dateTime) && value instanceof Date)\r\n                return getFormatString(DateTimeMetadataColumn, null, false);\r\n        }\r\n\r\n        export function formatValueColumn(value: any, column: DataViewMetadataColumn, formatStringProp: DataViewObjectPropertyIdentifier): string {\r\n            let valueFormat = getValueFormat(value, column.type);\r\n            if (valueFormat)\r\n                return formatCore(value, valueFormat);\r\n            else\r\n                return formatCore(value, getFormatString(column, formatStringProp));\r\n        }\r\n\r\n        function createDisplayUnitSystem(displayUnitSystemType?: DisplayUnitSystemType): DisplayUnitSystem {\r\n            if (displayUnitSystemType == null)\r\n                return new DefaultDisplayUnitSystem(locale.describe);\r\n\r\n            switch (displayUnitSystemType) {\r\n                case DisplayUnitSystemType.Default:\r\n                    return new DefaultDisplayUnitSystem(locale.describe);\r\n                case DisplayUnitSystemType.WholeUnits:\r\n                    return new WholeUnitsDisplayUnitSystem(locale.describe);\r\n                case DisplayUnitSystemType.Verbose:\r\n                    return new NoDisplayUnitSystem();\r\n                case DisplayUnitSystemType.DataLabels:\r\n                    return new DataLabelsDisplayUnitSystem(locale.describe);\r\n                default:\r\n                    debug.assertFail('Unknown display unit system type');\r\n                    return new DefaultDisplayUnitSystem(locale.describe);\r\n            }\r\n        }\r\n\r\n        function shouldUseNumericDisplayUnits(options: ValueFormatterOptions): boolean {\r\n            let value = options.value;\r\n            let value2 = options.value2;\r\n            let format = options.format;\r\n            // For singleValue visuals like card, gauge we don't want to roundoff data to the nearest thousands so format the whole number / integers below 10K to not use display units\r\n            if (options.formatSingleValues && format) {\r\n\r\n                if (Math.abs(value) < MinIntegerValueForDisplayUnits) {\r\n\r\n                    let isCustomFormat = !powerbi.NumberFormat.isStandardFormat(format);\r\n\r\n                    if (isCustomFormat) {\r\n                        let precision = powerbi.NumberFormat.getCustomFormatMetadata(format, true /*calculatePrecision*/).precision;\r\n\r\n                        if (precision < MinPrecisionForDisplayUnits)\r\n                            return false;\r\n                    }\r\n                    else if (Double.isInteger(value))\r\n                        return false;\r\n                }\r\n            }\r\n\r\n            if ((typeof value === 'number') || (typeof value2 === 'number')) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        function shouldUseDateUnits(value: any, value2?: any, tickCount?: number): boolean {\r\n            // must check both value and value2 because we'll need to get an interval for date units\r\n            return (value instanceof Date) && (value2 instanceof Date) && (tickCount !== undefined && tickCount !== null);\r\n        }\r\n\r\n        /*\r\n         * Get the column format. Order of precendence is:\r\n         *  1. Column format\r\n         *  2. Default PowerView policy for column type\r\n         */\r\n        export function getFormatString(column: DataViewMetadataColumn, formatStringProperty: DataViewObjectPropertyIdentifier, suppressTypeFallback?: boolean): string {\r\n            if (column) {\r\n                if (formatStringProperty) {\r\n                    let propertyValue = DataViewObjects.getValue<string>(column.objects, formatStringProperty);\r\n                    if (propertyValue)\r\n                        return propertyValue;\r\n                }\r\n\r\n                if (!suppressTypeFallback) {\r\n                    let columnType = column.type;\r\n                    if (columnType) {\r\n                        if (columnType.dateTime)\r\n                            return DefaultDateFormat;\r\n                        if (columnType.integer)\r\n                            return DefaultIntegerFormat;\r\n                        if (columnType.numeric)\r\n                            return DefaultNumericFormat;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function formatListCompound(strings: string[], conjunction: string): string {\r\n            let result: string;\r\n\r\n            if (!strings) {\r\n                return null;\r\n            }\r\n\r\n            let length = strings.length;\r\n            if (length > 0) {\r\n                result = strings[0];\r\n                let lastIndex = length - 1;\r\n                for (let i = 1, len = lastIndex; i < len; i++) {\r\n                    let value = strings[i];\r\n                    result = StringExtensions.format(locale.restatementComma, result, value);\r\n                }\r\n\r\n                if (length > 1) {\r\n                    let value = strings[lastIndex];\r\n                    result = StringExtensions.format(conjunction, result, value);\r\n                }\r\n            }\r\n            else {\r\n                result = null;\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        /** The returned string will look like 'A, B, ..., and C'  */\r\n        export function formatListAnd(strings: string[]): string {\r\n            return formatListCompound(strings, locale.restatementCompoundAnd);\r\n        }\r\n\r\n        /** The returned string will look like 'A, B, ..., or C' */\r\n        export function formatListOr(strings: string[]): string {\r\n            return formatListCompound(strings, locale.restatementCompoundOr);\r\n        }\r\n\r\n        function formatCore(value: any, format: string): string {\r\n            let formattedValue = getStringFormat(value, false /*nullsAreBlank*/);\r\n\r\n            if (!StringExtensions.isNullOrUndefinedOrWhiteSpaceString(formattedValue))\r\n                return formattedValue;\r\n\r\n            return formattingService.formatValue(value, format);\r\n        }\r\n\r\n        function getStringFormat(value: any, nullsAreBlank: boolean): string {\r\n            if (value == null && nullsAreBlank)\r\n                return locale.null;\r\n\r\n            if (value === true)\r\n                return locale.true;\r\n\r\n            if (value === false)\r\n                return locale.false;\r\n\r\n            if (typeof value === 'number' && isNaN(value))\r\n                return locale.NaN;\r\n\r\n            if (value === Number.NEGATIVE_INFINITY)\r\n                return locale.negativeInfinity;\r\n\r\n            if (value === Number.POSITIVE_INFINITY)\r\n                return locale.infinity;\r\n\r\n            return '';\r\n        }\r\n\r\n        export function getDisplayUnits(displayUnitSystemType: DisplayUnitSystemType): DisplayUnit[] {\r\n            let displayUnitSystem = createDisplayUnitSystem(displayUnitSystemType);\r\n            return displayUnitSystem.units;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n\r\n    export interface IColorAllocator {\r\n        /** Computes the color corresponding to the provided value. */\r\n        color(value: PrimitiveValue): string;\r\n    }\r\n\r\n    export interface IColorAllocatorFactory {\r\n        /** Creates a gradient that that transitions between two colors. */\r\n        linearGradient2(options: LinearGradient2): IColorAllocator;\r\n\r\n        /** Creates a gradient that that transitions between three colors. */\r\n        linearGradient3(options: LinearGradient3, splitScales: boolean): IColorAllocator;\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export interface CompiledDataViewRoleBindMappingWithReduction extends CompiledDataViewRoleBindMapping, HasReductionAlgorithm {\r\n    }\r\n\r\n    export interface CompiledDataViewRoleForMappingWithReduction extends CompiledDataViewRoleForMapping, HasReductionAlgorithm {\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export module DataRoleHelper {\r\n        export function getMeasureIndexOfRole(grouped: DataViewValueColumnGroup[], roleName: string): number {\r\n            if (!_.isEmpty(grouped)) {\r\n                let firstGroup = grouped[0];\r\n                if (firstGroup.values && firstGroup.values.length > 0) {\r\n                    for (let i = 0, len = firstGroup.values.length; i < len; ++i) {\r\n                        let value = firstGroup.values[i];\r\n                        if (value && value.source) {\r\n                            if (hasRole(value.source, roleName))\r\n                                return i;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        export function getCategoryIndexOfRole(categories: DataViewCategoryColumn[], roleName: string): number {\r\n            if (!_.isEmpty(categories)) {\r\n                for (let i = 0, ilen = categories.length; i < ilen; i++) {\r\n                    if (hasRole(categories[i].source, roleName))\r\n                        return i;\r\n                }\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        export function hasRole(column: DataViewMetadataColumn, name: string): boolean {\r\n            let roles = column.roles;\r\n            return roles && roles[name];\r\n        }\r\n\r\n        export function hasRoleInDataView(dataView: DataView, name: string): boolean {\r\n            return dataView != null\r\n                && dataView.metadata != null\r\n                && dataView.metadata.columns\r\n                && _.any(dataView.metadata.columns, c => c.roles && c.roles[name] !== undefined);\r\n        }\r\n        \r\n        export function hasRoleInValueColumn(valueColumn: DataViewValueColumn, name: string): boolean {\r\n            return valueColumn && valueColumn.source && valueColumn.source.roles && (valueColumn.source.roles[name] === true);\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import DataRoleHelper = powerbi.data.DataRoleHelper;\r\n\r\n    export function createIDataViewCategoricalReader(dataView: DataView): IDataViewCategoricalReader {\r\n        return new DataViewCategoricalReader(dataView);\r\n    }\r\n\r\n    export interface IDataViewCategoricalReader {\r\n        // Category functions\r\n        hasCategories(): boolean;\r\n        getCategoryCount(): number;\r\n        getCategoryValues(roleName: string): any;\r\n        getCategoryValue(roleName: string, categoryIndex: number): any;\r\n        getCategoryColumn(roleName: string): DataViewCategoryColumn;\r\n        getCategoryMetadataColumn(roleName: string): DataViewMetadataColumn;\r\n        getCategoryColumnIdentityFields(roleName: string): powerbi.data.ISQExpr[];\r\n        getCategoryDisplayName(roleName: string): string;\r\n        hasCompositeCategories(): boolean;\r\n        hasCategoryWithRole(roleName: string): boolean;\r\n        getCategoryObjects(roleName: string, categoryIndex: number): DataViewObjects;\r\n        // Value functions\r\n        hasValues(roleName: string): boolean;\r\n        /**\r\n         * Obtains the value for the given role name, category index, and series index.\r\n         *\r\n         * Note: in cases where have multiple values in a role where the multiple values\r\n         * are not being used to create a static series, the first is obtained.\r\n         */\r\n        getValue(roleName: string, categoryIndex: number, seriesIndex?: number): any;\r\n        /**\r\n         * Obtains all the values for the given role name, category index, and series index, drawing\r\n         * from each of the value columns at that intersection.  Used when you have multiple\r\n         * values in a role that are not conceptually a static series.\r\n         */\r\n        getAllValuesForRole(roleName: string, categoryIndex: number, seriesIndex?: number): any[];\r\n        /**\r\n         * Obtains the first non-null value for the given role name and category index.\r\n         * It should mainly be used for values that are expected to be the same across\r\n         * series, but avoids false nulls when the data is sparse.\r\n         */\r\n        getFirstNonNullValueForCategory(roleName: string, categoryIndex: number): any;\r\n        getMeasureQueryName(roleName: string): string;\r\n        getValueColumn(roleName: string, seriesIndex?: number): DataViewValueColumn;\r\n        getValueMetadataColumn(roleName: string, seriesIndex?: number): DataViewMetadataColumn;\r\n        getValueDisplayName(roleName: string, seriesIndex?: number): string;\r\n        // Series Methods\r\n        hasDynamicSeries(): boolean;\r\n        getSeriesCount(): number;\r\n        getSeriesObjects(seriesIndex: number): DataViewObjects;\r\n        getSeriesValueColumns(): DataViewValueColumns;\r\n        getSeriesValueColumnGroup(seriesIndex: number): DataViewValueColumnGroup;\r\n        getSeriesMetadataColumn(): DataViewMetadataColumn;\r\n        getSeriesColumnIdentityFields(): powerbi.data.ISQExpr[];\r\n        getSeriesName(seriesIndex: number): PrimitiveValue;\r\n        getSeriesDisplayName(): string;\r\n    }\r\n\r\n    /**\r\n     * A mapping used to map indeces within a specific roleName to an index into the values\r\n     * of a grouped.  This is used so that you can iterate over values within a role without\r\n     * expensive filtering or extra traversal.\r\n     */ \r\n    interface RoleIndexMapping {\r\n        [roleName: string]: number[];\r\n    }\r\n\r\n    class DataViewCategoricalReader implements IDataViewCategoricalReader {\r\n        private dataView: DataView;\r\n        private categories: DataViewCategoryColumn[];\r\n        private grouped: DataViewValueColumnGroup[];\r\n        private dataHasDynamicSeries: boolean;\r\n        private valueRoleIndexMapping: RoleIndexMapping;\r\n        \r\n        // Validation variables\r\n        private hasValidCategories: boolean;\r\n        private hasAnyValidValues: boolean;\r\n\r\n        constructor(dataView: DataView) {\r\n            debug.assertValue(dataView, 'dataView');\r\n            this.dataView = dataView;\r\n            // Validate categories\r\n            let categorical: DataViewCategorical;\r\n            if (dataView)\r\n                categorical = dataView.categorical;\r\n            let categories: DataViewCategoryColumn[];\r\n            if (categorical)\r\n                categories = this.categories = categorical.categories;\r\n            this.hasValidCategories = !_.isEmpty(categories);\r\n\r\n            // Validate values\r\n            let values: DataViewValueColumns;\r\n            if (categorical)\r\n                values = categorical.values;\r\n            // We need to access grouped as long as values is non-null; if it's an empty array (meaning there is a category + series), we'll use grouped for non-value stuff\r\n            // TODO: think a bit more about how to represent this internally; Maybe split this up between hasGroup and hasValidValues or something\r\n            this.hasAnyValidValues = false;\r\n            if (values != null) {\r\n                let grouped = dataView.categorical.values.grouped();\r\n\r\n                if (grouped.length > 0) {\r\n                    this.hasAnyValidValues = true;\r\n                    this.grouped = grouped;\r\n\r\n                    // Iterate through the first group's values to populate the valueRoleIndexMapping\r\n                    let valueRoleIndexMapping: RoleIndexMapping = {};\r\n                    let firstGroupValues = grouped[0].values;\r\n                    for (let valueIndex = 0, valueCount = firstGroupValues.length; valueIndex < valueCount; valueIndex++) {\r\n                        let valueRoles = firstGroupValues[valueIndex].source.roles;\r\n                        for (let role in valueRoles) {\r\n                            if (valueRoles[role]) {\r\n                                if (!valueRoleIndexMapping[role])\r\n                                    valueRoleIndexMapping[role] = [];\r\n                                valueRoleIndexMapping[role].push(valueIndex);\r\n                            }\r\n                        }\r\n                    }\r\n                    this.valueRoleIndexMapping = valueRoleIndexMapping;\r\n                }\r\n            }\r\n\r\n            if (this.hasAnyValidValues)\r\n                this.dataHasDynamicSeries = !!this.dataView.categorical.values.source;\r\n        }\r\n\r\n        // Category methods\r\n        \r\n        public hasCategories(): boolean {\r\n            return this.hasValidCategories;\r\n        }\r\n\r\n        public getCategoryCount(): number {\r\n            if (this.hasValidCategories)\r\n                return this.categories[0].values.length;\r\n            else\r\n                return 0;\r\n        }\r\n\r\n        public getCategoryValues(roleName: string): any {\r\n            if (this.hasValidCategories) {\r\n                let categories = this.getCategoryFromRole(roleName);\r\n                return categories ? categories.values : undefined;\r\n            }\r\n        }\r\n\r\n        public getCategoryValue(roleName: string, categoryIndex: number): any {\r\n            if (this.hasValidCategories) {\r\n                let categories = this.getCategoryFromRole(roleName);\r\n                return categories ? categories.values[categoryIndex] : undefined;\r\n            }\r\n        }\r\n\r\n        public getCategoryColumn(roleName: string): DataViewCategoryColumn {\r\n            if (this.hasValidCategories)\r\n                return this.getCategoryFromRole(roleName);\r\n        }\r\n\r\n        public getCategoryMetadataColumn(roleName: string): DataViewMetadataColumn {\r\n            if (this.hasValidCategories) {\r\n                let categories = this.getCategoryFromRole(roleName);\r\n                return categories ? categories.source : undefined;\r\n            }\r\n        }\r\n\r\n        public getCategoryColumnIdentityFields(roleName: string): powerbi.data.ISQExpr[] {\r\n            if (this.hasValidCategories) {\r\n                let categories = this.getCategoryFromRole(roleName);\r\n                return categories ? categories.identityFields : undefined;\r\n            }\r\n        }\r\n\r\n        public getCategoryDisplayName(roleName: string): string {\r\n            if (this.hasValidCategories) {\r\n                let targetColumn = this.getCategoryColumn(roleName);\r\n                if (targetColumn && targetColumn.source) {\r\n                    return targetColumn.source.displayName;\r\n                }\r\n            }\r\n        }\r\n\r\n        public hasCompositeCategories(): boolean {\r\n            if (this.hasValidCategories)\r\n                return this.categories.length > 1;\r\n        }\r\n\r\n        public hasCategoryWithRole(roleName: string): boolean {\r\n            return DataRoleHelper.getCategoryIndexOfRole(this.categories, roleName) !== -1;\r\n        }\r\n\r\n        public getCategoryObjects(roleName: string, categoryIndex: number): DataViewObjects {\r\n            if (this.hasValidCategories) {\r\n                let category = this.getCategoryFromRole(roleName);\r\n                if (category && category.objects) {\r\n                    return category.objects[categoryIndex];\r\n                }\r\n            }\r\n        }\r\n\r\n        private getCategoryFromRole(roleName: string): DataViewCategoryColumn {\r\n            let categories = this.categories;\r\n            return categories[DataRoleHelper.getCategoryIndexOfRole(categories, roleName)];\r\n        }\r\n\r\n        // Value and measure methods\r\n\r\n        public hasValues(roleName: string): boolean {\r\n            return this.valueRoleIndexMapping && !_.isEmpty(this.valueRoleIndexMapping[roleName]);\r\n        }\r\n\r\n        public getValue(roleName: string, categoryIndex: number, seriesIndex: number = 0): any {\r\n            if (this.hasValues(roleName)) {\r\n                if (this.dataHasDynamicSeries) {\r\n                    // For dynamic series, we only ever obtain the first value column from a role\r\n                    return this.getValueInternal(roleName, categoryIndex, seriesIndex, 0);\r\n                }\r\n                else {\r\n                    // For static series or single series, we obtain value columns from the first series\r\n                    //    and use the seriesIndex to index into the value columns within the role\r\n                    return this.getValueInternal(roleName, categoryIndex, 0, seriesIndex);\r\n                }\r\n            }\r\n        }\r\n\r\n        public getAllValuesForRole(roleName: string, categoryIndex: number, seriesIndex: number = 0): any[] {\r\n            if (this.hasValues(roleName)) {\r\n                let valuesInRole = [];\r\n                for (let roleValueIndex, roleValueCount = this.valueRoleIndexMapping[roleName].length; roleValueIndex < roleValueCount; roleValueIndex++) {\r\n                    valuesInRole.push(this.getValueInternal(roleName, categoryIndex, seriesIndex, roleValueIndex));\r\n                }\r\n                return valuesInRole;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Obtains the value from grouped.\r\n         *\r\n         * Grouped:             [0] [1] [2] [3] (seriesIndex)\r\n         *                         /   \\\r\n         * .values:       [T0] [V0] [V1] [T1] [V2] (valueColumnIndex)\r\n         *                    /    \\ \\  \\           \r\n         * v.values:  [0, 1, 2, 3, 4] [5, 6, 7, 8, 9] (categoryIndex)\r\n         * \r\n         *--------------------------------|\r\n         *                      |Category |\r\n         * Series|Value Columns |A B C D E|\r\n         *--------------------------------|\r\n         *      0|col0 (tooltip)|         |\r\n         *       |col1 (value)  |         |\r\n         *       |col2 (value)  |         |\r\n         *       |col3 (tooltip)|         |\r\n         *       |col4 (value)  |         |\r\n         *--------------------------------|\r\n         *      1|col0 (tooltip)|         |\r\n         *       |col1 (value)  |0 1 2 3 4|\r\n         *       |col2 (value)  |5 6 7 8 9|\r\n         *       |col3 (tooltip)|         |\r\n         *       |col4 (value)  |         |\r\n         *--------------------------------|\r\n         *      2|col0 (tooltip)|...      |\r\n         * \r\n         * valueColumnIndexInRole is for indexing into the values for a single role\r\n         * valueColumnIndex is for indexing into the entire value array including\r\n         * all roles\r\n         * \r\n         * The valueRoleIndexMapping converts roleValueIndex and role (value role\r\n         * with an index of 1) into groupedValueIndex (2)\r\n         *\r\n         * Example: getValueInternal(V, 3, 1, 1) returns 8: The second group,\r\n         * the second value column with role \"value\" (which is converted to a\r\n         * groupedValueIndex of 2) and the fourth value within that value column.\r\n         */\r\n        private getValueInternal(roleName: string, categoryIndex: number, groupIndex: number, valueColumnIndexInRole: number): any {\r\n            if (this.hasValues(roleName)) {\r\n                let valueColumnIndex = this.valueRoleIndexMapping[roleName][valueColumnIndexInRole];\r\n                return this.grouped[groupIndex].values[valueColumnIndex].values[categoryIndex];\r\n            }\r\n        }\r\n\r\n        public getFirstNonNullValueForCategory(roleName: string, categoryIndex: number): any {\r\n            if (this.hasValues(roleName)) {\r\n                if (!this.dataHasDynamicSeries) {\r\n                    debug.assert(this.grouped.length === 1, \"getFirstNonNullValueForCategory shouldn't be called if you have a static series\");\r\n                    return this.getValue(roleName, categoryIndex);\r\n                }\r\n                for (let seriesIndex = 0, seriesCount = this.grouped.length; seriesIndex < seriesCount; seriesIndex++) {\r\n                    let value = this.getValue(roleName, categoryIndex, seriesIndex);\r\n                    if (value != null) {\r\n                        return value;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        public getMeasureQueryName(roleName: string): string {\r\n            if (this.hasValues(roleName))\r\n                return this.grouped[0].values[this.valueRoleIndexMapping[roleName][0]].source.queryName;\r\n        }\r\n\r\n        public getValueColumn(roleName: string, seriesIndex: number = 0): DataViewValueColumn {\r\n            if (this.hasValues(roleName))\r\n                return this.grouped[seriesIndex].values[this.valueRoleIndexMapping[roleName][0]];\r\n        }\r\n\r\n        public getValueMetadataColumn(roleName: string, seriesIndex: number = 0): DataViewMetadataColumn {\r\n            if (this.hasValues(roleName))\r\n                return this.grouped[seriesIndex].values[this.valueRoleIndexMapping[roleName][0]].source;\r\n        }\r\n\r\n        public getValueDisplayName(roleName: string, seriesIndex?: number): string {\r\n            if (this.hasValues(roleName)) {\r\n                let targetColumn = this.getValueColumn(roleName, seriesIndex);\r\n                if (targetColumn && targetColumn.source) {\r\n                    return targetColumn.source.displayName;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Series methods\r\n\r\n        public hasDynamicSeries(): boolean {\r\n            return this.dataHasDynamicSeries;\r\n        }\r\n\r\n        public getSeriesCount(): number {\r\n            if (this.hasAnyValidValues)\r\n                return this.grouped.length;\r\n        }\r\n\r\n        public getSeriesObjects(seriesIndex: number): DataViewObjects {\r\n            if (this.hasAnyValidValues)\r\n                return this.grouped[seriesIndex].objects;\r\n        }\r\n\r\n        public getSeriesValueColumns(): DataViewValueColumns {\r\n            if (this.hasAnyValidValues)\r\n                return this.dataView.categorical.values;\r\n        }\r\n\r\n        public getSeriesValueColumnGroup(seriesIndex: number): DataViewValueColumnGroup {\r\n            if (this.hasAnyValidValues)\r\n                return this.grouped[seriesIndex];\r\n        }\r\n\r\n        public getSeriesMetadataColumn(): DataViewMetadataColumn {\r\n            if (this.hasAnyValidValues)\r\n                return this.dataView.categorical.values.source;\r\n        }\r\n\r\n        public getSeriesColumnIdentityFields(): powerbi.data.ISQExpr[] {\r\n            if (this.hasAnyValidValues)\r\n                return this.dataView.categorical.values.identityFields;\r\n        }\r\n\r\n        public getSeriesName(seriesIndex: number): PrimitiveValue {\r\n            if (this.hasAnyValidValues)\r\n                return this.grouped[seriesIndex].name;\r\n        }\r\n\r\n        public getSeriesDisplayName(): string {\r\n            if (this.hasAnyValidValues && this.dataHasDynamicSeries)\r\n                return this.dataView.categorical.values.source.displayName;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import inherit = Prototype.inherit;\r\n    import inheritSingle = Prototype.inheritSingle;\r\n    import RoleKindByQueryRef = DataViewAnalysis.RoleKindByQueryRef;\r\n    import valueFormatter = powerbi.visuals.valueFormatter;\r\n\r\n    export module DataViewConcatenateCategoricalColumns {\r\n\r\n        /* Represents a collection of DataViewCategoryColumn that are tied to the same role. */\r\n        interface CategoryColumnsByRole {\r\n            /* The name of the role shared by all the objects in the categories property. */\r\n            roleName: string;\r\n\r\n            /**\r\n             * The list of columns that are tied to roleName, in the same order as they appear\r\n             * in the categories property of their owner DataViewCategorical object.\r\n             */\r\n            categories: DataViewCategoryColumn[];\r\n        }\r\n\r\n        export function detectAndApply(\r\n            dataView: DataView,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            roleMappings: DataViewMapping[],\r\n            projectionOrdering: DataViewProjectionOrdering,\r\n            selects: DataViewSelectTransform[],\r\n            projectionActiveItems: DataViewProjectionActiveItems): DataView {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertAnyValue(roleMappings, 'roleMappings');\r\n            debug.assertAnyValue(projectionOrdering, 'projectionOrdering');\r\n\r\n            let result = dataView;\r\n            let dataViewCategorical: DataViewCategorical = dataView.categorical;\r\n\r\n            if (dataViewCategorical) {\r\n                let concatenationSource: CategoryColumnsByRole = detectCategoricalRoleForHierarchicalGroup(dataViewCategorical, dataView.metadata, roleMappings, selects, projectionActiveItems);\r\n\r\n                if (concatenationSource) {\r\n                    // Consider: Perhaps the re-ordering of categorical columns should happen in the function transformSelects(...) of dataViewTransform?\r\n                    let columnsSortedByProjectionOrdering = sortColumnsByProjectionOrdering(projectionOrdering, concatenationSource.roleName, concatenationSource.categories);\r\n                    if (columnsSortedByProjectionOrdering.length >= 2) {\r\n                        let activeItemsToIgnoreInConcatenation =\r\n                            _.chain(projectionActiveItems[concatenationSource.roleName])\r\n                                .filter((activeItemInfo: DataViewProjectionActiveItemInfo) => activeItemInfo.suppressConcat)\r\n                                .map((activeItemInfo: DataViewProjectionActiveItemInfo) => activeItemInfo.queryRef)\r\n                                .value();\r\n\r\n                        result = applyConcatenation(dataView, objectDescriptors, concatenationSource.roleName, columnsSortedByProjectionOrdering, activeItemsToIgnoreInConcatenation);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        /** For applying concatenation to the DataViewCategorical that is the data for one of the frames in a play chart. */\r\n        export function applyToPlayChartCategorical(\r\n            metadata: DataViewMetadata,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            categoryRoleName: string,\r\n            categorical: DataViewCategorical): DataView {\r\n            debug.assertValue(metadata, 'metadata');\r\n            debug.assertAnyValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(categorical, 'categorical');\r\n\r\n            let result: DataView;\r\n            if (!_.isEmpty(categorical.categories) && categorical.categories.length >= 2) {\r\n                // In PlayChart, the code converts the Visual DataView with a matrix into multiple Visual DataViews, each with a categorical.\r\n                // metadata and metadata.columns could already be inherited objects as they come from the Visual DataView with a matrix.\r\n                // To guarantee that this method does not have any side effect on prototypeMetadata (which might already be an inherited obj),\r\n                // use inherit() rather than inheritSingle() here.\r\n                let transformingColumns = inherit(metadata.columns);\r\n                let transformingMetadata = inherit(metadata, m => { m.columns = transformingColumns; });\r\n\r\n                let transformingDataView = { metadata: transformingMetadata, categorical: categorical };\r\n                result = applyConcatenation(transformingDataView, objectDescriptors, categoryRoleName, categorical.categories, []);\r\n            }\r\n            else {\r\n                result = { metadata: metadata, categorical: categorical };\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * Returns the role and its assocated category columns (from dataViewCategorical.categories)\r\n         * that should be concatenated for the case of hierarchical group.\r\n         *\r\n         * Note: In the future if we support sibling hierarchical groups in categorical,\r\n         * change the return type to CategoryColumnsByRole[] and update detection logic.\r\n         */\r\n        function detectCategoricalRoleForHierarchicalGroup(dataViewCategorical: DataViewCategorical, metadata: DataViewMetadata, dataViewMappings: DataViewMapping[], selects: DataViewSelectTransform[], projectionActiveItems: DataViewProjectionActiveItems): CategoryColumnsByRole {\r\n            debug.assertValue(dataViewCategorical, 'dataViewCategorical');\r\n            debug.assertAnyValue(dataViewMappings, 'dataViewMappings');\r\n\r\n            let result: CategoryColumnsByRole;\r\n\r\n            // For now, just handle the case where roleMappings.length === 1.\r\n            // In the future, if there is more than 1, we might want to proceed if, \r\n            // for example, all role mappings map category to the same role name and they all have { max: 1 } conditions.\r\n            let roleKinds: RoleKindByQueryRef = DataViewSelectTransform.createRoleKindFromMetadata(selects, metadata);\r\n            let projections = DataViewSelectTransform.projectionsFromSelects(selects, projectionActiveItems);\r\n            let roleMappings = DataViewAnalysis.chooseDataViewMappings(projections, dataViewMappings, roleKinds).supportedMappings;\r\n\r\n            let roleMappingForCategorical: DataViewMapping = (roleMappings && roleMappings.length === 1 && !!roleMappings[0].categorical) ? roleMappings[0] : undefined;\r\n            if (roleMappingForCategorical) {\r\n                let roleNamesForCategory: string[] = getAllRolesInCategories(roleMappingForCategorical.categorical);\r\n\r\n                // With \"list\" in role mapping, is it possible to have multiple role names for category.\r\n                // For now, proceed to concatenate category columns only when categories are bound to 1 Role.\r\n                // We can change this if we want to support independent (sibling) group hierarchies in categorical.\r\n                if (roleNamesForCategory && roleNamesForCategory.length === 1) {\r\n                    let targetRoleName = roleNamesForCategory[0];\r\n\r\n                    let isVisualExpectingMaxOneCategoryColumn: boolean =\r\n                        !_.isEmpty(roleMappingForCategorical.conditions) &&\r\n                        _.every(roleMappingForCategorical.conditions, condition => condition[targetRoleName] && condition[targetRoleName].max === 1);\r\n\r\n                    if (isVisualExpectingMaxOneCategoryColumn) {\r\n                        let categoriesForTargetRole: DataViewCategoryColumn[] = _.filter(\r\n                            dataViewCategorical.categories,\r\n                            (categoryColumn: DataViewCategoryColumn) => categoryColumn.source.roles && !!categoryColumn.source.roles[targetRoleName]);\r\n\r\n                        // At least for now, we expect all category columns for the same role to have the same number of value entries.\r\n                        // If that's not the case, we won't run the concatenate logic for that role at all...\r\n                        let areValuesCountsEqual: boolean = _.every(\r\n                            categoriesForTargetRole,\r\n                            (categoryColumn: DataViewCategoryColumn) => categoryColumn.values.length === categoriesForTargetRole[0].values.length);\r\n\r\n                        // Also, there is no need to concatenate columns unless there is actually more than one column\r\n                        if (areValuesCountsEqual &&\r\n                            categoriesForTargetRole.length >= 2) {\r\n                            result = {\r\n                                roleName: targetRoleName,\r\n                                categories: categoriesForTargetRole\r\n                            };\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n        \r\n        /**\r\n         * Returns the array of role names that are mapped to categorical categories.\r\n         * Returns an empty array if none exists.\r\n         */\r\n        function getAllRolesInCategories(categoricalRoleMapping: DataViewCategoricalMapping): string[] {\r\n            debug.assertValue(categoricalRoleMapping, 'categoricalRoleMapping');\r\n\r\n            let roleNames: string[] = [];\r\n            DataViewMapping.visitCategoricalCategories(\r\n                categoricalRoleMapping.categories,\r\n                {\r\n                    visitRole: (roleName: string) => {\r\n                        roleNames.push(roleName);\r\n                    }\r\n                });\r\n\r\n            return roleNames;\r\n        }\r\n\r\n        function applyConcatenation(dataView: DataView, objectDescriptors: DataViewObjectDescriptors, roleName: string, columnsSortedByProjectionOrdering: DataViewCategoryColumn[], queryRefsToIgnore: string[]): DataView {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertAnyValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(roleName, 'roleName');\r\n            debug.assert(columnsSortedByProjectionOrdering && columnsSortedByProjectionOrdering.length >= 2, 'columnsSortedByProjectionOrdering && columnsSortedByProjectionOrdering.length >= 2');\r\n\r\n            let formatStringPropId: DataViewObjectPropertyIdentifier = DataViewObjectDescriptors.findFormatString(objectDescriptors);\r\n            let concatenatedValues: string[] = concatenateValues(columnsSortedByProjectionOrdering, queryRefsToIgnore, formatStringPropId);\r\n\r\n            let columnsSourceSortedByProjectionOrdering = _.map(columnsSortedByProjectionOrdering, categoryColumn => categoryColumn.source);\r\n            let concatenatedColumnMetadata: DataViewMetadataColumn = createConcatenatedColumnMetadata(roleName, columnsSourceSortedByProjectionOrdering, queryRefsToIgnore);\r\n            let transformedDataView = inheritSingle(dataView);\r\n            addToMetadata(transformedDataView, concatenatedColumnMetadata);\r\n\r\n            let concatenatedCategoryColumn: DataViewCategoryColumn = createConcatenatedCategoryColumn(\r\n                columnsSortedByProjectionOrdering,\r\n                concatenatedColumnMetadata,\r\n                concatenatedValues);\r\n\r\n            let dataViewCategorical: DataViewCategorical = dataView.categorical;\r\n\r\n            let transformedCategoricalCategories: DataViewCategoryColumn[] = _.difference(dataViewCategorical.categories, columnsSortedByProjectionOrdering);\r\n            transformedCategoricalCategories.push(concatenatedCategoryColumn);\r\n\r\n            let transformedCategorical: DataViewCategorical = inheritSingle(dataViewCategorical);\r\n            transformedCategorical.categories = transformedCategoricalCategories;\r\n            transformedDataView.categorical = transformedCategorical;\r\n\r\n            return transformedDataView;\r\n        }\r\n\r\n        function concatenateValues(columnsSortedByProjectionOrdering: DataViewCategoryColumn[], queryRefsToIgnore: string[], formatStringPropId: DataViewObjectPropertyIdentifier): string[] {\r\n            debug.assertValue(columnsSortedByProjectionOrdering, 'columnsSortedByProjectionOrdering');\r\n            debug.assertAnyValue(queryRefsToIgnore, 'queryRefsToIgnore');\r\n            debug.assertAnyValue(formatStringPropId, 'formatStringPropId');\r\n\r\n            let concatenatedValues: string[] = [];\r\n\r\n            // concatenate the values in dataViewCategorical.categories[0..length-1].values[j], and store it in combinedValues[j]\r\n            for (let categoryColumn of columnsSortedByProjectionOrdering) {\r\n                let formatString = valueFormatter.getFormatString(categoryColumn.source, formatStringPropId);\r\n\r\n                for (let i = 0, len = categoryColumn.values.length; i < len; i++) {\r\n                    if (!_.contains(queryRefsToIgnore, categoryColumn.source.queryName)) {\r\n                        let value = categoryColumn.values && categoryColumn.values[i];\r\n                        let formattedValue = valueFormatter.format(value, formatString);\r\n                        concatenatedValues[i] = (concatenatedValues[i] === undefined) ? formattedValue : (formattedValue + ' ' + concatenatedValues[i]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return concatenatedValues;\r\n        }\r\n\r\n        /**\r\n        * Returns a new array of elements from columns as they are ordered for the specified roleName in the specified projectionOrdering.\r\n        */\r\n        function sortColumnsByProjectionOrdering(projectionOrdering: DataViewProjectionOrdering, roleName: string, columns: DataViewCategoryColumn[]): DataViewCategoryColumn[] {\r\n            debug.assertAnyValue(projectionOrdering, 'projectionOrdering');\r\n            debug.assertValue(roleName, 'roleName');\r\n            debug.assertValue(columns, 'columns');\r\n\r\n            let columnsInProjectionOrdering: DataViewCategoryColumn[];\r\n\r\n            if (projectionOrdering) {\r\n                // the numeric values in projectionOrdering correspond to the index property of DataViewMetadataColumn\r\n                let columnsByIndex: { [index: number]: DataViewCategoricalColumn } = {};\r\n                for (let column of columns) {\r\n                    if (column.source.roles[roleName]) {\r\n                        debug.assert(!columnsByIndex[column.source.index], 'The specified columns should not contain multiple columns with same index: ' + column.source.index);\r\n                        columnsByIndex[column.source.index] = column;\r\n                    }\r\n                }\r\n\r\n                let columnIndicesInProjectionOrdering: number[] = projectionOrdering[roleName];\r\n\r\n                columnsInProjectionOrdering = _.chain(columnIndicesInProjectionOrdering)\r\n                    .map(columnIndex => columnsByIndex[columnIndex])\r\n                    .filter((column: DataViewCategoricalColumn) => !!column)\r\n                    .value();\r\n            }\r\n            else {\r\n                // If projectionOrder is unspecified, just return the columns for the specified role in their current order\r\n                columnsInProjectionOrdering = _.filter(columns, column => column.source.roles[roleName]);\r\n            }\r\n\r\n            return columnsInProjectionOrdering;\r\n        }\r\n\r\n        /**\r\n         * Creates the column metadata that will back the column with the concatenated values. \r\n         */\r\n        function createConcatenatedColumnMetadata(roleName: string, sourceColumnsSortedByProjectionOrdering: DataViewMetadataColumn[], queryRefsToIgnore?: string[]): DataViewMetadataColumn {\r\n            debug.assertValue(roleName, 'roleName');\r\n            debug.assertNonEmpty(sourceColumnsSortedByProjectionOrdering, 'sourceColumnsSortedByProjectionOrdering');\r\n            debug.assert(_.chain(sourceColumnsSortedByProjectionOrdering).map(c => c.isMeasure).uniq().value().length === 1, 'pre-condition: caller code should not attempt to combine a mix of measure columns and non-measure columns');\r\n\r\n            let concatenatedDisplayName: string;\r\n\r\n            for (let columnSource of sourceColumnsSortedByProjectionOrdering) {\r\n                if (!_.contains(queryRefsToIgnore, columnSource.queryName)) {\r\n                    concatenatedDisplayName = (concatenatedDisplayName == null) ? columnSource.displayName : (columnSource.displayName + ' ' + concatenatedDisplayName);\r\n                }\r\n            }\r\n\r\n            let newRoles: { [name: string]: boolean } = {};\r\n            newRoles[roleName] = true;\r\n\r\n            let newColumnMetadata: DataViewMetadataColumn = {\r\n                displayName: concatenatedDisplayName,\r\n                roles: newRoles,\r\n                type: ValueType.fromPrimitiveTypeAndCategory(PrimitiveType.Text)\r\n            };\r\n\r\n            let columnSourceForCurrentDrillLevel = _.last(sourceColumnsSortedByProjectionOrdering);\r\n            if (columnSourceForCurrentDrillLevel.isMeasure !== undefined) {\r\n                newColumnMetadata.isMeasure = columnSourceForCurrentDrillLevel.isMeasure;\r\n            }\r\n\r\n            // TODO VSTS 6842046: Investigate whether we should change that property to mandatory or change the Chart visual code.\r\n            // If queryName is not set at all, the column chart visual will only render column for the first group instance.\r\n            // If queryName is set to any string other than columnForCurrentDrillLevel.source.queryName, then drilldown by group instance is broken (VSTS 6847879).\r\n            newColumnMetadata.queryName = columnSourceForCurrentDrillLevel.queryName;\r\n\r\n            return newColumnMetadata;\r\n        }\r\n\r\n        function addToMetadata(transformedDataView: DataView, newColumn: DataViewMetadataColumn): void {\r\n            debug.assertValue(transformedDataView, 'transformedDataView');\r\n            debug.assertValue(newColumn, 'newColumn');\r\n\r\n            let transformedColumns = inheritSingle(transformedDataView.metadata.columns);\r\n            transformedColumns.push(newColumn);\r\n\r\n            let transformedMetadata = inheritSingle(transformedDataView.metadata);\r\n            transformedMetadata.columns = transformedColumns;\r\n\r\n            transformedDataView.metadata = transformedMetadata;\r\n        }\r\n\r\n        function createConcatenatedCategoryColumn(\r\n            sourceColumnsSortedByProjectionOrdering: DataViewCategoryColumn[],\r\n            columnMetadata: DataViewMetadataColumn,\r\n            concatenatedValues: string[]): DataViewCategoryColumn {\r\n            debug.assert(sourceColumnsSortedByProjectionOrdering && sourceColumnsSortedByProjectionOrdering.length >= 2, 'sourceColumnsSortedByProjectionOrdering && sourceColumnsSortedByProjectionOrdering.length >= 2');\r\n\r\n            let newCategoryColumn: DataViewCategoryColumn = {\r\n                source: columnMetadata,\r\n                values: concatenatedValues\r\n            };\r\n\r\n            // We expect every DataViewCategoryColumn in concatenationSourceColumns to have the same set of identities, always.\r\n            // So, we'll just take the identities and identityFields from the first column\r\n            let firstColumn = sourceColumnsSortedByProjectionOrdering[0];\r\n\r\n            if (firstColumn.identity) {\r\n                newCategoryColumn.identity = firstColumn.identity;\r\n            }\r\n\r\n            if (firstColumn.identityFields) {\r\n                newCategoryColumn.identityFields = firstColumn.identityFields;\r\n            }\r\n\r\n            // It is safe to look at the first column as it is the one that is being set by findSelectedCategoricalColumn\r\n            if (firstColumn.objects) {\r\n                newCategoryColumn.objects = firstColumn.objects;\r\n            }\r\n\r\n            return newCategoryColumn;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    export const enum RoleItemContext {\r\n        CategoricalValue,\r\n        CategoricalValueGroup,\r\n    }\r\n\r\n    export interface IDataViewMappingVisitor {\r\n        visitRole(role: string, context?: RoleItemContext): void;\r\n        visitReduction?(reductionAlgorithm?: ReductionAlgorithm): void;\r\n    }\r\n\r\n    export module DataViewMapping {\r\n        export function visitMapping(mapping: DataViewMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            let categorical = mapping.categorical;\r\n            if (categorical)\r\n                visitCategorical(categorical, visitor);\r\n\r\n            let table = mapping.table;\r\n            if (table)\r\n                visitTable(table, visitor);\r\n\r\n            let matrix = mapping.matrix;\r\n            if (matrix)\r\n                visitMatrix(matrix, visitor);\r\n\r\n            let tree = mapping.tree;\r\n            if (tree)\r\n                visitTree(tree, visitor);\r\n            \r\n            let single = mapping.single;\r\n            if (single)\r\n                visitSingle(single, visitor);\r\n        }\r\n\r\n        export function visitCategorical(mapping: DataViewCategoricalMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            visitCategoricalCategories(mapping.categories, visitor);\r\n\r\n            visitCategoricalValues(mapping.values, visitor);\r\n        }\r\n\r\n        export function visitCategoricalCategories(mapping: DataViewRoleMappingWithReduction | DataViewListRoleMappingWithReduction, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertAnyValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            if (mapping) {\r\n                visitBind(<DataViewRoleBindMapping>mapping, visitor);\r\n                visitFor(<DataViewRoleForMapping>mapping, visitor);\r\n                visitList(<DataViewListRoleMapping>mapping, visitor);\r\n\r\n                visitReduction(mapping, visitor);\r\n            }\r\n        }\r\n\r\n        export function visitCategoricalValues(mapping: DataViewRoleMapping | DataViewGroupedRoleMapping | DataViewListRoleMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertAnyValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            if (mapping) {\r\n                visitBind(<DataViewRoleBindMapping>mapping, visitor, RoleItemContext.CategoricalValue);\r\n                visitFor(<DataViewRoleForMapping>mapping, visitor, RoleItemContext.CategoricalValue);\r\n                visitList(<DataViewListRoleMapping>mapping, visitor, RoleItemContext.CategoricalValue);\r\n\r\n                let groupedRoleMapping = <DataViewGroupedRoleMapping>mapping;\r\n                visitGrouped(groupedRoleMapping, visitor);\r\n\r\n                let group = groupedRoleMapping.group;\r\n                if (group) {\r\n                    for (let item of group.select) {\r\n                        visitBind(<DataViewRoleBindMapping>item, visitor, RoleItemContext.CategoricalValueGroup);\r\n                        visitFor(<DataViewRoleForMapping>item, visitor, RoleItemContext.CategoricalValueGroup);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        export function visitTable(mapping: DataViewTableMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            let rows = mapping.rows;\r\n            visitBind(<DataViewRoleBindMapping>rows, visitor);\r\n            visitFor(<DataViewRoleForMapping>rows, visitor);\r\n            visitList(<DataViewListRoleMapping>rows, visitor);\r\n\r\n            visitReduction(rows, visitor);\r\n        }\r\n\r\n        function visitMatrix(mapping: DataViewMatrixMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            visitMatrixItems(mapping.rows, visitor);\r\n            visitMatrixItems(mapping.columns, visitor);\r\n            visitMatrixItems(mapping.values, visitor);\r\n        }\r\n\r\n        /**\r\n         * For visiting DataViewMatrixMapping.rows, DataViewMatrixMapping.columns, or DataViewMatrixMapping.values.\r\n         *\r\n         * @param mapping Can be one of DataViewMatrixMapping.rows, DataViewMatrixMapping.columns, or DataViewMatrixMapping.values.\r\n         * @param visitor The visitor.\r\n         */\r\n        export function visitMatrixItems(mapping: DataViewRoleForMappingWithReduction | DataViewListRoleMappingWithReduction, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertAnyValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            if (mapping) {\r\n                visitFor(<DataViewRoleForMapping>mapping, visitor);\r\n                visitList(<DataViewListRoleMapping>mapping, visitor);\r\n\r\n                visitReduction(mapping, visitor);\r\n            }\r\n        }\r\n\r\n        function visitTree(mapping: DataViewTreeMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            visitTreeNodes(mapping.nodes, visitor);\r\n            visitTreeValues(mapping.values, visitor);\r\n        }\r\n\r\n        export function visitTreeNodes(mapping: DataViewRoleForMappingWithReduction, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertAnyValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            if (mapping) {\r\n                visitFor(mapping, visitor);\r\n\r\n                visitReduction(mapping, visitor);\r\n            }\r\n        }\r\n\r\n        export function visitTreeValues(mapping: DataViewRoleForMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertAnyValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            if (mapping) {\r\n                visitFor(mapping, visitor);\r\n            }\r\n        }\r\n\r\n        function visitBind(mapping: DataViewRoleBindMapping, visitor: IDataViewMappingVisitor, context?: RoleItemContext): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            let bind = mapping.bind;\r\n            if (bind) {\r\n                if (context != null)\r\n                    visitor.visitRole(bind.to, context);\r\n                else\r\n                    visitor.visitRole(bind.to);\r\n            }\r\n        }\r\n\r\n        function visitFor(mapping: DataViewRoleForMapping, visitor: IDataViewMappingVisitor, context?: RoleItemContext): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            let forValue = mapping.for;\r\n            if (forValue) {\r\n                if (context != null)\r\n                    visitor.visitRole(forValue.in, context);\r\n                else\r\n                    visitor.visitRole(forValue.in);\r\n            }\r\n        }\r\n\r\n        function visitList(mapping: DataViewListRoleMapping, visitor: IDataViewMappingVisitor, context?: RoleItemContext): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            let select = mapping.select;\r\n            if (select) {\r\n                for (let item of select) {\r\n                    visitBind(<DataViewRoleBindMapping>item, visitor, context);\r\n                    visitFor(<DataViewRoleForMapping>item, visitor, context);\r\n                }\r\n            }\r\n        }\r\n\r\n        export function visitGrouped(mapping: DataViewGroupedRoleMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertAnyValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            if (!mapping)\r\n                return;\r\n\r\n            let group = mapping.group;\r\n            if (group) {\r\n                visitor.visitRole(group.by);\r\n\r\n                visitReduction(group, visitor);\r\n            }\r\n        }\r\n\r\n        function visitReduction(mapping: HasReductionAlgorithm, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            if (visitor.visitReduction) {\r\n                let reductionAlgorithm = mapping.dataReductionAlgorithm;\r\n                if (reductionAlgorithm) {\r\n                    visitor.visitReduction(reductionAlgorithm);\r\n                }\r\n            }\r\n        }\r\n\r\n        function visitSingle(mapping: DataViewSingleMapping, visitor: IDataViewMappingVisitor): void {\r\n            debug.assertValue(mapping, 'mapping');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            visitor.visitRole(mapping.role);\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import inheritSingle = Prototype.inheritSingle;\r\n\r\n    export interface DataViewNormalizeValuesApplyOptions {\r\n        dataview: DataView;\r\n        dataViewMappings: DataViewMapping[];\r\n        dataRoles: VisualDataRole[];\r\n    }\r\n\r\n    /**\r\n     * Interface of a function for deciding whether a column is tied to any role that has required type(s).\r\n     *\r\n     * @param columnIndex the position of the column in the select statement, i.e. the same semantic as the index property on the DataViewMetadataColumn interface.\r\n     * @returns true iff the column in the specified columnIndex is tied to any role that has required type(s), i.e. if the value in that column potentially needs to get normalized.\r\n     */\r\n    export interface IMetadataColumnFilter {\r\n        (columnIndex: number): boolean;\r\n    }\r\n\r\n    /**\r\n     * Returns true iff the specified value is of matching type as required by the role assigned to the column associated with this filter object.\r\n     */\r\n    export interface IColumnValueFilter {\r\n        (value: any): boolean;\r\n    }\r\n\r\n    /**\r\n     * Interface of a function for deciding whether a value needs to be normalized due to not having a matching type as required by a role tied to the column associated with the specified columnIndex.\r\n     *\r\n     * @param columnIndex the position of the column in the select statement, i.e. the same semantic as the index property on the DataViewMetadataColumn interface.\r\n     * @returns false iff the specified value needs to be normalized due to not having a matching type as required by a role tied to the column associated with the specified columnIndex.\r\n     */\r\n    export interface IValueFilter {\r\n        (columnIndex: number, value: any): boolean;\r\n    }\r\n\r\n    export module DataViewNormalizeValues {\r\n        export function apply(options: DataViewNormalizeValuesApplyOptions): void {\r\n            debug.assertValue(options, 'options');\r\n\r\n            let rolesToNormalize = _.filter(options.dataRoles, role => !_.isEmpty(role.requiredTypes));\r\n\r\n            filterVariantMeasures(options.dataview, options.dataViewMappings, rolesToNormalize);\r\n        }\r\n\r\n        export function filterVariantMeasures(dataview: DataView, dataViewMappings: DataViewMapping[], rolesToNormalize: VisualDataRole[]): void {\r\n            debug.assertValue(dataview, 'dataview');\r\n\r\n            // Don't perform this unless we actually have dataViewMappings and variant measures to suppress\r\n            // When we switch to lazy per-visual DataView creation, we'll be able to remove this check.\r\n            if (_.isEmpty(dataViewMappings) || _.isEmpty(rolesToNormalize))\r\n                return;\r\n\r\n            let columnFilter = generateMetadataColumnFilter(dataview.metadata.columns, rolesToNormalize);\r\n            let valueFilter = generateValueFilter(dataview.metadata.columns, rolesToNormalize);\r\n\r\n            let usedMappings = {};\r\n            for (let dataViewMapping of dataViewMappings) {\r\n                // Get dataview specified in mappings which are also in dataview\r\n                for (let dataViewMappingProp in dataViewMapping) {\r\n                    if (dataview[dataViewMappingProp] != null)\r\n                        usedMappings[dataViewMappingProp] = true;\r\n                }\r\n            }\r\n\r\n            if (usedMappings['categorical'])\r\n                filterVariantMeasuresCategorical(dataview.categorical, columnFilter, valueFilter);\r\n            if (usedMappings['table'])\r\n                filterVariantMeasuresTable(dataview.table, columnFilter, valueFilter);\r\n            if (usedMappings['tree'])\r\n                filterVariantMeasuresTreeNode(dataview.tree.root, columnFilter, valueFilter);\r\n            if (usedMappings['matrix'])\r\n                filterVariantMeasuresMatrix(dataview.matrix, columnFilter, valueFilter);\r\n            if (usedMappings['single'])\r\n                filterVariantMeasuresSingle(dataview, dataViewMappings, rolesToNormalize, valueFilter);\r\n        }\r\n\r\n        export function generateMetadataColumnFilter(columns: DataViewMetadataColumn[], rolesToNormalize: VisualDataRole[]): IMetadataColumnFilter {\r\n            if (!columns || !rolesToNormalize)\r\n                return () => false;\r\n\r\n            let columnsToNormalize = {};\r\n            for (let column of columns) {\r\n                let roles = column.roles;\r\n                if (!roles)\r\n                    continue;\r\n                for (let role of rolesToNormalize) {\r\n                    if (!roles[role.name])\r\n                        continue;\r\n                    columnsToNormalize[column.index] = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return (columnIndex: number) => {\r\n                if (isNaN(columnIndex))\r\n                    return false;\r\n\r\n                return !!columnsToNormalize[columnIndex];\r\n            };\r\n        }\r\n\r\n        export function generateValueFilter(columns: DataViewMetadataColumn[], rolesToNormalize: VisualDataRole[]): IValueFilter {\r\n            if (!columns || !rolesToNormalize)\r\n                return () => true;\r\n\r\n            let columnValueFilters: IColumnValueFilter[] = [];\r\n\r\n            // Build columnValueFilters based on role requiredTypes\r\n            for (let column of columns) {\r\n                let columnValueFilter = generateColumnValueFilter(column, rolesToNormalize);\r\n\r\n                if (columnValueFilter)\r\n                    columnValueFilters[column.index] = columnValueFilter;\r\n            }\r\n\r\n            return <IValueFilter>(columnIndex: number, value: any) => {\r\n                if (columnValueFilters[columnIndex])\r\n                    return columnValueFilters[columnIndex](value);\r\n\r\n                return true;\r\n            };\r\n        }\r\n\r\n        function generateColumnValueFilter(column: DataViewMetadataColumn, rolesToNormalize: VisualDataRole[]): IColumnValueFilter {\r\n            let requiredTypes = getColumnRequiredTypes(column, rolesToNormalize);\r\n\r\n            if (_.isEmpty(requiredTypes))\r\n                return;\r\n\r\n            return (value: any): boolean => {\r\n                return doesValueMatchTypes(value, requiredTypes);\r\n            };\r\n        }\r\n\r\n        export function getColumnRequiredTypes(column: DataViewMetadataColumn, rolesToNormalize: VisualDataRole[]): ValueType[] {\r\n            let requiredTypes = [];\r\n            let columnRoles = column && column.roles;\r\n\r\n            if (!columnRoles)\r\n                return requiredTypes;\r\n\r\n            for (let role of rolesToNormalize) {\r\n                if (!columnRoles[role.name])\r\n                    continue;\r\n                for (let typeDescriptor of role.requiredTypes) {\r\n                    let type = ValueType.fromDescriptor(typeDescriptor);\r\n                    requiredTypes.push(type);\r\n                }\r\n            }\r\n\r\n            return requiredTypes;\r\n        }\r\n\r\n        function filterVariantMeasuresCategorical(dataview: DataViewCategorical, columnFilter: IMetadataColumnFilter, valueFilter: IValueFilter): void {\r\n            let values = dataview && dataview.values;\r\n            if (!values)\r\n                return;\r\n\r\n            let valuesGrouped = values.grouped();\r\n            if (!valuesGrouped)\r\n                return;\r\n\r\n            for (let valueGroup of valuesGrouped) {\r\n                let valuesInGroup = valueGroup.values;\r\n                for (let valueColumn of valuesInGroup) {\r\n                    let columnIndex = valueColumn.source.index;\r\n                    if (!columnFilter(columnIndex))\r\n                        continue;\r\n\r\n                    for (let i = 0, ilen = valueColumn.values.length; i < ilen; i++) {\r\n                        valueColumn.values = normalizeVariant(valueColumn.values, i, columnIndex, valueFilter);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function filterVariantMeasuresTable(dataview: DataViewTable, columnFilter: IMetadataColumnFilter, valueFilter: IValueFilter): void {\r\n            let columns = dataview && dataview.columns;\r\n\r\n            if (!columns)\r\n                return;\r\n\r\n            let filteredColumns = [];\r\n            for (let column of columns) {\r\n                if (columnFilter(column.index))\r\n                    filteredColumns.push(column.index);\r\n            }\r\n\r\n            let rows = dataview.rows;\r\n            for (let i = 0, ilen = rows.length; i < ilen; i++) {\r\n                for (let index of filteredColumns) {\r\n                    rows[i] = normalizeVariant(rows[i], index, index, valueFilter);\r\n                }\r\n            }\r\n        }\r\n\r\n        function filterVariantMeasuresTreeNode(node: DataViewTreeNode, columnFilter: IMetadataColumnFilter, valueFilter: IValueFilter): void {\r\n            if (node.values) {\r\n                for (let columnIndex in node.values) {\r\n                    // In dataView.tree, the keys in node.values correspond to columnIndex of the node value\r\n                    if (columnFilter(<any>columnIndex)) {\r\n                        // According to nojorgen, it is possible to have primitive values as values in the node.values dictionary.\r\n                        if (typeof (node.values[columnIndex]) === 'object' && ('value' in node.values[columnIndex]))\r\n                            node.values[columnIndex] = normalizeVariant(node.values[columnIndex], 'value', <any>columnIndex, valueFilter);\r\n                        else // if node.values[columnIndex] is a primitive value\r\n                            node.values = normalizeVariant(node.values, columnIndex, <any>columnIndex, valueFilter);\r\n                    }\r\n                }\r\n            }\r\n            else if (node.children) {\r\n                for (let child of node.children) {\r\n                    filterVariantMeasuresTreeNode(child, columnFilter, valueFilter);\r\n                }\r\n            }\r\n        }\r\n\r\n        function filterVariantMeasuresMatrix(dataview: DataViewMatrix, columnFilter: IMetadataColumnFilter, valueFilter: IValueFilter): void {\r\n            let root = dataview && dataview.rows && dataview.rows.root;\r\n\r\n            if (!root)\r\n                return;\r\n\r\n            // Recurse into rows.children\r\n            // e.g. rows.children -> .children -> .children.values\r\n            filterVariantMeasuresMatrixRecursive(dataview, root, columnFilter, valueFilter);\r\n        }\r\n\r\n        function filterVariantMeasuresMatrixRecursive(dataviewMatrix: DataViewMatrix, node: DataViewTreeNode, columnFilter: IMetadataColumnFilter, valueFilter: IValueFilter): void {\r\n            if (node.values) {\r\n                for (let id in node.values) {\r\n                    // Note related to VSTS 6547124: In dataView.matrix, the keys in node.values are NOT equivalent to value.valueSourceIndex.\r\n                    let nodeValue: DataViewMatrixNodeValue = node.values[id];\r\n\r\n                    // the property DataViewMatrixNodeValue.valueSourceIndex will not exist if valueSourceIndex is 0 for that value\r\n                    let valueSourceIndex: number = nodeValue.valueSourceIndex || 0;\r\n\r\n                    // index is an optional property on DataViewMetadataColumn, but I am not sure when it will ever be undefined in a matrix' column metadata\r\n                    let columnIndex = dataviewMatrix.valueSources[valueSourceIndex].index;\r\n\r\n                    if (_.isNumber(columnIndex) && columnFilter(columnIndex)) {\r\n                        node.values[id] = normalizeVariant(nodeValue, 'value', columnIndex, valueFilter);\r\n                    }\r\n                }\r\n            }\r\n            else if (node.children) {\r\n                for (let child of node.children) {\r\n                    filterVariantMeasuresMatrixRecursive(dataviewMatrix, child, columnFilter, valueFilter);\r\n                }\r\n            }\r\n        }\r\n\r\n        function filterVariantMeasuresSingle(dataview: DataView, dataViewMappings: DataViewMapping[], rolesToNormalize: VisualDataRole[], valueFilter: IValueFilter): void {\r\n            if (!dataview.single)\r\n                return;\r\n\r\n            let roleNames: string[] = [];\r\n            for (let role of rolesToNormalize) {\r\n                if (role.name)\r\n                    roleNames.push(role.name);\r\n            }\r\n\r\n            let columns = dataview.metadata.columns;\r\n            for (let dataViewMapping of dataViewMappings) {\r\n                let roleName = dataViewMapping.single.role;\r\n                if (roleNames.indexOf(roleName) !== -1) {\r\n                    let column = firstColumnByRoleName(columns, roleName);\r\n                    if (column)\r\n                        dataview.single = normalizeVariant(dataview.single, 'value', column.index, valueFilter);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        export function normalizeVariant<T>(object: T, key: string|number, columnIndex: number, valueFilter: IValueFilter): T {\r\n            if (!object)\r\n                return;\r\n\r\n            let value = object[key];\r\n            if (value !== null && !valueFilter(columnIndex, value)) {\r\n                object = inheritSingle(object);\r\n                object[key] = null;\r\n            }\r\n\r\n            return object;\r\n        }\r\n\r\n        function doesValueMatchTypes<T>(value: T, types: ValueType[]): boolean {\r\n            for (let type of types) {\r\n                if (type.numeric || type.integer)\r\n                    return typeof (value) === 'number';\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function firstColumnByRoleName(columns: DataViewMetadataColumn[], roleName: string): DataViewMetadataColumn {\r\n            for (let column of columns) {\r\n                let columnRoles = column && column.roles;\r\n                if (columnRoles && columnRoles[roleName])\r\n                    return column;\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n\r\n    export module DataViewObjects {\r\n        /** Gets the value of the given object/property pair. */\r\n        export function getValue<T>(objects: DataViewObjects, propertyId: DataViewObjectPropertyIdentifier, defaultValue?: T): T {\r\n            debug.assertAnyValue(objects, 'objects');\r\n            debug.assertValue(propertyId, 'propertyId');\r\n\r\n            if (!objects)\r\n                return defaultValue;\r\n\r\n            let objectOrMap = objects[propertyId.objectName];\r\n            debug.assert(!isUserDefined(objectOrMap), 'expected DataViewObject');\r\n\r\n            let object = <DataViewObject>objectOrMap;\r\n            return DataViewObject.getValue(object, propertyId.propertyName, defaultValue);\r\n        }\r\n\r\n        /** Gets an object from objects. */\r\n        export function getObject(objects: DataViewObjects, objectName: string, defaultValue?: DataViewObject): DataViewObject {\r\n            if (objects && objects[objectName]) {\r\n                let object = <DataViewObject>objects[objectName];\r\n                debug.assert(!isUserDefined(object), 'expected DataViewObject');\r\n                return object;\r\n            }\r\n            else {\r\n                return defaultValue;\r\n            }\r\n        }\r\n\r\n        /** Gets a map of user-defined objects. */\r\n        export function getUserDefinedObjects(objects: DataViewObjects, objectName: string): DataViewObjectMap {\r\n            if (objects && objects[objectName]) {\r\n                let map = <DataViewObjectMap>objects[objectName];\r\n                debug.assert(isUserDefined(map), 'expected DataViewObjectMap');\r\n                return map;\r\n            }\r\n        }\r\n\r\n        /** Gets the solid color from a fill property. */\r\n        export function getFillColor(objects: DataViewObjects, propertyId: DataViewObjectPropertyIdentifier, defaultColor?: string): string {\r\n            let value: Fill = getValue(objects, propertyId);\r\n            if (!value || !value.solid)\r\n                return defaultColor;\r\n\r\n            return value.solid.color;\r\n        }\r\n\r\n        /** Returns true if the given object represents a collection of user-defined objects */\r\n        export function isUserDefined(objectOrMap: DataViewObject | DataViewObjectMap): boolean {\r\n            return _.isArray(objectOrMap);\r\n        }\r\n    }\r\n\r\n    export module DataViewObject {\r\n        export function getValue<T>(object: DataViewObject, propertyName: string, defaultValue?: T): T {\r\n            debug.assertAnyValue(object, 'object');\r\n            debug.assertValue(propertyName, 'propertyName');\r\n\r\n            if (!object)\r\n                return defaultValue;\r\n\r\n            let propertyValue = <T>object[propertyName];\r\n            if (propertyValue === undefined)\r\n                return defaultValue;\r\n\r\n            return propertyValue;\r\n        }\r\n\r\n        /** Gets the solid color from a fill property using only a propertyName */\r\n        export function getFillColorByPropertyName(objects: DataViewObjects, propertyName: string, defaultColor?: string): string {\r\n            let value: Fill = DataViewObject.getValue(objects, propertyName);\r\n            if (!value || !value.solid)\r\n                return defaultColor;\r\n\r\n            return value.solid.color;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import JsonComparer = jsCommon.JsonComparer;\r\n\r\n    /** Defines the values for particular objects. */\r\n    export interface DataViewObjectDefinitions {\r\n        [objectName: string]: DataViewObjectDefinition[];\r\n    }\r\n\r\n    export interface DataViewObjectDefinition {\r\n        selector?: Selector;\r\n        properties: DataViewObjectPropertyDefinitions;\r\n    }\r\n\r\n    export interface DataViewObjectPropertyDefinitions {\r\n        [name: string]: DataViewObjectPropertyDefinition;\r\n    }\r\n\r\n    export type DataViewObjectPropertyDefinition = SQExpr | StructuralObjectDefinition;\r\n\r\n    export module DataViewObjectDefinitions {\r\n\r\n        /** Creates or reuses a DataViewObjectDefinition for matching the given objectName and selector within the defns. */\r\n        export function ensure(\r\n            defns: DataViewObjectDefinitions,\r\n            objectName: string,\r\n            selector: Selector): DataViewObjectDefinition {\r\n            debug.assertValue(defns, 'defns');\r\n\r\n            let defnsForObject = defns[objectName];\r\n            if (!defnsForObject)\r\n                defns[objectName] = defnsForObject = [];\r\n\r\n            for (let i = 0, len = defnsForObject.length; i < len; i++) {\r\n                let defn = defnsForObject[i];\r\n                if (Selector.equals(defn.selector, selector))\r\n                    return defn;\r\n            }\r\n\r\n            let newDefn: DataViewObjectDefinition = {\r\n                selector: selector,\r\n                properties: {},\r\n            };\r\n            defnsForObject.push(newDefn);\r\n\r\n            return newDefn;\r\n        }\r\n\r\n        export function deleteProperty(\r\n            defns: DataViewObjectDefinitions,\r\n            objectName: string,\r\n            selector: Selector,\r\n            propertyName: string): void {\r\n            debug.assertValue(defns, 'defns');\r\n\r\n            let defn = getObjectDefinition(defns, objectName, selector);\r\n            if (!defn)\r\n                return;\r\n\r\n            DataViewObjectDefinition.deleteSingleProperty(defn, propertyName);\r\n        }\r\n        \r\n        export function setValue(\r\n            defns: DataViewObjectDefinitions,\r\n            propertyId: DataViewObjectPropertyIdentifier,\r\n            selector: Selector,\r\n            value: DataViewObjectPropertyDefinition): void {\r\n            debug.assertValue(defns, 'defns');\r\n            debug.assertValue(propertyId, 'propertyId');\r\n\r\n            ensure(defns, propertyId.objectName, selector).properties[propertyId.propertyName] = value;\r\n        }\r\n\r\n        export function getValue(\r\n            defns: DataViewObjectDefinitions,\r\n            propertyId: DataViewObjectPropertyIdentifier,\r\n            selector: Selector): DataViewObjectPropertyDefinition {\r\n\r\n            let properties = getPropertyContainer(defns, propertyId, selector);\r\n            if (!properties)\r\n                return;\r\n\r\n            return properties[propertyId.propertyName];\r\n        }\r\n\r\n        export function getPropertyContainer(\r\n            defns: DataViewObjectDefinitions,\r\n            propertyId: DataViewObjectPropertyIdentifier,\r\n            selector: Selector): DataViewObjectPropertyDefinitions {\r\n\r\n            let defn = getObjectDefinition(defns, propertyId.objectName, selector);\r\n            if (!defn)\r\n                return;\r\n\r\n            return defn.properties;\r\n        }\r\n\r\n        export function getObjectDefinition(\r\n            defns: DataViewObjectDefinitions,\r\n            objectName: string,\r\n            selector: Selector): DataViewObjectDefinition {\r\n            debug.assertAnyValue(defns, 'defns');\r\n            debug.assertValue(objectName, 'objectName');\r\n            debug.assertAnyValue(selector, 'selector');\r\n\r\n            if (!defns)\r\n                return;\r\n\r\n            let defnsForObject = defns[objectName];\r\n            if (!defnsForObject)\r\n                return;\r\n\r\n            for (let i = 0, len = defnsForObject.length; i < len; i++) {\r\n                let defn = defnsForObject[i];\r\n                if (Selector.equals(defn.selector, selector))\r\n                    return defn;\r\n            }\r\n        }\r\n\r\n        export function propertiesAreEqual(a: DataViewObjectPropertyDefinition, b: DataViewObjectPropertyDefinition): boolean {\r\n            if (a instanceof SemanticFilter && b instanceof SemanticFilter) {\r\n                return SemanticFilter.isSameFilter(<SemanticFilter>a, <SemanticFilter>b);\r\n            }\r\n\r\n            return JsonComparer.equals(a, b);\r\n        }\r\n\r\n        export function allPropertiesAreEqual(a: DataViewObjectPropertyDefinitions, b: DataViewObjectPropertyDefinitions): boolean {\r\n            debug.assertValue(a, 'a');\r\n            debug.assertValue(b, 'b');\r\n\r\n            if (Object.keys(a).length !== Object.keys(b).length)\r\n                return false;\r\n\r\n            for (let property in a) {\r\n                if (!propertiesAreEqual(a[property], b[property]))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        export function encodePropertyValue(value: DataViewPropertyValue, valueTypeDescriptor: ValueTypeDescriptor): DataViewObjectPropertyDefinition {\r\n            debug.assertAnyValue(value, 'value');\r\n            debug.assertValue(valueTypeDescriptor, 'valueTypeDescriptor');\r\n\r\n            if (valueTypeDescriptor.bool) {\r\n                if (typeof (value) !== 'boolean')\r\n                    value = false; // This is fallback, which doesn't really belong here.\r\n\r\n                return SQExprBuilder.boolean(<boolean>value);\r\n            }\r\n            else if (valueTypeDescriptor.text || (valueTypeDescriptor.scripting && valueTypeDescriptor.scripting.source)) {\r\n                return SQExprBuilder.text(<string>value);\r\n            }\r\n            else if (valueTypeDescriptor.numeric) {\r\n                if ($.isNumeric(value))\r\n                    return SQExprBuilder.double(+value);\r\n            }\r\n            else if ((<StructuralTypeDescriptor>valueTypeDescriptor).fill) {\r\n                if (value) {\r\n                    return {\r\n                        solid: { color: SQExprBuilder.text(<string>value) }\r\n                    };\r\n                }\r\n            }\r\n            else if (valueTypeDescriptor.formatting) {\r\n                if (valueTypeDescriptor.formatting.labelDisplayUnits) {\r\n                    return SQExprBuilder.double(+value);\r\n                }\r\n                else {\r\n                    return SQExprBuilder.text(<string>value);\r\n                }\r\n            }\r\n            else if (valueTypeDescriptor.enumeration) {\r\n                if ($.isNumeric(value))\r\n                    return SQExprBuilder.double(+value);\r\n                else\r\n                    return SQExprBuilder.text(<string>value);\r\n            }\r\n            else if (valueTypeDescriptor.misc) {\r\n                if (value) {\r\n                    value = SQExprBuilder.text(<string>value);\r\n                } else {\r\n                    value = null;\r\n                }\r\n            }\r\n            else if ((<StructuralTypeDescriptor>valueTypeDescriptor).image) {\r\n                if (value) {\r\n                    let imageValue = <ImageValue>value;\r\n                    let imageDefinition: ImageDefinition = {\r\n                        name: SQExprBuilder.text(imageValue.name),\r\n                        url: SQExprBuilder.text(imageValue.url),\r\n                    };\r\n\r\n                    if (imageValue.scaling)\r\n                        imageDefinition.scaling = SQExprBuilder.text(imageValue.scaling);\r\n\r\n                    return imageDefinition;\r\n                }\r\n            }\r\n\r\n            return value;\r\n        }\r\n\r\n        export function clone(original: DataViewObjectDefinitions): DataViewObjectDefinitions {\r\n            debug.assertValue(original, 'original');\r\n\r\n            let cloned: DataViewObjectDefinitions = {};\r\n\r\n            for (let objectName in original) {\r\n                let originalDefns = original[objectName];\r\n                if (_.isEmpty(originalDefns))\r\n                    continue;\r\n\r\n                let clonedDefns: DataViewObjectDefinition[] = [];\r\n                for (let originalDefn of originalDefns) {\r\n                    clonedDefns.push({\r\n                        properties: cloneProperties(originalDefn.properties),\r\n                        selector: originalDefn.selector,\r\n                    });\r\n                }\r\n                cloned[objectName] = clonedDefns;\r\n            }\r\n\r\n            return cloned;\r\n        }\r\n\r\n        function cloneProperties(original: DataViewObjectPropertyDefinitions): DataViewObjectPropertyDefinitions {\r\n            debug.assertValue(original, 'original');\r\n\r\n            // NOTE: properties are considered atomic, so a shallow clone is appropriate here.\r\n            return _.clone(original);\r\n        }\r\n    }\r\n\r\n    export module DataViewObjectDefinition {\r\n\r\n        export function deleteSingleProperty(\r\n            defn: DataViewObjectDefinition,\r\n            propertyName: string): void {\r\n\r\n            //note: We decided that delete is acceptable here and that we don't need optimization here\r\n            delete defn.properties[propertyName];\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n\r\n    export module DataViewObjectDescriptors {\r\n        /** Attempts to find the format string property.  This can be useful for upgrade and conversion. */\r\n        export function findFormatString(descriptors: DataViewObjectDescriptors): DataViewObjectPropertyIdentifier {\r\n            return findProperty(\r\n                descriptors,\r\n                (propDesc: DataViewObjectPropertyDescriptor) => {\r\n                    let formattingTypeDesc = ValueType.fromDescriptor(propDesc.type).formatting;\r\n                    return formattingTypeDesc && formattingTypeDesc.formatString;\r\n                });\r\n        }\r\n\r\n        /** Attempts to find the filter property.  This can be useful for propagating filters from one visual to others. */\r\n        export function findFilterOutput(descriptors: DataViewObjectDescriptors): DataViewObjectPropertyIdentifier {\r\n            return findProperty(\r\n                descriptors,\r\n                (propDesc: DataViewObjectPropertyDescriptor) => {\r\n                    let propType: StructuralTypeDescriptor = propDesc.type;\r\n                    return propType && !!propType.filter;\r\n                });\r\n        }\r\n\r\n        /** Attempts to find the default value property.  This can be useful for propagating schema default value. */\r\n        export function findDefaultValue(descriptors: DataViewObjectDescriptors): DataViewObjectPropertyIdentifier {\r\n            return findProperty(\r\n                descriptors,\r\n                (propDesc: DataViewObjectPropertyDescriptor) => {\r\n                    let propType: StructuralTypeDescriptor = propDesc.type;\r\n                    return propType && !!propType.expression && propType.expression.defaultValue;\r\n                });\r\n        }\r\n\r\n        function findProperty(descriptors: DataViewObjectDescriptors, propPredicate: (propDesc: DataViewObjectPropertyDescriptor) => boolean): DataViewObjectPropertyIdentifier {\r\n            debug.assertAnyValue(descriptors, 'descriptors');\r\n            debug.assertAnyValue(propPredicate, 'propPredicate');\r\n\r\n            if (!descriptors)\r\n                return;\r\n\r\n            for (let objectName in descriptors) {\r\n                let objPropDescs = descriptors[objectName].properties;\r\n\r\n                for (let propertyName in objPropDescs) {\r\n                    if (propPredicate(objPropDescs[propertyName])) {\r\n                        return {\r\n                            objectName: objectName,\r\n                            propertyName: propertyName,\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n*  Power BI Visualizations\r\n*\r\n*  Copyright (c) Microsoft Corporation\r\n*  All rights reserved. \r\n *  MIT License\r\n*\r\n*  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n*  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n*  in the Software without restriction, including without limitation the rights\r\n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n*  copies of the Software, and to permit persons to whom the Software is\r\n*  furnished to do so, subject to the following conditions:\r\n*   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n*   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n*  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n*  THE SOFTWARE.\r\n*/\r\n\r\nmodule powerbi.data {\r\n    export interface DataViewObjectDefinitionsByRepetition {\r\n        metadataOnce?: DataViewObjectDefinitionsForSelector;\r\n        userDefined?: DataViewObjectDefinitionsForSelector[];\r\n        metadata?: DataViewObjectDefinitionsForSelector[];\r\n        data: DataViewObjectDefinitionsForSelectorWithRule[];\r\n    }\r\n\r\n    export interface DataViewObjectDefinitionsForSelector {\r\n        selector?: Selector;\r\n        objects: DataViewNamedObjectDefinition[];\r\n    }\r\n\r\n    export interface DataViewObjectDefinitionsForSelectorWithRule extends DataViewObjectDefinitionsForSelector {\r\n        rules?: RuleEvaluation[];\r\n    }\r\n\r\n    export interface DataViewNamedObjectDefinition {\r\n        name: string;\r\n        properties: DataViewObjectPropertyDefinitions;\r\n    }\r\n\r\n    export module DataViewObjectEvaluationUtils {\r\n        export function evaluateDataViewObjects(\r\n            evalContext: IEvalContext,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            objectDefns: DataViewNamedObjectDefinition[]): DataViewObjects {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n\r\n            let objects: DataViewObjects;\r\n\r\n            for (let j = 0, jlen = objectDefns.length; j < jlen; j++) {\r\n                let objectDefinition = objectDefns[j],\r\n                    objectName = objectDefinition.name;\r\n\r\n                let evaluatedObject: DataViewObject = DataViewObjectEvaluator.run(\r\n                    evalContext,\r\n                    objectDescriptors[objectName],\r\n                    objectDefinition.properties);\r\n\r\n                if (!evaluatedObject)\r\n                    continue;\r\n\r\n                if (!objects)\r\n                    objects = {};\r\n\r\n                // NOTE: this currently has last-object-wins semantics.\r\n                objects[objectName] = evaluatedObject;\r\n            }\r\n\r\n            return objects;\r\n        }\r\n\r\n        export function groupObjectsBySelector(objectDefinitions: DataViewObjectDefinitions): DataViewObjectDefinitionsByRepetition {\r\n            debug.assertAnyValue(objectDefinitions, 'objectDefinitions');\r\n\r\n            let grouped: DataViewObjectDefinitionsByRepetition = {\r\n                data: [],\r\n            };\r\n\r\n            if (objectDefinitions) {\r\n                for (let objectName in objectDefinitions) {\r\n                    let objectDefnList = objectDefinitions[objectName];\r\n\r\n                    for (let i = 0, len = objectDefnList.length; i < len; i++) {\r\n                        let objectDefn = objectDefnList[i];\r\n\r\n                        ensureDefinitionListForSelector(grouped, objectDefn.selector).objects.push({\r\n                            name: objectName,\r\n                            properties: objectDefn.properties,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            return grouped;\r\n        }\r\n\r\n        function ensureDefinitionListForSelector(grouped: DataViewObjectDefinitionsByRepetition, selector: Selector): DataViewObjectDefinitionsForSelector {\r\n            debug.assertValue(grouped, 'grouped');\r\n            debug.assertAnyValue(selector, 'selector');\r\n\r\n            if (!selector) {\r\n                if (!grouped.metadataOnce)\r\n                    grouped.metadataOnce = { objects: [] };\r\n                return grouped.metadataOnce;\r\n            }\r\n\r\n            let groupedObjects: DataViewObjectDefinitionsForSelector[];\r\n            if (selector.data) {\r\n                groupedObjects = grouped.data;\r\n            }\r\n            else if (selector.metadata) {\r\n                if (!grouped.metadata)\r\n                    grouped.metadata = [];\r\n                groupedObjects = grouped.metadata;\r\n            }\r\n            else if (selector.id) {\r\n                if (!grouped.userDefined)\r\n                    grouped.userDefined = [];\r\n                groupedObjects = grouped.userDefined;\r\n            }\r\n\r\n            debug.assert(!!groupedObjects, 'GroupedObjects is not defined.  Indicates malformed selector.');\r\n\r\n            for (let item of groupedObjects) {\r\n                if (Selector.equals(selector, item.selector))\r\n                    return item;\r\n            }\r\n\r\n            let item: DataViewObjectDefinitionsForSelector = {\r\n                selector: selector,\r\n                objects: [],\r\n            };\r\n            groupedObjects.push(item);\r\n\r\n            return item;\r\n        }\r\n\r\n        export function addImplicitObjects(\r\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            columns: DataViewMetadataColumn[],\r\n            selectTransforms: DataViewSelectTransform[]): void {\r\n            debug.assertValue(objectsForAllSelectors, 'objectsForAllSelectors');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(columns, 'columns');\r\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\r\n\r\n            if (selectTransforms) {\r\n                addDefaultFormatString(objectsForAllSelectors, objectDescriptors, columns, selectTransforms);\r\n                addDefaultValue(objectsForAllSelectors, objectDescriptors, columns, selectTransforms);\r\n            }\r\n        }\r\n\r\n        function addDefaultFormatString(\r\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            columns: DataViewMetadataColumn[],\r\n            selectTransforms: DataViewSelectTransform[]): void {\r\n            debug.assertValue(objectsForAllSelectors, 'objectsForAllSelectors');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(columns, 'columns');\r\n            debug.assertValue(selectTransforms, 'selectTransforms');\r\n\r\n            let formatStringProp = DataViewObjectDescriptors.findFormatString(objectDescriptors);\r\n            if (!formatStringProp)\r\n                return;\r\n\r\n            for (let selectIdx = 0, selectLen = selectTransforms.length; selectIdx < selectLen; selectIdx++) {\r\n                let selectTransform = selectTransforms[selectIdx];\r\n                if (!selectTransform)\r\n                    continue;\r\n                debug.assertValue(selectTransform.queryName, 'selectTransform.queryName');\r\n\r\n                applyFormatString(\r\n                    objectsForAllSelectors,\r\n                    formatStringProp,\r\n                    selectTransform.queryName,\r\n                    selectTransform.format || getColumnFormatForIndex(columns, selectIdx));\r\n            }\r\n        }\r\n\r\n        /** Registers properties for default value, if the properties are not explicitly provided. */\r\n        function addDefaultValue (\r\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            columns: DataViewMetadataColumn[],\r\n            selectTransforms: DataViewSelectTransform[]): void {\r\n            debug.assertValue(objectsForAllSelectors, 'objectsForAllSelectors');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(columns, 'columns');\r\n            debug.assertValue(selectTransforms, 'selectTransforms');\r\n\r\n            let defaultValueProp = DataViewObjectDescriptors.findDefaultValue(objectDescriptors);\r\n            if (!defaultValueProp)\r\n                return;\r\n\r\n            for (let selectTransform of selectTransforms) {\r\n                if (!selectTransform)\r\n                    continue;\r\n                debug.assertValue(selectTransform.queryName, 'selectTransform.queryName');\r\n\r\n                applyDefaultValue(\r\n                    objectsForAllSelectors,\r\n                    defaultValueProp,\r\n                    selectTransform.queryName,\r\n                    selectTransform.defaultValue);\r\n            }\r\n        }\r\n\r\n        function getColumnFormatForIndex(columns: DataViewMetadataColumn[], selectIdx: number): string {\r\n            for (let columnIdx = 0, columnLen = columns.length; columnIdx < columnLen; columnIdx++) {\r\n                let column = columns[columnIdx];\r\n                if (!column || column.index !== selectIdx)\r\n                    continue;\r\n\r\n                return column.format;\r\n            }\r\n        }\r\n\r\n        function applyFormatString(\r\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\r\n            formatStringProp: DataViewObjectPropertyIdentifier,\r\n            queryName: string,\r\n            formatStringValue: string): void {\r\n            if (!formatStringValue)\r\n                return;\r\n\r\n            // There is a format string specified -- apply it as an object property, if there is not already one specified.\r\n            applyMetadataProperty(\r\n                objectsForAllSelectors,\r\n                formatStringProp,\r\n                { metadata: queryName },\r\n                SQExprBuilder.text(formatStringValue));\r\n        }\r\n\r\n        function applyDefaultValue(\r\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\r\n            defaultValueProp: DataViewObjectPropertyIdentifier,\r\n            queryName: string,\r\n            defaultValue: DefaultValueDefinition): void {\r\n            if (!defaultValue)\r\n                return;\r\n\r\n            // There is a default value specified -- apply it as an object property, if there is not already one specified.\r\n            applyMetadataProperty(\r\n                objectsForAllSelectors,\r\n                defaultValueProp,\r\n                { metadata: queryName },\r\n                defaultValue);\r\n        }\r\n\r\n        function applyMetadataProperty(\r\n            objectsForAllSelectors: DataViewObjectDefinitionsByRepetition,\r\n            propertyId: DataViewObjectPropertyIdentifier,\r\n            selector: Selector,\r\n            value: DataViewObjectPropertyDefinition): void {\r\n\r\n            let objectDefns: DataViewObjectDefinitionsForSelector[];\r\n            if (selector) {\r\n                let metadataObjects = objectsForAllSelectors.metadata;\r\n                if (!metadataObjects)\r\n                    metadataObjects = objectsForAllSelectors.metadata = [];\r\n                objectDefns = metadataObjects;\r\n            }\r\n            else {\r\n                let metadataOnce = objectsForAllSelectors.metadataOnce;\r\n                if (!metadataOnce)\r\n                    metadataOnce = objectsForAllSelectors.metadataOnce = { selector: selector, objects: [] };\r\n                objectDefns = [metadataOnce];\r\n            }\r\n\r\n            let targetMetadataObject = findWithMatchingSelector(objectDefns, selector);\r\n            let targetObjectDefn: DataViewNamedObjectDefinition;\r\n            if (targetMetadataObject) {\r\n                let targetObjectDefns = targetMetadataObject.objects;\r\n                targetObjectDefn = findExistingObject(targetObjectDefns, propertyId.objectName);\r\n                if (targetObjectDefn) {\r\n                    if (targetObjectDefn.properties[propertyId.propertyName])\r\n                        return;\r\n                }\r\n                else {\r\n                    targetObjectDefn = {\r\n                        name: propertyId.objectName,\r\n                        properties: {},\r\n                    };\r\n                    targetObjectDefns.push(targetObjectDefn);\r\n                }\r\n            }\r\n            else {\r\n                targetObjectDefn = {\r\n                    name: propertyId.objectName,\r\n                    properties: {}\r\n                };\r\n\r\n                objectDefns.push({\r\n                    selector: selector,\r\n                    objects: [targetObjectDefn],\r\n                });\r\n            }\r\n\r\n            targetObjectDefn.properties[propertyId.propertyName] = value;\r\n        }\r\n\r\n        function findWithMatchingSelector(objects: DataViewObjectDefinitionsForSelector[], selector: Selector): DataViewObjectDefinitionsForSelector {\r\n            debug.assertValue(objects, 'objects');\r\n            debug.assertAnyValue(selector, 'selector');\r\n\r\n            for (let i = 0, len = objects.length; i < len; i++) {\r\n                let object = objects[i];\r\n                if (Selector.equals(object.selector, selector))\r\n                    return object;\r\n            }\r\n        }\r\n\r\n        function findExistingObject(objectDefns: DataViewNamedObjectDefinition[], objectName: string): DataViewNamedObjectDefinition {\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n            debug.assertValue(objectName, 'objectName');\r\n\r\n            for (let i = 0, len = objectDefns.length; i < len; i++) {\r\n                let objectDefn = objectDefns[i];\r\n\r\n                if (objectDefn.name === objectName)\r\n                    return objectDefn;\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n \r\n\r\nmodule powerbi.data {\r\n    /** Responsible for evaluating object property expressions to be applied at various scopes in a DataView. */\r\n    export module DataViewObjectEvaluator {\r\n        const colorValueType: ValueType = ValueType.fromDescriptor({ formatting: { color: true } });\r\n        const numericType: ValueType = ValueType.fromDescriptor({ numeric: true });\r\n        const textType: ValueType = ValueType.fromDescriptor({ text: true });\r\n\r\n        export function run(\r\n            evalContext: IEvalContext,\r\n            objectDescriptor: DataViewObjectDescriptor,\r\n            propertyDefinitions: DataViewObjectPropertyDefinitions): DataViewObject {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertAnyValue(objectDescriptor, 'objectDescriptor');\r\n            debug.assertValue(propertyDefinitions, 'propertyDefinitions');\r\n\r\n            if (!objectDescriptor)\r\n                return;\r\n\r\n            let object: DataViewObject,\r\n                propertyDescriptors = objectDescriptor.properties;\r\n            for (let propertyName in propertyDefinitions) {\r\n                let propertyDefinition = propertyDefinitions[propertyName],\r\n                    propertyDescriptor = propertyDescriptors[propertyName];\r\n\r\n                if (!propertyDescriptor)\r\n                    continue;\r\n\r\n                let propertyValue = evaluateProperty(evalContext, propertyDescriptor, propertyDefinition);\r\n                if (propertyValue === undefined)\r\n                    continue;\r\n\r\n                if (!object)\r\n                    object = {};\r\n                object[propertyName] = propertyValue;\r\n            }\r\n\r\n            return object;\r\n        }\r\n\r\n        /** Note: Exported for testability */\r\n        export function evaluateProperty(\r\n            evalContext: IEvalContext,\r\n            propertyDescriptor: DataViewObjectPropertyDescriptor,\r\n            propertyDefinition: DataViewObjectPropertyDefinition): any {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertValue(propertyDescriptor, 'propertyDescriptor');\r\n            debug.assertValue(propertyDefinition, 'propertyDefinition');\r\n\r\n            let structuralType = <StructuralTypeDescriptor>propertyDescriptor.type;\r\n            if (structuralType && structuralType.expression)\r\n                return propertyDefinition;\r\n\r\n            let value = evaluateValue(evalContext, <any>propertyDefinition, ValueType.fromDescriptor(propertyDescriptor.type));\r\n            if (value !== undefined || (propertyDefinition instanceof RuleEvaluation))\r\n                return value;\r\n\r\n            return evaluateFill(evalContext, <FillDefinition>propertyDefinition, structuralType)\r\n                || evaluateFillRule(evalContext, <FillRuleDefinition>propertyDefinition, structuralType)\r\n                || evaluateImage(evalContext, <ImageDefinition>propertyDefinition, structuralType)\r\n                || evaluateParagraphs(evalContext, <ParagraphsDefinition>propertyDefinition, structuralType)\r\n                || propertyDefinition;\r\n        }\r\n\r\n        function evaluateFill(evalContext: IEvalContext, fillDefn: FillDefinition, type: StructuralTypeDescriptor): Fill {\r\n            let fillType = type.fill;\r\n            if (!fillType)\r\n                return;\r\n\r\n            if (fillType && fillType.solid && fillType.solid.color && fillDefn.solid) {\r\n                return {\r\n                    solid: {\r\n                        color: evaluateValue(evalContext, fillDefn.solid.color, ValueType.fromExtendedType(ExtendedType.Color)),\r\n                    }\r\n                };\r\n            }\r\n        }\r\n\r\n        function evaluateFillRule(evalContext: IEvalContext, fillRuleDefn: FillRuleDefinition, type: StructuralTypeDescriptor): FillRule {\r\n            if (!type.fillRule)\r\n                return;\r\n\r\n            if (fillRuleDefn.linearGradient2) {\r\n                let linearGradient2 = fillRuleDefn.linearGradient2;\r\n                return {\r\n                    linearGradient2: {\r\n                        min: evaluateColorStop(evalContext, linearGradient2.min),\r\n                        max: evaluateColorStop(evalContext, linearGradient2.max),\r\n                    }\r\n                };\r\n            }\r\n\r\n            if (fillRuleDefn.linearGradient3) {\r\n                let linearGradient3 = fillRuleDefn.linearGradient3;\r\n                return {\r\n                    linearGradient3: {\r\n                        min: evaluateColorStop(evalContext, linearGradient3.min),\r\n                        mid: evaluateColorStop(evalContext, linearGradient3.mid),\r\n                        max: evaluateColorStop(evalContext, linearGradient3.max),\r\n                    }\r\n                };\r\n            }\r\n        }\r\n\r\n        function evaluateColorStop(evalContext: IEvalContext, colorStop: RuleColorStopDefinition): RuleColorStop {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertValue(colorStop, 'colorStop');\r\n\r\n            let step: RuleColorStop = {\r\n                color: evaluateValue(evalContext, colorStop.color, colorValueType),\r\n            };\r\n\r\n            let value = evaluateValue(evalContext, colorStop.value, numericType);\r\n            if (value != null)\r\n                step.value = value;\r\n\r\n            return step;\r\n        }\r\n\r\n        function evaluateImage(evalContext: IEvalContext, definition: ImageDefinition, type: StructuralTypeDescriptor): ImageValue {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertAnyValue(definition, 'definition');\r\n            debug.assertValue(type, 'type');\r\n\r\n            if (!type.image || !definition)\r\n                return;\r\n\r\n            let value: ImageValue = {\r\n                name: evaluateValue(evalContext, definition.name, textType),\r\n                url: evaluateValue(evalContext, definition.url, ValueType.fromDescriptor(ImageDefinition.urlType)),\r\n            };\r\n\r\n            if (definition.scaling)\r\n                value.scaling = evaluateValue(evalContext, definition.scaling, textType);\r\n\r\n            return value;\r\n        }\r\n\r\n        function evaluateParagraphs(evalContext: IEvalContext, definition: ParagraphsDefinition, type: StructuralTypeDescriptor): Paragraphs {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertAnyValue(definition, 'definition');\r\n            debug.assertValue(type, 'type');\r\n\r\n            if (!type.paragraphs || !definition)\r\n                return;\r\n\r\n            return evaluateArrayCopyOnChange(evalContext, definition, evaluateParagraph);\r\n        }\r\n\r\n        function evaluateParagraph(evalContext: IEvalContext, definition: ParagraphDefinition): Paragraph {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertValue(definition, 'definition');\r\n\r\n            let evaluated: Paragraph;\r\n\r\n            let definitionTextRuns = definition.textRuns;\r\n            let evaluatedTextRuns: TextRun[] = evaluateArrayCopyOnChange(evalContext, definitionTextRuns, evaluateTextRun);\r\n            if (definitionTextRuns !== evaluatedTextRuns) {\r\n                evaluated = _.clone(<any>definition);\r\n                evaluated.textRuns = evaluatedTextRuns;\r\n            }\r\n\r\n            return evaluated || <Paragraph>definition;\r\n        }\r\n\r\n        function evaluateTextRun(evalContext: IEvalContext, definition: TextRunDefinition): TextRun {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertValue(definition, 'definition');\r\n\r\n            let evaluated: TextRun;\r\n\r\n            let definitionValue = definition.value;\r\n            let evaluatedValue = evaluateValue(evalContext, <any> definitionValue, textType);\r\n            if (evaluatedValue !== undefined) {\r\n                evaluated = _.clone(<any>definition);\r\n                evaluated.value = evaluatedValue;\r\n            }\r\n\r\n            return evaluated || <TextRun>definition;\r\n        }\r\n\r\n        /**\r\n         * Evaluates an array, and lazily copies on write whenever the evaluator function returns something\r\n         * other than the input to it.\r\n         */\r\n        function evaluateArrayCopyOnChange<TDefinition, TEvaluated>(\r\n            evalContext: IEvalContext,\r\n            definitions: TDefinition[],\r\n            evaluator: (ctx: IEvalContext, defn: TDefinition) => TEvaluated): TEvaluated[] {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertValue(definitions, 'definitions');\r\n            debug.assertValue(evaluator, 'evaluator');\r\n\r\n            let evaluatedValues: TEvaluated[];\r\n\r\n            for (let i = 0, len = definitions.length; i < len; i++) {\r\n                let definition = definitions[i];\r\n                let evaluated: TEvaluated = evaluator(evalContext, definition);\r\n\r\n                // NOTE: the any casts here are necessary due to the compiler not knowing the relationship\r\n                // between TEvaluated & TDefinition\r\n                if (!evaluatedValues && <any>definition !== evaluated) {\r\n                    evaluatedValues = _.take(<TEvaluated[]><any>definitions, i);\r\n                }\r\n\r\n                if (evaluatedValues) {\r\n                    evaluatedValues.push(evaluated);\r\n                }\r\n            }\r\n\r\n            return evaluatedValues || <TEvaluated[]><any>definitions;\r\n        }\r\n\r\n        function evaluateValue(evalContext: IEvalContext, definition: SQExpr | RuleEvaluation, valueType: ValueType): any {\r\n            if (definition instanceof SQExpr)\r\n                return ExpressionEvaluator.evaluate(<SQExpr>definition, evalContext);\r\n\r\n            if (definition instanceof RuleEvaluation)\r\n                return (<RuleEvaluation>definition).evaluate(evalContext);\r\n        }\r\n\r\n        /** Responsible for evaluating SQExprs into values. */\r\n        class ExpressionEvaluator extends DefaultSQExprVisitorWithArg<PrimitiveValue, IEvalContext> {\r\n            private static instance: ExpressionEvaluator = new ExpressionEvaluator();\r\n\r\n            public static evaluate(expr: SQExpr, evalContext: IEvalContext): PrimitiveValue {\r\n                if (expr == null)\r\n                    return;\r\n\r\n                return expr.accept(ExpressionEvaluator.instance, evalContext);\r\n            }\r\n\r\n            public visitColumnRef(expr: SQColumnRefExpr, evalContext: IEvalContext): PrimitiveValue {\r\n                return evalContext.getExprValue(expr);\r\n            }\r\n\r\n            public visitConstant(expr: SQConstantExpr, evalContext: IEvalContext): PrimitiveValue {\r\n                return expr.value;\r\n            }\r\n\r\n            public visitMeasureRef(expr: SQMeasureRefExpr, evalContext: IEvalContext): PrimitiveValue {\r\n                return evalContext.getExprValue(expr);\r\n            }\r\n\r\n            public visitAggr(expr: SQAggregationExpr, evalContext: IEvalContext): PrimitiveValue {\r\n                return evalContext.getExprValue(expr);\r\n            }\r\n\r\n            public visitFillRule(expr: SQFillRuleExpr, evalContext: IEvalContext): PrimitiveValue {\r\n                let inputValue = expr.input.accept(this, evalContext);\r\n                if (inputValue !== undefined) {\r\n                    let colorAllocator = evalContext.getColorAllocator(expr);\r\n                    if (colorAllocator) {\r\n                        return colorAllocator.color(inputValue);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n} \r\n","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import inherit = Prototype.inherit;\r\n\r\n    export module DataViewPivotCategorical {\r\n        /**\r\n         * Pivots categories in a categorical DataView into valueGroupings.\r\n         * This is akin to a mathematical matrix transpose.\r\n         */\r\n        export function apply(dataView: DataView): DataView {\r\n            debug.assertValue(dataView, 'dataView');\r\n\r\n            let categorical = dataView.categorical;\r\n            if (!categorical)\r\n                return null;\r\n\r\n            let categories = categorical.categories;\r\n            if (!categories || categories.length !== 1)\r\n                return null;\r\n\r\n            let values = categorical.values;\r\n            if (_.isEmpty(values) || values.source)\r\n                return null;\r\n\r\n            let category = categories[0],\r\n                categoryIdentities = category.identity,\r\n                categoryValues = category.values,\r\n                pivotedColumns: DataViewMetadataColumn[] = [],\r\n                pivotedValues: DataViewValueColumn[] = [];\r\n            for (let rowIdx = 0, rowCount = categoryValues.length; rowIdx < rowCount; rowIdx++) {\r\n                let categoryValue = categoryValues[rowIdx],\r\n                    categoryIdentity = categoryIdentities[rowIdx];\r\n                for (let colIdx = 0, colCount = values.length; colIdx < colCount; colIdx++) {\r\n                    let value = values[colIdx],\r\n                        pivotedColumn = inherit(value.source);\r\n\r\n                    // A value has a series group, which is not implemented for pivoting -- just give up.\r\n                    if (value.identity)\r\n                        return null;\r\n\r\n                    pivotedColumn.groupName = categoryValue;\r\n                    let pivotedValue: DataViewValueColumn = {\r\n                        source: pivotedColumn,\r\n                        values: [value.values[rowIdx]],\r\n                        identity: categoryIdentity,\r\n                        min: value.min,\r\n                        max: value.max,\r\n                        subtotal: value.subtotal\r\n                    };\r\n\r\n                    let highlights = value.highlights;\r\n                    if (highlights) {\r\n                        pivotedValue.highlights = [highlights[rowIdx]];\r\n                    }\r\n\r\n                    pivotedColumns.push(pivotedColumn);\r\n                    pivotedValues.push(pivotedValue);\r\n                }\r\n            }\r\n\r\n            let pivotedMetadata = inherit(dataView.metadata);\r\n            pivotedMetadata.columns = pivotedColumns;\r\n\r\n            values = DataViewTransform.createValueColumns(pivotedValues, <SQExpr[]>category.identityFields, category.source);\r\n            return {\r\n                metadata: pivotedMetadata,\r\n                categorical: {\r\n                    values: values,\r\n                },\r\n                matrix: dataView.matrix\r\n            };\r\n        }\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export module DataViewPivotMatrix {\r\n        /** Pivots row hierarchy members in a matrix DataView into column hierarchy. */\r\n        export function apply(dataViewMatrix: DataViewMatrix, context: MatrixTransformationContext): void {\r\n            debug.assertValue(dataViewMatrix, 'dataViewMatrix');\r\n\r\n            if (!context.columnHierarchyRewritten)\r\n                dataViewMatrix.columns = Prototype.inherit(dataViewMatrix.columns);\r\n            let columns = dataViewMatrix.columns;\r\n\r\n            if (!context.rowHierarchyRewritten)\r\n                dataViewMatrix.rows = Prototype.inherit(dataViewMatrix.rows);\r\n            let rows = dataViewMatrix.rows;\r\n\r\n            if (columns.levels.length > 1)\r\n                return;\r\n\r\n            let pivotedRowNode: DataViewMatrixNode = {\r\n                level: 0\r\n            };\r\n\r\n            let columnLeafNodes: DataViewMatrixNode[] = columns.root.children;\r\n            let measureCount = columnLeafNodes.length;\r\n\r\n            // Notes related to VSTS 6999369: The level value of Measure Header nodes is not necessarily its parent node's level + 1.\r\n            // In particular, the Measure Header column nodes directly under the Grand Total node at level 0 (i.e. _.last(pivotResultMatrix.columns.root.children))\r\n            // will have level === (pivotResultMatrix.columns.levels.length - 1), which will be greater than the Grand Total node's 'level + 1' \r\n            // in a matrix with 2+ column fields and 2+ measure fields.\r\n            // In this code, all row levels will get pivoted over to the columns hierarchy, hence the level of any Measure Header nodes in the pivot result\r\n            // is just (1 + the level of the deepest row node's level), which === rows.levels.length.\r\n            let pivotResultMeasureHeaderLevel = rows.levels.length;\r\n\r\n            if (measureCount > 0) {\r\n                let index = 0;\r\n                let callback = function (node: DataViewMatrixNode) {\r\n                    // Collect values and remove them from row leaves\r\n                    if (node.values) {\r\n                        if (!pivotedRowNode.values)\r\n                            pivotedRowNode.values = {};\r\n\r\n                        for (let i = 0; i < measureCount; i++)\r\n                            pivotedRowNode.values[index++] = node.values[i];\r\n\r\n                        delete node.values;\r\n                    }\r\n\r\n                    // Create measure headers if there are more than one measures\r\n                    if (measureCount > 1) {\r\n                        if (!node.children)\r\n                            node.children = [];\r\n\r\n                        for (let j = 0; j < measureCount; j++) {\r\n                            let measureHeaderLeaf: DataViewMatrixNode = { level: pivotResultMeasureHeaderLevel };\r\n\r\n                            // Copy levelSourceIndex from columnLeafNodes (as they might have been reordered)\r\n                            let columnLeafNode = columnLeafNodes[j];\r\n                            measureHeaderLeaf.levelSourceIndex = columnLeafNode.levelSourceIndex;\r\n\r\n                            if (node.isSubtotal)\r\n                                measureHeaderLeaf.isSubtotal = true;\r\n\r\n                            node.children.push(measureHeaderLeaf);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                if (context.hierarchyTreesRewritten) {\r\n                    forEachLeaf(rows.root, callback);\r\n                }\r\n                else {\r\n                    dataViewMatrix.columns.root = cloneTreeExecuteOnLeaf(rows.root, callback);\r\n                }\r\n            }\r\n            else {\r\n                if (!context.hierarchyTreesRewritten) {\r\n                    dataViewMatrix.columns.root = cloneTree(rows.root);\r\n                }\r\n            }\r\n\r\n            if (measureCount > 1) {\r\n                // Keep measure headers, but move them to the innermost level\r\n                let level: DataViewHierarchyLevel = { sources: columns.levels[0].sources };\r\n                rows.levels.push(level);\r\n\r\n                columns.levels.length = 0;\r\n            }\r\n\r\n            if (context.hierarchyTreesRewritten) {\r\n                dataViewMatrix.columns.root = rows.root;\r\n                dataViewMatrix.rows.root = {\r\n                    children: [pivotedRowNode]\r\n                };\r\n            }\r\n            else {\r\n                let updatedRowRoot = Prototype.inherit(dataViewMatrix.rows.root);\r\n                updatedRowRoot.children = [pivotedRowNode];\r\n                dataViewMatrix.rows.root = updatedRowRoot;\r\n            }\r\n\r\n            dataViewMatrix.columns.levels = rows.levels;\r\n            dataViewMatrix.rows.levels = [];\r\n        }\r\n\r\n        function forEachLeaf(root: DataViewMatrixNode, callback: (node: DataViewMatrixNode) => void): void {\r\n            let children = root.children;\r\n            if (children && children.length > 0) {\r\n                for (let i = 0, ilen = children.length; i < ilen; i++)\r\n                    forEachLeaf(children[i], callback);\r\n\r\n                return;\r\n            }\r\n\r\n            callback(root);\r\n        }\r\n\r\n        export function cloneTree(node: DataViewMatrixNode): DataViewMatrixNode {\r\n            return cloneTreeExecuteOnLeaf(node);\r\n        }\r\n\r\n        export function cloneTreeExecuteOnLeaf(node: DataViewMatrixNode, callback?: (node: DataViewMatrixNode) => void): DataViewMatrixNode {\r\n            let updatedNode = Prototype.inherit(node);\r\n\r\n            let children = node.children;\r\n            if (children && children.length > 0) {\r\n                let newChildren: DataViewTreeNode[] = [];\r\n\r\n                for (let i = 0, ilen = children.length; i < ilen; i++) {\r\n                    let updatedChild = cloneTreeExecuteOnLeaf(children[i], callback);\r\n                    newChildren.push(updatedChild);\r\n                }\r\n                updatedNode.children = newChildren;\r\n            }\r\n            else {\r\n                if (callback)\r\n                    callback(updatedNode);\r\n            }\r\n\r\n            return updatedNode;\r\n        }\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export module DataViewSelfCrossJoin {\r\n        /**\r\n         * Returns a new DataView based on the original, with a single DataViewCategorical category that is \"cross joined\"\r\n         * to itself as a value grouping.\r\n         * This is the mathematical equivalent of taking an array and turning it into an identity matrix.\r\n         */\r\n        export function apply(dataView: DataView): DataView {\r\n            debug.assertValue(dataView, 'dataView');\r\n\r\n            if (!dataView.categorical)\r\n                return;\r\n            let dataViewCategorical = dataView.categorical;\r\n            if (!dataViewCategorical.categories || dataViewCategorical.categories.length !== 1)\r\n                return;\r\n            if (dataViewCategorical.values && dataViewCategorical.values.source)\r\n                return;\r\n\r\n            return applyCategorical(dataView.metadata, dataViewCategorical);\r\n        }\r\n\r\n        function applyCategorical(dataViewMetadata: DataViewMetadata, dataViewCategorical: DataViewCategorical): DataView {\r\n            debug.assertValue(dataViewMetadata, 'dataViewMetadata');\r\n            debug.assertValue(dataViewCategorical, 'dataViewCategorical');\r\n            debug.assertValue(dataViewCategorical.categories, 'dataViewCategorical.categories');\r\n\r\n            let category = dataViewCategorical.categories[0],\r\n                categoryValues = category.values,\r\n                categoryLength = categoryValues.length;\r\n\r\n            if (categoryLength === 0)\r\n                return;\r\n\r\n            let valuesArray: DataViewValueColumn[] = dataViewCategorical.values\r\n                ? dataViewCategorical.values.grouped()[0].values\r\n                : [];\r\n            let transformedDataView = createCategoricalDataViewBuilder()\r\n                .withCategories(dataViewCategorical.categories)\r\n                .withGroupedValues(createGroupedValues(category, categoryValues, categoryLength, valuesArray))\r\n                .build();\r\n\r\n            dataViewMetadata = Prototype.inherit(dataViewMetadata);\r\n            dataViewMetadata.columns = transformedDataView.metadata.columns;\r\n\r\n            return {\r\n                metadata: dataViewMetadata,\r\n                categorical: transformedDataView.categorical,\r\n            };\r\n        }\r\n\r\n        function createGroupedValues(\r\n            category: DataViewCategoryColumn,\r\n            categoryValues: any[],\r\n            categoryLength: number,\r\n            valuesArray: DataViewValueColumn[]): DataViewBuilderGroupedValuesOptions {\r\n            debug.assertValue(category, 'category');\r\n            debug.assertValue(categoryValues, 'categoryValues');\r\n            debug.assertValue(categoryLength, 'categoryLength');\r\n            debug.assertValue(valuesArray, 'valuesArray');\r\n\r\n            let nullValuesArray: any[] = createNullValues(categoryLength),\r\n                valuesArrayLen = valuesArray.length,\r\n                seriesData: DataViewBuilderSeriesData[][] = [];\r\n\r\n            for (let i = 0; i < categoryLength; i++) {\r\n                let seriesDataItem: DataViewBuilderSeriesData[] = [];\r\n\r\n                for (let j = 0; j < valuesArrayLen; j++) {\r\n                    let originalValueColumn = valuesArray[j],\r\n                        originalHighlightValues = originalValueColumn.highlights;\r\n\r\n                    let seriesDataItemCategory: DataViewBuilderSeriesData = {\r\n                        values: inheritArrayWithValue(nullValuesArray, originalValueColumn.values, i),\r\n                    };\r\n                    if (originalHighlightValues)\r\n                        seriesDataItemCategory.highlights = inheritArrayWithValue(nullValuesArray, originalHighlightValues, i);\r\n\r\n                    seriesDataItem.push(seriesDataItemCategory);\r\n                }\r\n\r\n                seriesData.push(seriesDataItem);\r\n            }\r\n\r\n            return {\r\n                groupColumn: {\r\n                    source: category.source,\r\n                    identityFrom: { fields: <SQExpr[]>category.identityFields, identities: category.identity },\r\n                    values: category.values,\r\n                },\r\n                valueColumns: _.map(valuesArray, v => <DataViewBuilderColumnOptions>{ source: v.source }),\r\n                data: seriesData,\r\n            };\r\n        }\r\n    }\r\n\r\n    function createNullValues(length: number): any[] {\r\n        debug.assertValue(length, 'length');\r\n\r\n        let array = new Array(length);\r\n        for (let i = 0; i < length; i++)\r\n            array[i] = null;\r\n        return array;\r\n    }\r\n\r\n    function inheritArrayWithValue(nullValues: any[], original: any[], index: number): any[] {\r\n        let inherited = Prototype.inherit(nullValues);\r\n        inherited[index] = original[index];\r\n\r\n        return inherited;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import ArrayExtensions = jsCommon.ArrayExtensions;\r\n    import DataShapeBindingDataReduction = powerbi.data.DataShapeBindingDataReduction;\r\n    import inheritSingle = powerbi.Prototype.inheritSingle;\r\n    import RoleKindByQueryRef = DataViewAnalysis.RoleKindByQueryRef;\r\n\r\n    export module DataViewPivotCategoricalToPrimaryGroups {\r\n\r\n        /**\r\n         * If mapping requests cross axis data reduction and the binding has secondary grouping, mutates the binding to\r\n         * pivot the secondary before the primary.\r\n         */\r\n        export function pivotBinding(binding: DataShapeBinding, allMappings: CompiledDataViewMapping[], finalMapping: CompiledDataViewMapping, defaultDataVolume: number): void {\r\n            // unpivot is inferred from result in DataViewTransform.apply but it does not have the\r\n            // compiled mappings available, let alone the merged mapping, only the original\r\n            // DataViewMappings. to keep that inference easy, only apply pivot when there's\r\n            // only one matching mapping\r\n            if (!allMappings || allMappings.length !== 1)\r\n                return;\r\n\r\n            if (!finalMapping.categorical || !finalMapping.categorical.dataReductionAlgorithm)\r\n                return;\r\n\r\n            if (!binding)\r\n                return;\r\n\r\n            if (!canPivotCategorical(binding, finalMapping))\r\n                return;\r\n\r\n            // pivot secondary onto front of primary\r\n            binding.Primary.Groupings = [binding.Secondary.Groupings[0], binding.Primary.Groupings[0]];\r\n\r\n            binding.Secondary = undefined;\r\n        \r\n            // set primary to pivot reduction\r\n            binding.DataReduction = {\r\n                Primary: DataShapeBindingDataReduction.createFrom(finalMapping.categorical.dataReductionAlgorithm),\r\n                DataVolume: finalMapping.categorical.dataVolume || defaultDataVolume,\r\n            };\r\n        }\r\n\r\n        /** narrowly targets scatter chart scenario for now to keep code simple */\r\n        function isPivotableAxis(axis: powerbi.data.DataShapeBindingAxis): boolean {\r\n            return axis\r\n                && axis.Groupings\r\n                && axis.Groupings.length === 1\r\n                && !_.isEmpty(axis.Groupings[0].Projections)\r\n                && !axis.Groupings[0].Subtotal\r\n                && _.isEmpty(axis.Groupings[0].SuppressedProjections);\r\n        }\r\n\r\n        function canPivotCategorical(binding: DataShapeBinding, mapping: CompiledDataViewMapping): boolean {\r\n            if (!isPivotableAxis(binding.Primary))\r\n                return false;\r\n            if (!isPivotableAxis(binding.Secondary) || binding.Secondary.Groupings[0].Projections.length !== 1)\r\n                return false;\r\n\r\n            // don't pivot if either axis has a data reduction\r\n            if (binding.DataReduction && (binding.DataReduction.Primary || binding.DataReduction.Secondary))\r\n                return false;\r\n\r\n            return true;\r\n        }\r\n\r\n        export function unpivotResult(oldDataView: DataView, selects: DataViewSelectTransform[], dataViewMappings: DataViewMapping[], projectionActiveItems: DataViewProjectionActiveItems): DataView {\r\n            if (!inferUnpivotTransform(selects, dataViewMappings, oldDataView, projectionActiveItems))\r\n                return oldDataView;\r\n\r\n            // This returns a subsetted version of the DataView rather than using prototypal inheritance because\r\n            // any dataviews in the old one (including ones invented after this code is written) will correspond\r\n            // to a pivoted query result and therefore will be in the wrong shape for the unpivoted query the\r\n            // querying code made.\r\n            let newDataView: DataView = {\r\n                metadata: {\r\n                    columns: ArrayExtensions.copy(oldDataView.metadata.columns),\r\n                },\r\n            };\r\n            \r\n            // preserve view types that aren't affected by pivoting\r\n            if (oldDataView.single)\r\n                newDataView.single = oldDataView.single;\r\n            if (oldDataView.table)\r\n                newDataView.table = oldDataView.table;\r\n\r\n            // other views are derived from matrix\r\n            if (oldDataView.matrix) {\r\n                let newDataViewMatrix = unpivotMatrix(oldDataView.matrix);\r\n\r\n                // categorical only if there's data\r\n                if (!_.isEmpty(newDataViewMatrix.valueSources)) {\r\n                    // Guard against a DataViewMatrix with composite grouping in columns, because composite group in Series is \r\n                    // not yet expressible in the current version of DataViewValueColumns and DataViewValueColumnGroup interfaces.\r\n                    // this.canPivotCategorical() would have returned false in the first place for this query.\r\n                    let hasCompositeGroupInSeries = utils.DataViewMatrixUtils.containsCompositeGroup(newDataViewMatrix.columns);\r\n                    if (!hasCompositeGroupInSeries) {\r\n                        newDataView.categorical = categoricalFromUnpivotedMatrix(newDataViewMatrix, newDataView.metadata.columns);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return newDataView;\r\n        }\r\n\r\n        /**\r\n         * Infer from the query result and the visual mappings whether the query was pivoted.\r\n         * Narrowly targets scatter chart scenario for now to keep code simple\r\n         */\r\n        function inferUnpivotTransform(selects: DataViewSelectTransform[], dataViewMappings: DataViewMapping[], dataView: DataView, projectionActiveItems: DataViewProjectionActiveItems): boolean {\r\n            if (_.isEmpty(selects) || _.isEmpty(dataViewMappings) || !dataView)\r\n                return false;\r\n\r\n            // select applicable mappings based on select roles\r\n            let roleKinds: RoleKindByQueryRef = DataViewSelectTransform.createRoleKindFromMetadata(selects, dataView.metadata);\r\n            let projections: QueryProjectionsByRole = DataViewSelectTransform.projectionsFromSelects(selects, projectionActiveItems);\r\n            let supportedDataViewMappings = DataViewAnalysis.chooseDataViewMappings(projections, dataViewMappings, roleKinds).supportedMappings;\r\n\r\n            // NOTE: limiting to simple situation that handles scatter for now - see the other side in canPivotCategorical\r\n            if (!supportedDataViewMappings || supportedDataViewMappings.length !== 1)\r\n                return false;\r\n\r\n            let categoricalMapping = supportedDataViewMappings[0].categorical;\r\n            if (!categoricalMapping)\r\n                return false;\r\n\r\n            // pivoted query will have produced a matrix\r\n            let matrixDataview = dataView.matrix;\r\n            if (!matrixDataview)\r\n                return false;\r\n\r\n            // matrix must have two levels of grouping\r\n            if (!matrixDataview.rows || !matrixDataview.rows.levels || matrixDataview.rows.levels.length !== 2)\r\n                return false;\r\n            \r\n            // get category and value grouping roles\r\n            let categoryGroups: string[] = [];\r\n            let valueGroups: string[] = [];\r\n\r\n            let addGroupingRole = (roleName: string, groups: string[]) => {\r\n                let roleProjections: QueryProjectionCollection = projections[roleName];\r\n                if (!roleProjections)\r\n                    return;\r\n\r\n                for (let roleProjection of roleProjections.all()) {\r\n                    if (roleKinds[roleProjection.queryRef] === VisualDataRoleKind.Grouping)\r\n                        groups.push(roleProjection.queryRef);\r\n                }\r\n            };\r\n\r\n            DataViewMapping.visitCategoricalCategories(categoricalMapping.categories, {\r\n                visitRole: (roleName: string) => { addGroupingRole(roleName, categoryGroups); }\r\n            });\r\n\r\n            DataViewMapping.visitCategoricalValues(categoricalMapping.values, {\r\n                visitRole: (roleName: string) => { addGroupingRole(roleName, valueGroups); }\r\n            });\r\n\r\n            // need both for pivot to have been done\r\n            if (_.isEmpty(categoryGroups) || _.isEmpty(valueGroups))\r\n                return false;\r\n\r\n            // if there was a pivot, there won't be any measures left in the columns\r\n            for (let level of matrixDataview.columns.levels) {\r\n                for (let source of level.sources) {\r\n                    if (!source.isMeasure)\r\n                        return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        interface DataViewMatrixNodeValues {\r\n            [id: number]: DataViewMatrixNodeValue;\r\n        }\r\n\r\n        /**\r\n         * matrix will have two groupings in the rows, outer (series) and inner (categories), and none in the columns.\r\n         * this function changes that so that the categories become the rows and the series the columns.\r\n         */\r\n        function unpivotMatrix(oldMatrix: DataViewMatrix): DataViewMatrix {\r\n            let oldRows = oldMatrix.rows;\r\n            let oldRoot = oldRows.root;\r\n            let oldChildren = <DataViewMatrixNode[]>oldRoot.children;\r\n\r\n            // series are the outer grouping\r\n            let series: DataViewMatrixNode[] = [];\r\n            let seriesIdLevel = oldRows.levels[0];\r\n            let seriesIdFields = oldRoot.childIdentityFields;\r\n\r\n            // categories are the inner grouping. \r\n            let categoryIndex: _.Dictionary<number> = {};\r\n            let categories: DataViewMatrixNode[] = [];\r\n            let categoryIdLevel = oldRows.levels[1];\r\n            let categoryIdFields = _.isEmpty(oldChildren) ? undefined : oldChildren[0].childIdentityFields;\r\n\r\n            let measureCount = oldMatrix.valueSources.length;\r\n\r\n            // within each series value, the category list may not be complete so cannot simply use the inner loop index\r\n            // to reference it.\r\n            let findCategory = (identity: DataViewScopeIdentity) => {\r\n                let index = categoryIndex[identity.key];\r\n\r\n                debug.assert(index !== undefined, \"findcat() !== undefined\");\r\n\r\n                return index;\r\n            };\r\n\r\n            // collect series and categories from the row hierarchy\r\n            if (oldChildren) {\r\n                let addCategory = (categoryNode: DataViewMatrixNode) => {\r\n                    let key = categoryNode.identity.key;\r\n                    let index = categoryIndex[key];\r\n                    if (index === undefined) {\r\n                        index = categories.length;\r\n                        categoryIndex[key] = index;\r\n                        categories.push(categoryNode);\r\n                    }\r\n                };\r\n\r\n                for (let seriesNode of oldChildren) {\r\n                    series.push(seriesNode);\r\n\r\n                    for (let categoryNode of <DataViewMatrixNode[]>seriesNode.children) {\r\n                        addCategory(categoryNode);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // extract intersection values from pivoted matrix\r\n            // values will be indexed by categories then series\r\n            let matrixValues: DataViewMatrixNodeValues[][] = new Array<DataViewMatrixNodeValues[]>(categories.length);\r\n            for (let j = 0; j < series.length; ++j) { // outer is series\r\n                let seriesNode = oldChildren[j];\r\n                for (let categoryNode of seriesNode.children) { // inner is categories but maybe a subset\r\n                    let i = findCategory(categoryNode.identity); // must lookup actual category index\r\n\r\n                    if (!matrixValues[i])\r\n                        matrixValues[i] = new Array<DataViewMatrixNodeValues>(series.length);\r\n\r\n                    matrixValues[i][j] = categoryNode.values;\r\n                }\r\n            }\r\n\r\n            // columns of the unpivoted matrix are the series\r\n            let newColumns: DataViewHierarchy = {\r\n                root: {\r\n                    children: _.map(series, s => {\r\n                        let inheritedNode = inheritSingle(s);\r\n                        inheritedNode.level = 0; // s.level should already be 0, but just in case...\r\n                        inheritedNode.children = undefined; // if Measure Headers exist in oldMatrix.columns, newColumns.root.children will get populated later in this function\r\n                        inheritedNode.childIdentityFields = undefined;\r\n                        return inheritedNode;\r\n                    }),\r\n                    childIdentityFields: seriesIdFields,\r\n                },\r\n                levels: [\r\n                    seriesIdLevel,\r\n                    \r\n                ],\r\n            };\r\n\r\n            // Re-add any Measure Headers from oldMatrix.columns as leaf nodes under newColumns\r\n            if (measureCount > 0) {\r\n                let newColChildren: DataViewMatrixNode[] = _.map(oldMatrix.columns.root.children, (srcnode: DataViewMatrixNode) => {\r\n                    let dstnode: DataViewMatrixNode = { level: 1 };\r\n                    if (srcnode.levelSourceIndex)\r\n                        dstnode.levelSourceIndex = srcnode.levelSourceIndex;\r\n                    return dstnode;\r\n                });\r\n\r\n                for (let i = 0; i < newColumns.root.children.length; ++i)\r\n                    newColumns.root.children[i].children = newColChildren;\r\n\r\n                newColumns.levels.push(oldMatrix.columns.levels[0]);\r\n            }\r\n\r\n            // rows of the unpivoted matrix are the categories\r\n            let newRows: DataViewHierarchy = {\r\n                root: {\r\n                    children: _.map(categories, c => {\r\n                        let inheritedNode = inheritSingle(c);\r\n                        inheritedNode.level = 0;\r\n                        inheritedNode.children = undefined; // c.children should already be undefined, but just in case...\r\n                        inheritedNode.childIdentityFields = undefined; // c.children should already be undefined, but just in case...\r\n                        return inheritedNode;\r\n                    }),\r\n                    childIdentityFields: categoryIdFields,\r\n                },\r\n                levels: [\r\n                    categoryIdLevel,\r\n                ],\r\n            };\r\n\r\n            // put values into rows\r\n            if (measureCount > 0) {\r\n                for (let i = 0; i < categories.length; ++i) {\r\n                    let row = newRows.root.children[i];\r\n                    let rowValues: DataViewMatrixNodeValues = {};\r\n\r\n                    for (let j = 0; j < series.length; ++j) {\r\n                        let mvalues = matrixValues[i] && matrixValues[i][j];\r\n                        for (let k = 0; k < measureCount; ++k) {\r\n                            let l = j * measureCount + k;\r\n                            rowValues[l] = !mvalues\r\n                                ? ( k === 0 ? { value: null } : { value: null, valueSourceIndex: k } )\r\n                                : mvalues[k];\r\n                        }\r\n                    }\r\n\r\n                    row.values = rowValues;\r\n                }\r\n            }\r\n\r\n            let newMatrix: DataViewMatrix = {\r\n                rows: newRows,\r\n                columns: newColumns,\r\n                valueSources: oldMatrix.valueSources,\r\n            };\r\n\r\n            return newMatrix;\r\n        }\r\n\r\n        /** build a categorical data view from an unpivoted matrix. */\r\n        function categoricalFromUnpivotedMatrix(matrix: DataViewMatrix, columnMetadata: DataViewMetadataColumn[]): DataViewCategorical {\r\n            let seriesCount = matrix.columns.root.children.length;\r\n            let measureMetadata = matrix.valueSources;\r\n            let measureCount = measureMetadata.length;\r\n\r\n            let categories: DataViewCategoryColumn[] = createCategoryColumnsFromUnpivotedMatrix(matrix);\r\n\r\n            // create grouped values\r\n            let groups: DataViewValueColumnGroup[] = [];\r\n            for (let j = 0; j < seriesCount; ++j) {\r\n                let seriesColumn = matrix.columns.root.children[j];\r\n                let group: DataViewValueColumnGroup = {\r\n                    values: [],\r\n                    identity: seriesColumn.identity,\r\n                    name: seriesColumn.value || null,\r\n                };\r\n\r\n                groups.push(group);\r\n\r\n                for (let k = 0; k < measureCount; ++k) {\r\n                    let valueColumnMetadataSrc = measureMetadata[k];\r\n                    let valueColumnMetadataDst: DataViewMetadataColumn = <DataViewMetadataColumn>{};\r\n                    for (let key in valueColumnMetadataSrc)\r\n                        valueColumnMetadataDst[key] = valueColumnMetadataSrc[key];\r\n                    valueColumnMetadataDst.groupName = group.name;\r\n\r\n                    columnMetadata.push(valueColumnMetadataDst);\r\n\r\n                    let valueColumn: DataViewValueColumn = {\r\n                        source: valueColumnMetadataDst,\r\n                        values: [],\r\n                        identity: group.identity,\r\n                    };\r\n\r\n                    group.values.push(valueColumn);\r\n\r\n                    // grab measure values in the group from across rows of matrix\r\n                    let index = k + j * measureCount;\r\n\r\n                    for (let categoryNode of matrix.rows.root.children) {\r\n                        let value = categoryNode.values[index].value;\r\n\r\n                        valueColumn.values.push(value);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // and now ungrouped\r\n            let values: DataViewValueColumns = <DataViewValueColumns>[];\r\n            for (let group of groups) {\r\n                for (let k = 0; k < measureCount; ++k) {\r\n                    values.push(group.values[k]);\r\n                }\r\n            }\r\n\r\n            values.grouped = () => groups;\r\n            values.identityFields = matrix.columns.root.childIdentityFields;\r\n            values.source = matrix.columns.levels[0].sources[0];\r\n\r\n            // final assembly\r\n            let categorical: DataViewCategorical = {\r\n                categories: categories,\r\n                values: values,\r\n            };\r\n\r\n            return categorical;\r\n        }\r\n\r\n        function createCategoryColumnsFromUnpivotedMatrix(unpivotedMatrix: DataViewMatrix): DataViewCategoryColumn[] {\r\n            debug.assertValue(unpivotedMatrix, 'unpivotedMatrix');\r\n            debug.assert(unpivotedMatrix && unpivotedMatrix.rows && unpivotedMatrix.rows.levels && (unpivotedMatrix.rows.levels.length === 1),\r\n                'pre-condition: unpivotedMatrix should have exactly one level in row hierarchy');\r\n\r\n            // Create categories from rows.  If matrix.rows.levels[0].sources represents a composite group, expand each column in the \r\n            // composite group into a separate DataViewCategoryColumn.  The identity and childIdentityFields properties will be the \r\n            // same amongst the resulting DataViewCategoryColumns.\r\n            let categoryIdentity = _.map(unpivotedMatrix.rows.root.children, x => x.identity);\r\n            let categoryIdentityFields = unpivotedMatrix.rows.root.childIdentityFields;\r\n            let categorySourceColumns = unpivotedMatrix.rows.levels[0].sources;\r\n\r\n            let categories: DataViewCategoryColumn[] = [];\r\n            for (var i = 0, ilen = categorySourceColumns.length; i < ilen; i++) {\r\n                let groupLevelValues = _.map(unpivotedMatrix.rows.root.children, (categoryNode: DataViewMatrixNode) => {\r\n                    let levelValues: DataViewMatrixGroupValue[] = categoryNode.levelValues;\r\n\r\n                    // Please refer to the interface comments on when this is undefined... But in today's code\r\n                    // I believe we will not see undefined levelValues in the rows of any unpivotedMatrix. \r\n                    if (levelValues !== undefined) {\r\n                        debug.assert(levelValues[i] && (levelValues[i].levelSourceIndex === i),\r\n                            'pre-condition: DataViewMatrixNode.levelValues is expected to have one DataViewMatrixGroupValue node per level source column, sorted by levelSourceIndex.');\r\n                        return levelValues[i].value;\r\n                    }\r\n                });\r\n\r\n                categories.push({\r\n                    source: categorySourceColumns[i],\r\n                    values: groupLevelValues,\r\n                    identity: categoryIdentity,\r\n                    identityFields: categoryIdentityFields,\r\n                });\r\n            }\r\n\r\n            return categories;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import inherit = Prototype.inherit;\r\n    import inheritSingle = Prototype.inheritSingle;\r\n    import ArrayExtensions = jsCommon.ArrayExtensions;\r\n    import EnumExtensions = jsCommon.EnumExtensions;\r\n    import INumberDictionary = jsCommon.INumberDictionary;\r\n\r\n    export interface DataViewTransformApplyOptions {\r\n        prototype: DataView;\r\n        objectDescriptors: DataViewObjectDescriptors;\r\n        dataViewMappings?: DataViewMapping[];\r\n        transforms: DataViewTransformActions;\r\n        colorAllocatorFactory: IColorAllocatorFactory;\r\n        dataRoles: VisualDataRole[];\r\n    }\r\n\r\n    /** Describes the Transform actions to be done to a prototype DataView. */\r\n    export interface DataViewTransformActions {\r\n        /** Describes transform metadata for each semantic query select item, as the arrays align, by index. */\r\n        selects?: DataViewSelectTransform[];\r\n\r\n        /** Describes the DataViewObject definitions. */\r\n        objects?: DataViewObjectDefinitions;\r\n\r\n        /** Describes the splitting of a single input DataView into multiple DataViews. */\r\n        splits?: DataViewSplitTransform[];\r\n\r\n        /** Describes the projection metadata which includes projection ordering and active items. */\r\n        roles?: DataViewRoleTransformMetadata;\r\n    }\r\n\r\n    export interface DataViewSplitTransform {\r\n        selects: INumberDictionary<boolean>;\r\n    }\r\n\r\n    export interface DataViewProjectionOrdering {\r\n        [roleName: string]: number[];\r\n    }\r\n\r\n    export interface DataViewProjectionActiveItemInfo {\r\n        queryRef: string;\r\n\r\n        /** Describes if the active item should be ignored in concatenation.\r\n            If the active item has a drill filter, it will not be used in concatenation.\r\n            If the value of suppressConcat is true, the activeItem will be ommitted from concatenation. */\r\n        suppressConcat?: boolean;\r\n    }\r\n\r\n    export interface DataViewProjectionActiveItems {\r\n        [roleName: string]: DataViewProjectionActiveItemInfo[];\r\n    }\r\n\r\n    export interface DataViewRoleTransformMetadata {\r\n        /** Describes the order of selects (referenced by query index) in each role. */\r\n        ordering?: DataViewProjectionOrdering;\r\n\r\n        /** Describes the active items in each role. */\r\n        activeItems?: DataViewProjectionActiveItems;\r\n    }\r\n\r\n    export interface MatrixTransformationContext {\r\n        rowHierarchyRewritten: boolean;\r\n        columnHierarchyRewritten: boolean;\r\n        hierarchyTreesRewritten: boolean;\r\n    }\r\n\r\n    interface ValueRewrite<T> {\r\n        from: T;\r\n        to: T;\r\n    }\r\n\r\n    interface NumberToNumberMapping {\r\n        [position: number]: number;\r\n    }\r\n\r\n    const enum CategoricalDataViewTransformation {\r\n        None,\r\n        Pivot,\r\n        SelfCrossJoin,\r\n    }\r\n\r\n    export const enum StandardDataViewKinds {\r\n        None = 0,\r\n        Categorical = 1,\r\n        Matrix = 1 << 1,\r\n        Single = 1 << 2,\r\n        Table = 1 << 3,\r\n        Tree = 1 << 4,\r\n    }\r\n\r\n    // TODO: refactor & focus DataViewTransform into a service with well-defined dependencies.\r\n    export module DataViewTransform {\r\n        const fillRulePropertyDescriptor: DataViewObjectPropertyDescriptor = { type: { fillRule: {} } };\r\n\r\n        const enum ColumnIdentifierKind {\r\n            QueryName,\r\n            Role,\r\n        }\r\n\r\n        export function apply(options: DataViewTransformApplyOptions): DataView[] {\r\n            debug.assertValue(options, 'options');\r\n\r\n            // TODO: Flow a context object through to capture errors/warnings about what happens here for better diagnosability.\r\n\r\n            let prototype = options.prototype,\r\n                objectDescriptors = options.objectDescriptors,\r\n                dataViewMappings = options.dataViewMappings,\r\n                transforms = options.transforms,\r\n                projectionActiveItems = transforms && transforms.roles && transforms.roles.activeItems,\r\n                colorAllocatorFactory = options.colorAllocatorFactory,\r\n                dataRoles = options.dataRoles;\r\n\r\n            if (!prototype)\r\n                return transformEmptyDataView(objectDescriptors, transforms, colorAllocatorFactory);\r\n\r\n            if (!transforms)\r\n                return [prototype];\r\n\r\n            // Transform Query DataView\r\n            prototype = DataViewPivotCategoricalToPrimaryGroups.unpivotResult(prototype, transforms.selects, dataViewMappings, projectionActiveItems);\r\n            let visualDataViews: DataView[] = transformQueryToVisualDataView(prototype, transforms, objectDescriptors, dataViewMappings, colorAllocatorFactory, dataRoles);\r\n\r\n            // Transform and generate derived visual DataViews\r\n            visualDataViews = DataViewRegression.run({\r\n                dataViewMappings: dataViewMappings,\r\n                visualDataViews: visualDataViews,\r\n                dataRoles: dataRoles,\r\n                objectDescriptors: objectDescriptors,\r\n                objectDefinitions: transforms.objects,\r\n                colorAllocatorFactory: colorAllocatorFactory,\r\n                transformSelects: transforms.selects,\r\n                metadata: prototype.metadata,\r\n                projectionActiveItems: projectionActiveItems,\r\n            });\r\n\r\n            return visualDataViews;\r\n        }\r\n\r\n        function transformQueryToVisualDataView(\r\n            prototype: DataView,\r\n            transforms: DataViewTransformActions,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            dataViewMappings: DataViewMapping[],\r\n            colorAllocatorFactory: IColorAllocatorFactory,\r\n            dataRoles: VisualDataRole[]): DataView[] {\r\n            let transformedDataViews: DataView[] = [];\r\n            let splits = transforms.splits;\r\n            if (_.isEmpty(splits)) {\r\n                transformedDataViews.push(transformDataView(prototype, objectDescriptors, dataViewMappings, transforms, colorAllocatorFactory, dataRoles));\r\n            } else {\r\n                for (let split of splits) {\r\n                    let transformed = transformDataView(prototype, objectDescriptors, dataViewMappings, transforms, colorAllocatorFactory, dataRoles, split.selects);\r\n                    transformedDataViews.push(transformed);\r\n                }\r\n            }\r\n            return transformedDataViews;\r\n        }\r\n\r\n        function transformEmptyDataView(objectDescriptors: DataViewObjectDescriptors, transforms: DataViewTransformActions, colorAllocatorFactory: IColorAllocatorFactory): DataView[] {\r\n            if (transforms && transforms.objects) {\r\n                let emptyDataView: DataView = {\r\n                    metadata: {\r\n                        columns: [],\r\n                    }\r\n                };\r\n\r\n                transformObjects(\r\n                    emptyDataView,\r\n                    StandardDataViewKinds.None,\r\n                    objectDescriptors,\r\n                    transforms.objects,\r\n                    transforms.selects,\r\n                    colorAllocatorFactory);\r\n\r\n                return [emptyDataView];\r\n            }\r\n\r\n            return [];\r\n        }\r\n\r\n        function transformDataView(\r\n            prototype: DataView,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            roleMappings: DataViewMapping[],\r\n            transforms: DataViewTransformActions,\r\n            colorAllocatorFactory: IColorAllocatorFactory,\r\n            dataRoles: VisualDataRole[],\r\n            selectsToInclude?: INumberDictionary<boolean>): DataView {\r\n            debug.assertValue(prototype, 'prototype');\r\n\r\n            let targetKinds = getTargetKinds(roleMappings);\r\n            let transformed = inherit(prototype);\r\n            transformed.metadata = inherit(prototype.metadata);\r\n\r\n            let projectionOrdering = transforms.roles && transforms.roles.ordering;\r\n            let projectionActiveItems = transforms.roles && transforms.roles.activeItems;\r\n            transformed = transformSelects(transformed, roleMappings, transforms.selects, projectionOrdering, selectsToInclude);\r\n            transformObjects(transformed, targetKinds, objectDescriptors, transforms.objects, transforms.selects, colorAllocatorFactory);\r\n\r\n            // Note: Do this step after transformObjects() so that metadata columns in 'transformed' have roles and objects.general.formatString populated\r\n            transformed = DataViewConcatenateCategoricalColumns.detectAndApply(transformed, objectDescriptors, roleMappings, projectionOrdering, transforms.selects, projectionActiveItems);\r\n\r\n            DataViewNormalizeValues.apply({\r\n                dataview: transformed,\r\n                dataViewMappings: roleMappings,\r\n                dataRoles: dataRoles,\r\n            });\r\n\r\n            return transformed;\r\n        }\r\n\r\n        function getTargetKinds(roleMappings: DataViewMapping[]): StandardDataViewKinds {\r\n            debug.assertAnyValue(roleMappings, 'roleMappings');\r\n\r\n            if (!roleMappings)\r\n                return StandardDataViewKinds.None;\r\n\r\n            let result = StandardDataViewKinds.None;\r\n            for (let roleMapping of roleMappings) {\r\n                if (roleMapping.categorical)\r\n                    result |= StandardDataViewKinds.Categorical;\r\n                if (roleMapping.matrix)\r\n                    result |= StandardDataViewKinds.Matrix;\r\n                if (roleMapping.single)\r\n                    result |= StandardDataViewKinds.Single;\r\n                if (roleMapping.table)\r\n                    result |= StandardDataViewKinds.Table;\r\n                if (roleMapping.tree)\r\n                    result |= StandardDataViewKinds.Tree;\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function transformSelects(\r\n            dataView: DataView,\r\n            roleMappings: DataViewMapping[],\r\n            selectTransforms: DataViewSelectTransform[],\r\n            projectionOrdering?: DataViewProjectionOrdering,\r\n            selectsToInclude?: INumberDictionary<boolean>): DataView {\r\n\r\n            let columnRewrites: ValueRewrite<DataViewMetadataColumn>[] = [];\r\n            if (selectTransforms) {\r\n                dataView.metadata.columns = applyTransformsToColumns(\r\n                    dataView.metadata.columns,\r\n                    selectTransforms,\r\n                    columnRewrites);\r\n            }\r\n\r\n            // NOTE: no rewrites necessary for Tree (it doesn't reference the columns)\r\n            if (dataView.categorical) {\r\n                dataView.categorical = applyRewritesToCategorical(dataView.categorical, columnRewrites, selectsToInclude);\r\n\r\n                // TODO VSTS 7024199: separate out structural transformations from dataViewTransform.transformSelects(...)\r\n                // NOTE: This is slightly DSR-specific.\r\n                dataView = pivotIfNecessary(dataView, roleMappings);\r\n            }\r\n\r\n            if (dataView.matrix) {\r\n                let matrixTransformationContext: MatrixTransformationContext = {\r\n                    rowHierarchyRewritten: false,\r\n                    columnHierarchyRewritten: false,\r\n                    hierarchyTreesRewritten: false\r\n                };\r\n                dataView.matrix = applyRewritesToMatrix(dataView.matrix, columnRewrites, roleMappings, projectionOrdering, matrixTransformationContext);\r\n\r\n                // TODO VSTS 7024199: separate out structural transformations from dataViewTransform.transformSelects(...)\r\n                if (shouldPivotMatrix(dataView.matrix, roleMappings))\r\n                    DataViewPivotMatrix.apply(dataView.matrix, matrixTransformationContext);\r\n            }\r\n\r\n            if (dataView.table)\r\n                dataView.table = applyRewritesToTable(dataView.table, columnRewrites, roleMappings, projectionOrdering);\r\n\r\n            return dataView;\r\n        }\r\n\r\n        function applyTransformsToColumns(\r\n            prototypeColumns: DataViewMetadataColumn[],\r\n            selects: DataViewSelectTransform[],\r\n            rewrites: ValueRewrite<DataViewMetadataColumn>[]): DataViewMetadataColumn[] {\r\n            debug.assertValue(prototypeColumns, 'columns');\r\n\r\n            if (!selects)\r\n                return prototypeColumns;\r\n\r\n            //column may contain undefined entries\r\n            let columns = inherit(prototypeColumns);\r\n\r\n            for (let i = 0, len = prototypeColumns.length; i < len; i++) {\r\n                let prototypeColumn = prototypeColumns[i];\r\n                let select = selects[prototypeColumn.index];\r\n                if (!select)\r\n                    continue;\r\n\r\n                let column: DataViewMetadataColumn = columns[i] = inherit(prototypeColumn);\r\n\r\n                if (select.roles)\r\n                    column.roles = select.roles;\r\n                if (select.type)\r\n                    column.type = select.type;\r\n                column.format = getFormatForColumn(select, column);\r\n\r\n                if (select.displayName)\r\n                    column.displayName = select.displayName;\r\n                if (select.queryName)\r\n                    column.queryName = select.queryName;\r\n                if (select.kpi)\r\n                    column.kpi = select.kpi;\r\n                if (select.sort)\r\n                    column.sort = select.sort;\r\n                if (select.discourageAggregationAcrossGroups)\r\n                    column.discourageAggregationAcrossGroups = select.discourageAggregationAcrossGroups;\r\n\r\n                rewrites.push({\r\n                    from: prototypeColumn,\r\n                    to: column,\r\n                });\r\n            }\r\n\r\n            return columns;\r\n        }\r\n\r\n        /**\r\n         * Get the column format. Order of precendence is:\r\n         *  1. Select format\r\n         *  2. Column format\r\n         */\r\n        function getFormatForColumn(select: DataViewSelectTransform, column: DataViewMetadataColumn): string {\r\n            // TODO: we already copied the select.Format to column.format, we probably don't need this check\r\n            return select.format || column.format;\r\n        }\r\n\r\n        function applyRewritesToCategorical(prototype: DataViewCategorical, columnRewrites: ValueRewrite<DataViewMetadataColumn>[], selectsToInclude?: INumberDictionary<boolean>): DataViewCategorical {\r\n            debug.assertValue(prototype, 'prototype');\r\n            debug.assertValue(columnRewrites, 'columnRewrites');\r\n\r\n            let categorical = inherit(prototype);\r\n\r\n            function override(value: { source?: DataViewMetadataColumn }) {\r\n                let rewrittenSource = findOverride(value.source, columnRewrites);\r\n                if (rewrittenSource) {\r\n                    let rewritten = inherit(value);\r\n                    rewritten.source = rewrittenSource;\r\n                    return rewritten;\r\n                }\r\n            }\r\n\r\n            let categories = Prototype.overrideArray(prototype.categories, override);\r\n            if (categories)\r\n                categorical.categories = categories;\r\n\r\n            let valuesOverride = Prototype.overrideArray(prototype.values, override);\r\n            let values = valuesOverride || prototype.values;\r\n\r\n            if (values) {\r\n                let grouped = inherit(values.grouped());\r\n                for (let i = 0, ilen = grouped.length; i < ilen; i++) {\r\n                    grouped[i] = inherit(grouped[i]);\r\n                }\r\n                if (selectsToInclude) {\r\n                    // Apply selectsToInclude to values by removing value columns not included\r\n                    for (let i = values.length - 1; i >= 0; i--) {\r\n                        if (!selectsToInclude[values[i].source.index]) {\r\n                            values.splice(i, 1);\r\n                        }\r\n                    }\r\n\r\n                    // Apply selectsToInclude to grouped()\r\n                    if (values.length > 0 && values[0].identity) {\r\n                        // We have a dynamic series, so we should remove any value columns not included in the split from each\r\n                        //    valueColumnGroup\r\n                        for (let i = 0, ilen = grouped.length ; i < ilen; i++) {\r\n                            let currentGroupValues = grouped[i].values;\r\n                            for (let j = currentGroupValues.length - 1; j >= 0; j--) {\r\n                                if (!selectsToInclude[currentGroupValues[j].source.index])\r\n                                    currentGroupValues.splice(i, 1);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        // We are in a static series, so we should throw away the grouped and recreate it using the static values\r\n                        //   which have already been filtered\r\n                        grouped = [];\r\n                        grouped[0] = {\r\n                            values: values,\r\n                        };\r\n                    }\r\n                }\r\n\r\n                if (values.source) {\r\n                    if (selectsToInclude && !selectsToInclude[values.source.index]) {\r\n                        values.source = undefined;\r\n                    }\r\n                    else {\r\n                        let rewrittenValuesSource = findOverride(values.source, columnRewrites);\r\n                        if (rewrittenValuesSource)\r\n                            values.source = rewrittenValuesSource;\r\n                    }\r\n                }\r\n\r\n                let currentGroupIndex = 0;\r\n                let group: DataViewValueColumnGroup;\r\n                for (let i = 0, ilen = values.length; i < ilen; i++) {\r\n                    let currentValue = values[i];\r\n                    if (!group || (currentValue.identity !== group.identity)) {\r\n                        group = inherit(grouped[currentGroupIndex]);\r\n                        grouped[currentGroupIndex] = group;\r\n                        group.values = [];\r\n                        currentGroupIndex++;\r\n                    }\r\n                    group.values.push(currentValue);\r\n                }\r\n\r\n                categorical.values = values;\r\n                setGrouped(values, grouped);\r\n            }\r\n\r\n            return categorical;\r\n        }\r\n\r\n        function applyRewritesToTable(\r\n            prototype: DataViewTable,\r\n            columnRewrites: ValueRewrite<DataViewMetadataColumn>[],\r\n            roleMappings: DataViewMapping[],\r\n            projectionOrdering: DataViewProjectionOrdering): DataViewTable {\r\n            debug.assertValue(prototype, 'prototype');\r\n            debug.assertValue(columnRewrites, 'columnRewrites');\r\n\r\n            // Don't perform this potentially expensive transform unless we actually have a table.\r\n            // When we switch to lazy per-visual DataView creation, we'll be able to remove this check.\r\n            if (!roleMappings || roleMappings.length !== 1 || !roleMappings[0].table)\r\n                return prototype;\r\n\r\n            let table = inherit(prototype);\r\n\r\n            // Copy the rewritten columns into the table view\r\n            let override = (metadata: DataViewMetadataColumn) => findOverride(metadata, columnRewrites);\r\n            let columns = Prototype.overrideArray(prototype.columns, override);\r\n            if (columns)\r\n                table.columns = columns;\r\n\r\n            if (!projectionOrdering)\r\n                return table;\r\n\r\n            let newToOldPositions = createTableColumnPositionMapping(projectionOrdering, columnRewrites);\r\n            if (!newToOldPositions)\r\n                return table;\r\n\r\n            // Reorder the columns\r\n            let columnsClone = columns.slice(0);\r\n            let keys = Object.keys(newToOldPositions);\r\n            for (let i = 0, len = keys.length; i < len; i++) {\r\n                let sourceColumn = columnsClone[newToOldPositions[keys[i]]];\r\n\r\n                // In the case we've hit the end of our columns array, but still have position reordering keys,\r\n                // there is a duplicate column so we will need to add a new column for the duplicate data\r\n                if (i === columns.length)\r\n                    columns.push(sourceColumn);\r\n                else {\r\n                    debug.assert(i < columns.length, 'The column index is out of range for reordering.');\r\n                    columns[i] = sourceColumn;\r\n                }\r\n            }\r\n\r\n            // Reorder the rows\r\n            let rows = Prototype.overrideArray(table.rows,\r\n                (row: any[]) => {\r\n                    let newRow: any[] = [];\r\n                    for (let i = 0, len = keys.length; i < len; ++i)\r\n                        newRow[i] = row[newToOldPositions[keys[i]]];\r\n\r\n                    return newRow;\r\n                });\r\n\r\n            if (rows)\r\n                table.rows = rows;\r\n\r\n            return table;\r\n        }\r\n\r\n        /** Creates a mapping of new position to original position. */\r\n        function createTableColumnPositionMapping(\r\n            projectionOrdering: DataViewProjectionOrdering,\r\n            columnRewrites: ValueRewrite<DataViewMetadataColumn>[]): NumberToNumberMapping {\r\n            let roles = Object.keys(projectionOrdering);\r\n\r\n            // If we have more than one role then the ordering of columns between roles is ambiguous, so don't reorder anything.\r\n            if (roles.length !== 1)\r\n                return;\r\n\r\n            let role = roles[0],\r\n                originalOrder = _.map(columnRewrites, (rewrite: ValueRewrite<DataViewMetadataColumn>) => rewrite.from.index),\r\n                newOrder = projectionOrdering[role];\r\n\r\n            return createOrderMapping(originalOrder, newOrder);\r\n        }\r\n\r\n        function applyRewritesToMatrix(\r\n            prototype: DataViewMatrix,\r\n            columnRewrites: ValueRewrite<DataViewMetadataColumn>[],\r\n            roleMappings: DataViewMapping[],\r\n            projectionOrdering: DataViewProjectionOrdering,\r\n            context: MatrixTransformationContext): DataViewMatrix {\r\n            debug.assertValue(prototype, 'prototype');\r\n            debug.assertValue(columnRewrites, 'columnRewrites');\r\n\r\n            // Don't perform this potentially expensive transform unless we actually have a matrix.\r\n            // When we switch to lazy per-visual DataView creation, we'll be able to remove this check.\r\n            if (!roleMappings || roleMappings.length < 1 || !(roleMappings[0].matrix || (roleMappings[1] && roleMappings[1].matrix)))\r\n                return prototype;\r\n\r\n            let matrixMapping = roleMappings[0].matrix || roleMappings[1].matrix;\r\n            let matrix = inherit(prototype);\r\n\r\n            function override(metadata: DataViewMetadataColumn) {\r\n                return findOverride(metadata, columnRewrites);\r\n            }\r\n\r\n            function overrideHierarchy(hierarchy: DataViewHierarchy): DataViewHierarchy {\r\n                let rewrittenHierarchy: DataViewHierarchy = null;\r\n\r\n                let newLevels = Prototype.overrideArray(\r\n                    hierarchy.levels,\r\n                    (level: DataViewHierarchyLevel) => {\r\n                        let newLevel: DataViewHierarchyLevel = null;\r\n                        let levelSources = Prototype.overrideArray(level.sources, override);\r\n                        if (levelSources)\r\n                            newLevel = ensureRewritten<DataViewHierarchyLevel>(newLevel, level, h => h.sources = levelSources);\r\n\r\n                        return newLevel;\r\n                    });\r\n                if (newLevels)\r\n                    rewrittenHierarchy = ensureRewritten<DataViewHierarchy>(rewrittenHierarchy, hierarchy, r => r.levels = newLevels);\r\n\r\n                return rewrittenHierarchy;\r\n            }\r\n\r\n            let rows = overrideHierarchy(matrix.rows);\r\n            if (rows) {\r\n                matrix.rows = rows;\r\n                context.rowHierarchyRewritten = true;\r\n            }\r\n\r\n            let columns = overrideHierarchy(matrix.columns);\r\n            if (columns) {\r\n                matrix.columns = columns;\r\n                context.columnHierarchyRewritten = true;\r\n            }\r\n\r\n            let valueSources = Prototype.overrideArray(matrix.valueSources, override);\r\n            if (valueSources) {\r\n                matrix.valueSources = valueSources;\r\n\r\n                // Only need to reorder if we have more than one value source, and they are all bound to the same role\r\n                let matrixValues = <DataViewRoleForMapping>matrixMapping.values;\r\n                if (projectionOrdering && valueSources.length > 1 && matrixValues && matrixValues.for) {\r\n                    let columnLevels = columns.levels.length;\r\n                    if (columnLevels > 0) {\r\n                        let newToOldPositions = createMatrixValuesPositionMapping(matrixValues, projectionOrdering, valueSources, columnRewrites);\r\n                        if (newToOldPositions) {\r\n                            let keys = Object.keys(newToOldPositions);\r\n                            let numKeys = keys.length;\r\n\r\n                            // Reorder the value columns\r\n                            columns.root = DataViewPivotMatrix.cloneTree(columns.root);\r\n                            if (columnLevels === 1)\r\n                                reorderChildNodes(columns.root, newToOldPositions);\r\n                            else\r\n                                forEachNodeAtLevel(columns.root, columnLevels - 2, (node: DataViewMatrixNode) => reorderChildNodes(node, newToOldPositions));\r\n\r\n                            // Reorder the value rows\r\n                            matrix.rows.root = DataViewPivotMatrix.cloneTreeExecuteOnLeaf(matrix.rows.root, (node: DataViewMatrixNode) => {\r\n\r\n                                if (!node.values)\r\n                                    return;\r\n\r\n                                let newValues: { [id: number]: DataViewTreeNodeValue } = {};\r\n\r\n                                let iterations = Object.keys(node.values).length / numKeys;\r\n                                for (let i = 0, len = iterations; i < len; i++) {\r\n                                    let offset = i * numKeys;\r\n                                    for (let keysIndex = 0; keysIndex < numKeys; keysIndex++)\r\n                                        newValues[offset + keysIndex] = node.values[offset + newToOldPositions[keys[keysIndex]]];\r\n                                }\r\n\r\n                                node.values = newValues;\r\n                            });\r\n\r\n                            context.hierarchyTreesRewritten = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            reorderMatrixCompositeGroups(matrix, matrixMapping, projectionOrdering);\r\n\r\n            return matrix;\r\n        }\r\n\r\n        function reorderChildNodes(node: DataViewMatrixNode, newToOldPositions: NumberToNumberMapping): void {\r\n            let keys = Object.keys(newToOldPositions);\r\n            let numKeys = keys.length;\r\n            let children = node.children;\r\n\r\n            let childrenClone = children.slice(0);\r\n            for (let i = 0, len = numKeys; i < len; i++) {\r\n                let sourceColumn = childrenClone[newToOldPositions[keys[i]]];\r\n\r\n                // In the case we've hit the end of our columns array, but still have position reordering keys,\r\n                // there is a duplicate column so we will need to add a new column for the duplicate data\r\n                if (i === children.length)\r\n                    children.push(sourceColumn);\r\n                else {\r\n                    debug.assert(i < children.length, 'The column index is out of range for reordering.');\r\n                    children[i] = sourceColumn;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns a inheritSingle() version of the specified prototype DataViewMatrix with any composite group levels\r\n         * and values re-ordered by projection ordering.\r\n         * Returns undefined if no re-ordering under the specified prototype is necessary.\r\n         */\r\n        function reorderMatrixCompositeGroups(\r\n            prototype: DataViewMatrix,\r\n            supportedDataViewMapping: DataViewMatrixMapping,\r\n            projection: DataViewProjectionOrdering): DataViewMatrix {\r\n\r\n            let transformedDataView: DataViewMatrix;\r\n\r\n            if (prototype && supportedDataViewMapping && projection) {\r\n\r\n                // reorder levelValues in any composite groups in rows hierarchy\r\n                let transformedRowsHierarchy: DataViewHierarchy;\r\n                DataViewMapping.visitMatrixItems(supportedDataViewMapping.rows, {\r\n                    visitRole: (role: string, context?: RoleItemContext): void => {\r\n                        transformedRowsHierarchy = reorderMatrixHierarchyCompositeGroups(\r\n                            transformedRowsHierarchy || prototype.rows,\r\n                            role,\r\n                            projection);\r\n                    }\r\n                });\r\n\r\n                // reorder levelValues in any composite groups in columns hierarchy\r\n                let transformedColumnsHierarchy: DataViewHierarchy;\r\n                DataViewMapping.visitMatrixItems(supportedDataViewMapping.columns, {\r\n                    visitRole: (role: string, context?: RoleItemContext): void => {\r\n                        transformedColumnsHierarchy = reorderMatrixHierarchyCompositeGroups(\r\n                            transformedColumnsHierarchy || prototype.columns,\r\n                            role,\r\n                            projection);\r\n                    }\r\n                });\r\n\r\n                if (transformedRowsHierarchy || transformedColumnsHierarchy) {\r\n                    transformedDataView = inheritSingle(prototype);\r\n                    transformedDataView.rows = transformedRowsHierarchy || transformedDataView.rows;\r\n                    transformedDataView.columns = transformedColumnsHierarchy || transformedDataView.columns;\r\n                }\r\n            }\r\n\r\n            return transformedDataView;\r\n        }\r\n\r\n        /**\r\n         * Returns a inheritSingle() version of the specified matrixHierarchy with any composite group levels and\r\n         * values re-ordered by projection ordering.\r\n         * Returns undefined if no re-ordering under the specified matrixHierarchy is necessary.\r\n         */\r\n        function reorderMatrixHierarchyCompositeGroups(\r\n            matrixHierarchy: DataViewHierarchy,\r\n            hierarchyRole: string,\r\n            projection: DataViewProjectionOrdering): DataViewHierarchy {\r\n            debug.assertValue(matrixHierarchy, 'matrixHierarchy');\r\n            debug.assertValue(hierarchyRole, 'hierarchyRole');\r\n            debug.assertValue(projection, 'projection');\r\n\r\n            let transformedHierarchy: DataViewHierarchy;\r\n            let selectIndicesInProjectionOrder: number[] = projection[hierarchyRole];\r\n\r\n            // reordering needs to happen only if there are multiple columns for the hierarchy's role in the projection\r\n            let hasMultipleColumnsInProjection = selectIndicesInProjectionOrder && selectIndicesInProjectionOrder.length >= 2;\r\n            if (hasMultipleColumnsInProjection && !_.isEmpty(matrixHierarchy.levels)) {\r\n                for (let i = matrixHierarchy.levels.length - 1; i >= 0; i--) {\r\n                    var hierarchyLevel: DataViewHierarchyLevel = matrixHierarchy.levels[i];\r\n\r\n                    // compute a mapping for any necessary reordering of columns at this given level, based on projection ordering\r\n                    let newToOldLevelSourceIndicesMapping: NumberToNumberMapping =\r\n                        createMatrixHierarchyLevelSourcesPositionMapping(hierarchyLevel, hierarchyRole, projection);\r\n\r\n                    if (newToOldLevelSourceIndicesMapping) {\r\n                        if (_.isUndefined(transformedHierarchy)) {\r\n                            // Because we start inspecting the hierarchy from the deepest level and work backwards to the root,\r\n                            // the current hierarchyLevel is therefore the inner-most level that needs re-ordering of composite group values...\r\n                            transformedHierarchy = inheritSingle(matrixHierarchy);\r\n                            transformedHierarchy.levels = inheritSingle(matrixHierarchy.levels);\r\n\r\n                            // Because the current hierarchyLevel is the inner-most level that needs re-ordering of composite group values,\r\n                            // inheriting all nodes from root down to this level will also prepare the nodes for any transform that needs to\r\n                            // happen in other hierarchy levels in the later iterations of this for-loop.\r\n                            transformedHierarchy.root = utils.DataViewMatrixUtils.inheritMatrixNodeHierarchy(matrixHierarchy.root, i, true);\r\n                        }\r\n\r\n                        // reorder the metadata columns in the sources array at that level\r\n                        let transformingHierarchyLevel = inheritSingle(matrixHierarchy.levels[i]); // inherit at most once during the whole dataViewTransform for this obj...\r\n                        transformedHierarchy.levels[i] = reorderMatrixHierarchyLevelColumnSources(transformingHierarchyLevel, newToOldLevelSourceIndicesMapping);\r\n\r\n                        // reorder the level values in the composite group nodes at the current hierarchy level\r\n                        reorderMatrixHierarchyLevelValues(transformedHierarchy.root, i, newToOldLevelSourceIndicesMapping);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return transformedHierarchy;\r\n        }\r\n\r\n        /**\r\n         * If reordering is needed on the level's metadata column sources (i.e. hierarchyLevel.sources),\r\n         * returns the mapping from the target LevelSourceIndex (based on projection order) to original LevelSourceIndex.\r\n         *\r\n         * The returned value maps level source indices from the new target order (calculated from projection order)\r\n         * back to the original order as they appear in the specified hierarchyLevel's sources.\r\n         * Please refer to comments on the createOrderMapping() function for more explanation on the mappings in the return value.\r\n         *\r\n         * Note: The return value is the mapping from new index to old index, for consistency with existing and similar functions in this module.\r\n         *\r\n         * @param hierarchyLevel The hierarchy level that contains the metadata column sources.\r\n         * @param hierarchyRoleName The role name for the hierarchy where the specified hierarchyLevel belongs.\r\n         * @param projection The projection ordering that includes an ordering for the specified hierarchyRoleName.\r\n         */\r\n        function createMatrixHierarchyLevelSourcesPositionMapping(\r\n            hierarchyLevel: DataViewHierarchyLevel,\r\n            hierarchyRole: string,\r\n            projection: DataViewProjectionOrdering): NumberToNumberMapping {\r\n            debug.assertValue(hierarchyLevel, 'hierarchyLevel');\r\n            debug.assertValue(hierarchyRole, 'hierarchyRole');\r\n            debug.assertValue(projection, 'projection');\r\n            debug.assertValue(projection[hierarchyRole], 'pre-condition: The specified projection must contain an ordering for the specified hierarchyRoleName.');\r\n\r\n            let newToOldLevelSourceIndicesMapping: NumberToNumberMapping;\r\n            let levelSourceColumns = hierarchyLevel.sources;\r\n\r\n            if (levelSourceColumns && levelSourceColumns.length >= 2) {\r\n                // The hierarchy level has multiple columns, so it is possible to have composite group, go on to check other conditions...\r\n\r\n                let columnsForHierarchyRoleOrderedByLevelSourceIndex = utils.DataViewMetadataColumnUtils.joinMetadataColumnsAndProjectionOrder(\r\n                    levelSourceColumns,\r\n                    projection,\r\n                    hierarchyRole);\r\n\r\n                if (columnsForHierarchyRoleOrderedByLevelSourceIndex && columnsForHierarchyRoleOrderedByLevelSourceIndex.length >= 2) {\r\n                    // The hierarchy level has multiple columns for the hierarchy's role, go on to calculate newToOldLevelSourceIndicesMapping...\r\n                    let columnsForHierarchyRoleOrderedByProjection = _.sortBy(\r\n                        columnsForHierarchyRoleOrderedByLevelSourceIndex,\r\n                        columnInfo => columnInfo.projectionOrderIndex);\r\n\r\n                    newToOldLevelSourceIndicesMapping = createOrderMapping(\r\n                        _.map(columnsForHierarchyRoleOrderedByLevelSourceIndex, columnInfo => columnInfo.sourceIndex),\r\n                        _.map(columnsForHierarchyRoleOrderedByProjection, columnInfo => columnInfo.sourceIndex));\r\n                }\r\n            }\r\n\r\n            return newToOldLevelSourceIndicesMapping;\r\n        }\r\n\r\n        /**\r\n         * Applies re-ordering on the specified transformingHierarchyLevel's sources.\r\n         * Returns the same object as the specified transformingHierarchyLevel.\r\n         */\r\n        function reorderMatrixHierarchyLevelColumnSources(transformingHierarchyLevel: DataViewHierarchyLevel, newToOldLevelSourceIndicesMapping: NumberToNumberMapping): DataViewHierarchyLevel {\r\n            debug.assertValue(transformingHierarchyLevel, 'transformingHierarchyLevel');\r\n            debug.assertValue(newToOldLevelSourceIndicesMapping, 'newToOldLevelSourceIndicesMapping');\r\n\r\n            let originalLevelSources = transformingHierarchyLevel.sources;\r\n\r\n            transformingHierarchyLevel.sources = originalLevelSources.slice(0); // make a clone of the array before modifying it, because the for-loop depends on the origin array.\r\n\r\n            let newLevelSourceIndices = Object.keys(newToOldLevelSourceIndicesMapping);\r\n            for (let i = 0, ilen = newLevelSourceIndices.length; i < ilen; i++) {\r\n                let newLevelSourceIndex = newLevelSourceIndices[i];\r\n                let oldLevelSourceIndex = newToOldLevelSourceIndicesMapping[newLevelSourceIndex];\r\n\r\n                debug.assert(oldLevelSourceIndex < originalLevelSources.length,\r\n                    'pre-condition: The value in every mapping in the specified levelSourceIndicesReorderingMap must be a valid index to the specified hierarchyLevel.sources array property');\r\n\r\n                transformingHierarchyLevel.sources[newLevelSourceIndex] = originalLevelSources[oldLevelSourceIndex];\r\n            }\r\n\r\n            return transformingHierarchyLevel;\r\n        }\r\n\r\n        /**\r\n         * Reorders the elements in levelValues in each node under transformingHierarchyRootNode at the specified hierarchyLevel,\r\n         * and updates their DataViewMatrixGroupValue.levelSourceIndex property.\r\n         *\r\n         * Returns the same object as the specified transformingHierarchyRootNode.\r\n         */\r\n        function reorderMatrixHierarchyLevelValues(\r\n            transformingHierarchyRootNode: DataViewMatrixNode,\r\n            transformingHierarchyLevelIndex: number,\r\n            newToOldLevelSourceIndicesMapping: NumberToNumberMapping): DataViewMatrixNode {\r\n            debug.assertValue(transformingHierarchyRootNode, 'transformingHierarchyRootNode');\r\n            debug.assertValue(newToOldLevelSourceIndicesMapping, 'newToOldLevelSourceIndicesMapping');\r\n\r\n            let oldToNewLevelSourceIndicesMapping: NumberToNumberMapping = createReversedMapping(newToOldLevelSourceIndicesMapping);\r\n\r\n            forEachNodeAtLevel(transformingHierarchyRootNode, transformingHierarchyLevelIndex, (transformingMatrixNode: DataViewMatrixNode) => {\r\n                let originalLevelValues = transformingMatrixNode.levelValues;\r\n\r\n                // Note: Technically this function is incorrect, because the driving source of the new LevelValues is really\r\n                // the \"projection for this composite group\", a concept that isn't yet implemented in DataViewProjectionOrdering.\r\n                // The following code isn't correct in the special case where a column is projected twice in this composite group,\r\n                // in which case the DSR will not have the duplicate columns; DataViewTransform is supposed to expand the duplicates.\r\n                // Until we fully implement composite group projection, though, we'll just sort what we have in transformingMatrixNode.levelValues.\r\n\r\n                if (!_.isEmpty(originalLevelValues)) {\r\n                    // First, re-order the elements in transformingMatrixNode.levelValues by the new levelSourceIndex order.\r\n                    // _.sortBy() also creates a new array, which we want to do for all nodes (including when levelValues.length === 1)\r\n                    // because we don't want to accidentally modify the array AND its value references in Query DataView\r\n                    let newlyOrderedLevelValues = _.sortBy(originalLevelValues, levelValue => oldToNewLevelSourceIndicesMapping[levelValue.levelSourceIndex]);\r\n\r\n                    for (let i = 0, ilen = newlyOrderedLevelValues.length; i < ilen; i++) {\r\n                        let transformingLevelValue = inheritSingle(newlyOrderedLevelValues[i]);\r\n                        transformingLevelValue.levelSourceIndex = oldToNewLevelSourceIndicesMapping[transformingLevelValue.levelSourceIndex];\r\n                        newlyOrderedLevelValues[i] = transformingLevelValue;\r\n                    }\r\n\r\n                    transformingMatrixNode.levelValues = newlyOrderedLevelValues;\r\n\r\n                    // For consistency with how DataViewTreeNode.value works, and for a bit of backward compatibility,\r\n                    // copy the last value from DataViewMatrixNode.levelValues to DataViewMatrixNode.value.\r\n                    let newlyOrderedLastLevelValue = _.last(newlyOrderedLevelValues);\r\n                    if (transformingMatrixNode.value !== newlyOrderedLastLevelValue.value) {\r\n                        transformingMatrixNode.value = newlyOrderedLastLevelValue.value;\r\n                    }\r\n                    if ((transformingMatrixNode.levelSourceIndex || 0) !== newlyOrderedLastLevelValue.levelSourceIndex) {\r\n                        transformingMatrixNode.levelSourceIndex = newlyOrderedLastLevelValue.levelSourceIndex;\r\n                    }\r\n                }\r\n            });\r\n\r\n            return transformingHierarchyRootNode;\r\n        }\r\n\r\n        /**\r\n         * Creates a mapping of new position to original position.\r\n         *\r\n         * The return value is a mapping where each key-value pair represent the order  mapping of a particular column:\r\n         * - the key in the key-value pair is the index of the particular column in the new order (e.g. projection order)\r\n         * - the value in the key-value pair is the index of the particular column in the original order\r\n         */\r\n        function createMatrixValuesPositionMapping(\r\n            matrixValues: DataViewRoleForMapping,\r\n            projectionOrdering: DataViewProjectionOrdering,\r\n            valueSources: DataViewMetadataColumn[],\r\n            columnRewrites: ValueRewrite<DataViewMetadataColumn>[]): NumberToNumberMapping {\r\n\r\n            let role = matrixValues.for.in;\r\n            let newOrder = projectionOrdering[role];\r\n\r\n            let originalOrder = _.chain(columnRewrites)\r\n                .filter(rewrite => _.contains(valueSources, rewrite.to))\r\n                .map(rewrite => rewrite.from.index)\r\n                .value();\r\n\r\n            return createOrderMapping(originalOrder, newOrder);\r\n        }\r\n\r\n        /**\r\n         * Creates a mapping of indices, from indices to the specified newOrder array, back to indices to the specified\r\n         * originalOrder array.\r\n         * Each of the number value in originalOrder and newOrder is actually the unique key of a column (unqiue\r\n         * under the context of the caller code), e.g. the Select Index in projection ordering array.\r\n         * Also, the specified originalOrder must contain every value that exists in newOrder.\r\n         *\r\n         * If the specified originalOrder and newOrder are different in sequence order, then this function returns a collection of\r\n         * key-value pair, each of which represents the new and old indices of a particular column:\r\n         * - the key in each key-value pair is the index of the particular column key as it exists in the specified newOrder array\r\n         * - the value in each key-value pair is the index of the particular column key as it exists in the specified originalOrder array\r\n         *\r\n         * For example on how the return value is consumed, see functions such as reorderMatrixHierarchyLevelColumnSources(...).\r\n         *\r\n         * If the specified originalOrder and newOrder are same, then this function returns undefined.\r\n         *\r\n         * @param originalOrder E.g. an array of metadata column \"select indices\", in the original order as they exist in Query DataView.\r\n         * @param newOrder E.g. an array of metadata column \"select indices\", in rojection ordering.\r\n         */\r\n        function createOrderMapping(originalOrder: number[], newOrder: number[]): NumberToNumberMapping {\r\n            // Optimization: avoid rewriting if the current order is correct\r\n            if (ArrayExtensions.sequenceEqual(originalOrder, newOrder, (x: number, y: number) => x === y))\r\n                return;\r\n\r\n            let mapping: NumberToNumberMapping = {};\r\n            for (let i = 0, len = newOrder.length; i < len; ++i) {\r\n                let newPosition = newOrder[i];\r\n                mapping[i] = originalOrder.indexOf(newPosition);\r\n            }\r\n\r\n            return mapping;\r\n        }\r\n\r\n        function createReversedMapping(mapping: NumberToNumberMapping): NumberToNumberMapping {\r\n            debug.assertValue(mapping, 'mapping');\r\n\r\n            let reversed: NumberToNumberMapping = {};\r\n\r\n            for (let key in mapping) {\r\n                // Note: key is a string after we get it out from mapping, thus we need to parse it\r\n                // back into a number before putting it as the value in the reversed mapping\r\n                let value = mapping[key];\r\n                let keyAsNumber = parseInt(key, 10);\r\n                reversed[value] = keyAsNumber;\r\n            }\r\n\r\n            debug.assertValue(Object.keys(mapping).length === Object.keys(reversed).length,\r\n                'pre-condition: The specified mapping must not contain any duplicate value because duplicate values are obmitted from the reversed mapping.');\r\n\r\n            return reversed;\r\n        }\r\n\r\n        export function forEachNodeAtLevel(node: DataViewMatrixNode, targetLevel: number, callback: (node: DataViewMatrixNode) => void): void {\r\n            debug.assertValue(node, 'node');\r\n            debug.assert(targetLevel >= 0, 'argetLevel >= 0');\r\n            debug.assertValue(callback, 'callback');\r\n\r\n            if (node.level === targetLevel) {\r\n                callback(node);\r\n                return;\r\n            }\r\n\r\n            let children = node.children;\r\n            if (children && children.length > 0) {\r\n                for (let i = 0, ilen = children.length; i < ilen; i++)\r\n                    forEachNodeAtLevel(children[i], targetLevel, callback);\r\n            }\r\n        }\r\n\r\n        function findOverride(source: DataViewMetadataColumn, columnRewrites: ValueRewrite<DataViewMetadataColumn>[]): DataViewMetadataColumn {\r\n            for (let i = 0, len = columnRewrites.length; i < len; i++) {\r\n                let columnRewrite = columnRewrites[i];\r\n                if (columnRewrite.from === source)\r\n                    return columnRewrite.to;\r\n            }\r\n        }\r\n\r\n        function ensureRewritten<T>(rewritten: T, prototype: T, callback?: (rewritten: T) => void): T {\r\n            if (!rewritten)\r\n                rewritten = inherit(prototype);\r\n\r\n            if (callback)\r\n                callback(rewritten);\r\n\r\n            return rewritten;\r\n        }\r\n\r\n        export function transformObjects(\r\n            dataView: DataView,\r\n            targetDataViewKinds: StandardDataViewKinds,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            objectDefinitions: DataViewObjectDefinitions,\r\n            selectTransforms: DataViewSelectTransform[],\r\n            colorAllocatorFactory: IColorAllocatorFactory): void {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(targetDataViewKinds, 'targetDataViewKinds');\r\n            debug.assertAnyValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertAnyValue(objectDefinitions, 'objectDefinitions');\r\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n\r\n            if (!objectDescriptors)\r\n                return;\r\n\r\n            let objectsForAllSelectors = DataViewObjectEvaluationUtils.groupObjectsBySelector(objectDefinitions);\r\n            DataViewObjectEvaluationUtils.addImplicitObjects(objectsForAllSelectors, objectDescriptors, dataView.metadata.columns, selectTransforms);\r\n\r\n            let metadataOnce = objectsForAllSelectors.metadataOnce;\r\n            let dataObjects = objectsForAllSelectors.data;\r\n            if (metadataOnce)\r\n                evaluateMetadataObjects(dataView, selectTransforms, objectDescriptors, metadataOnce.objects, dataObjects, colorAllocatorFactory);\r\n\r\n            let metadataObjects = objectsForAllSelectors.metadata;\r\n            if (metadataObjects) {\r\n                for (let i = 0, len = metadataObjects.length; i < len; i++) {\r\n                    let metadataObject = metadataObjects[i];\r\n                    let objectDefns = metadataObject.objects;\r\n                    let colorAllocatorCache = populateColorAllocatorCache(dataView, selectTransforms, objectDefns, colorAllocatorFactory);\r\n                    evaluateMetadataRepetition(dataView, selectTransforms, objectDescriptors, metadataObject.selector, objectDefns, colorAllocatorCache);\r\n                }\r\n            }\r\n\r\n            for (let i = 0, len = dataObjects.length; i < len; i++) {\r\n                let dataObject = dataObjects[i];\r\n                let objectDefns = dataObject.objects;\r\n                let colorAllocatorCache = populateColorAllocatorCache(dataView, selectTransforms, objectDefns, colorAllocatorFactory);\r\n                evaluateDataRepetition(dataView, targetDataViewKinds, selectTransforms, objectDescriptors, dataObject.selector, dataObject.rules, objectDefns, colorAllocatorCache);\r\n            }\r\n\r\n            let userDefined = objectsForAllSelectors.userDefined;\r\n            if (userDefined) {\r\n                // TODO: We only handle user defined objects at the metadata level, but should be able to support them with arbitrary repetition.\r\n                evaluateUserDefinedObjects(dataView, selectTransforms, objectDescriptors, userDefined, colorAllocatorFactory);\r\n            }\r\n        }\r\n\r\n        function evaluateUserDefinedObjects(\r\n            dataView: DataView,\r\n            selectTransforms: DataViewSelectTransform[],\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            objectDefns: DataViewObjectDefinitionsForSelector[],\r\n            colorAllocatorFactory: IColorAllocatorFactory): void {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n\r\n            let dataViewObjects: DataViewObjects = dataView.metadata.objects;\r\n            if (!dataViewObjects) {\r\n                dataViewObjects = dataView.metadata.objects = {};\r\n            }\r\n\r\n            for (let objectDefn of objectDefns) {\r\n                let id = objectDefn.selector.id;\r\n\r\n                let colorAllocatorCache = populateColorAllocatorCache(dataView, selectTransforms, objectDefn.objects, colorAllocatorFactory);\r\n                let evalContext = createStaticEvalContext(colorAllocatorCache, dataView, selectTransforms);\r\n                let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefn.objects);\r\n\r\n                for (let objectName in objects) {\r\n                    let object = <DataViewObject>objects[objectName];\r\n\r\n                    let map = <DataViewObjectMap>dataViewObjects[objectName];\r\n                    if (!map)\r\n                        map = dataViewObjects[objectName] = [];\r\n                    debug.assert(DataViewObjects.isUserDefined(map), 'expected DataViewObjectMap');\r\n\r\n                    // NOTE: We do not check for duplicate ids.\r\n                    map.push({ id: id, object: object });\r\n                }\r\n            }\r\n        }\r\n\r\n        /** Evaluates and sets properties on the DataView metadata. */\r\n        function evaluateMetadataObjects(\r\n            dataView: DataView,\r\n            selectTransforms: DataViewSelectTransform[],\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            objectDefns: DataViewNamedObjectDefinition[],\r\n            dataObjects: DataViewObjectDefinitionsForSelectorWithRule[],\r\n            colorAllocatorFactory: IColorAllocatorFactory): void {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n            debug.assertValue(dataObjects, 'dataObjects');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n\r\n            let colorAllocatorCache = populateColorAllocatorCache(dataView, selectTransforms, objectDefns, colorAllocatorFactory);\r\n            let evalContext = createStaticEvalContext(colorAllocatorCache, dataView, selectTransforms);\r\n            let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\r\n            if (objects) {\r\n                dataView.metadata.objects = objects;\r\n\r\n                for (let objectName in objects) {\r\n                    let object = <DataViewObject>objects[objectName],\r\n                        objectDesc = objectDescriptors[objectName];\r\n\r\n                    for (let propertyName in object) {\r\n                        let propertyDesc = objectDesc.properties[propertyName],\r\n                            ruleDesc = propertyDesc.rule;\r\n                        if (!ruleDesc)\r\n                            continue;\r\n\r\n                        let definition = createRuleEvaluationInstance(\r\n                            dataView,\r\n                            colorAllocatorFactory,\r\n                            ruleDesc,\r\n                            objectName,\r\n                            object[propertyName],\r\n                            propertyDesc.type);\r\n                        if (!definition)\r\n                            continue;\r\n\r\n                        dataObjects.push(definition);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function createRuleEvaluationInstance(\r\n            dataView: DataView,\r\n            colorAllocatorFactory: IColorAllocatorFactory,\r\n            ruleDesc: DataViewObjectPropertyRuleDescriptor,\r\n            objectName: string,\r\n            propertyValue: DataViewPropertyValue,\r\n            ruleType: StructuralTypeDescriptor): DataViewObjectDefinitionsForSelectorWithRule {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n            debug.assertValue(ruleDesc, 'ruleDesc');\r\n            debug.assertValue(propertyValue, 'propertyValue');\r\n            debug.assertValue(ruleType, 'ruleType');\r\n\r\n            let ruleOutput = ruleDesc.output;\r\n            if (!ruleOutput)\r\n                return;\r\n\r\n            let selectorToCreate = findSelectorForRuleInput(dataView, ruleOutput.selector);\r\n            if (!selectorToCreate)\r\n                return;\r\n\r\n            if (ruleType.fillRule) {\r\n                return createRuleEvaluationInstanceFillRule(dataView, colorAllocatorFactory, ruleDesc, selectorToCreate, objectName, <FillRule>propertyValue);\r\n            }\r\n        }\r\n\r\n        function createRuleEvaluationInstanceFillRule(\r\n            dataView: DataView,\r\n            colorAllocatorFactory: IColorAllocatorFactory,\r\n            ruleDesc: DataViewObjectPropertyRuleDescriptor,\r\n            selectorToCreate: Selector,\r\n            objectName: string,\r\n            propertyValue: FillRule): DataViewObjectDefinitionsForSelectorWithRule {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n            debug.assertValue(ruleDesc, 'ruleDesc');\r\n            debug.assertValue(selectorToCreate, 'selectorToCreate');\r\n            debug.assertValue(propertyValue, 'propertyValue');\r\n\r\n            let colorAllocator = tryCreateColorAllocatorForFillRule(dataView, colorAllocatorFactory, ruleDesc.inputRole, ColumnIdentifierKind.Role, propertyValue);\r\n\r\n            if (!colorAllocator)\r\n                return;\r\n\r\n            let rule = new ColorRuleEvaluation(ruleDesc.inputRole, colorAllocator);\r\n            let fillRuleProperties: DataViewObjectPropertyDefinitions = {};\r\n            fillRuleProperties[ruleDesc.output.property] = {\r\n                solid: { color: rule }\r\n            };\r\n\r\n            return {\r\n                selector: selectorToCreate,\r\n                rules: [rule],\r\n                objects: [{\r\n                    name: objectName,\r\n                    properties: fillRuleProperties,\r\n                }]\r\n            };\r\n        }\r\n\r\n        function tryCreateColorAllocatorForFillRule(\r\n            dataView: DataView,\r\n            colorAllocatorFactory: IColorAllocatorFactory,\r\n            identifier: string,\r\n            identifierKind: ColumnIdentifierKind,\r\n            propertyValue: FillRule): IColorAllocator {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n            debug.assertValue(identifier, 'identifier');\r\n            debug.assertValue(identifierKind, 'identifierKind');\r\n            debug.assertValue(propertyValue, 'propertyValue');\r\n\r\n            if (propertyValue.linearGradient2)\r\n                return createColorAllocatorLinearGradient2(dataView, colorAllocatorFactory, identifier, identifierKind, propertyValue, propertyValue.linearGradient2);\r\n\r\n            if (propertyValue.linearGradient3)\r\n                return createColorAllocatorLinearGradient3(dataView, colorAllocatorFactory, identifier, identifierKind, propertyValue, propertyValue.linearGradient3);\r\n        }\r\n\r\n        function createColorAllocatorLinearGradient2(\r\n            dataView: DataView,\r\n            colorAllocatorFactory: IColorAllocatorFactory,\r\n            identifier: string,\r\n            identifierKind: ColumnIdentifierKind,\r\n            propertyValueFillRule: FillRule,\r\n            linearGradient2: LinearGradient2): IColorAllocator {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n            debug.assertValue(identifier, 'identifier');\r\n            debug.assertValue(identifierKind, 'identifierKind');\r\n            debug.assertValue(linearGradient2, 'linearGradient2');\r\n\r\n            linearGradient2 = propertyValueFillRule.linearGradient2;\r\n            if (linearGradient2.min.value === undefined ||\r\n                linearGradient2.max.value === undefined) {\r\n                let inputRange = findRuleInputColumnNumberRange(dataView, identifier, identifierKind);\r\n                if (!inputRange)\r\n                    return;\r\n\r\n                if (linearGradient2.min.value === undefined)\r\n                    linearGradient2.min.value = inputRange.min;\r\n                if (linearGradient2.max.value === undefined)\r\n                    linearGradient2.max.value = inputRange.max;\r\n            }\r\n\r\n            return colorAllocatorFactory.linearGradient2(propertyValueFillRule.linearGradient2);\r\n        }\r\n\r\n        function createColorAllocatorLinearGradient3(\r\n            dataView: DataView,\r\n            colorAllocatorFactory: IColorAllocatorFactory,\r\n            identifier: string,\r\n            identifierKind: ColumnIdentifierKind,\r\n            propertyValueFillRule: FillRule,\r\n            linearGradient3: LinearGradient3): IColorAllocator {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n            debug.assertValue(identifier, 'identifier');\r\n            debug.assertValue(identifierKind, 'identifierKind');\r\n            debug.assertValue(linearGradient3, 'linearGradient3');\r\n\r\n            let splitScales: boolean;\r\n            linearGradient3 = propertyValueFillRule.linearGradient3;\r\n            if (linearGradient3.min.value === undefined ||\r\n                linearGradient3.mid.value === undefined ||\r\n                linearGradient3.max.value === undefined) {\r\n                let inputRange = findRuleInputColumnNumberRange(dataView, identifier, identifierKind);\r\n                if (!inputRange)\r\n                    return;\r\n\r\n                splitScales =\r\n                linearGradient3.min.value === undefined &&\r\n                linearGradient3.max.value === undefined &&\r\n                linearGradient3.mid.value !== undefined;\r\n\r\n                if (linearGradient3.min.value === undefined) {\r\n                    linearGradient3.min.value = inputRange.min;\r\n                }\r\n                if (linearGradient3.max.value === undefined) {\r\n                    linearGradient3.max.value = inputRange.max;\r\n                }\r\n                if (linearGradient3.mid.value === undefined) {\r\n                    let midValue: number = (linearGradient3.max.value + linearGradient3.min.value) / 2;\r\n                    linearGradient3.mid.value = midValue;\r\n                }\r\n            }\r\n\r\n            return colorAllocatorFactory.linearGradient3(propertyValueFillRule.linearGradient3, splitScales);\r\n        }\r\n\r\n        function populateColorAllocatorCache(\r\n            dataView: DataView,\r\n            selectTransforms: DataViewSelectTransform[],\r\n            objectDefns: DataViewNamedObjectDefinition[],\r\n            colorAllocatorFactory: IColorAllocatorFactory): IColorAllocatorCache {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n\r\n            let cache = createColorAllocatorCache();\r\n            let staticEvalContext = createStaticEvalContext();\r\n\r\n            for (let i = 0, len = objectDefns.length; i < len; i++) {\r\n                let objectDefnProperties = objectDefns[i].properties;\r\n\r\n                for (let propertyName in objectDefnProperties) {\r\n                    let fillProperty = <FillDefinition>objectDefnProperties[propertyName];\r\n                    if (fillProperty &&\r\n                        fillProperty.solid &&\r\n                        fillProperty.solid.color &&\r\n                        fillProperty.solid.color.kind === SQExprKind.FillRule) {\r\n\r\n                        let fillRuleExpr = <SQFillRuleExpr>fillProperty.solid.color;\r\n\r\n                        let inputExprQueryName = findFirstQueryNameForExpr(selectTransforms, fillRuleExpr.input);\r\n                        if (!inputExprQueryName)\r\n                            continue;\r\n\r\n                        let fillRule = DataViewObjectEvaluator.evaluateProperty(\r\n                            staticEvalContext,\r\n                            fillRulePropertyDescriptor,\r\n                            fillRuleExpr.rule);\r\n\r\n                        let colorAllocator = tryCreateColorAllocatorForFillRule(dataView, colorAllocatorFactory, inputExprQueryName, ColumnIdentifierKind.QueryName, fillRule);\r\n                        if (colorAllocator)\r\n                            cache.register(fillRuleExpr, colorAllocator);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return cache;\r\n        }\r\n\r\n        function evaluateDataRepetition(\r\n            dataView: DataView,\r\n            targetDataViewKinds: StandardDataViewKinds,\r\n            selectTransforms: DataViewSelectTransform[],\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            rules: RuleEvaluation[],\r\n            objectDefns: DataViewNamedObjectDefinition[],\r\n            colorAllocatorCache: IColorAllocatorCache): void {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(targetDataViewKinds, 'targetDataViewKinds');\r\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertAnyValue(rules, 'rules');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n            debug.assertValue(colorAllocatorCache, 'colorAllocatorFactory');\r\n\r\n            let containsWildcard = Selector.containsWildcard(selector);\r\n\r\n            let dataViewCategorical = dataView.categorical;\r\n            if (dataViewCategorical && EnumExtensions.hasFlag(targetDataViewKinds, StandardDataViewKinds.Categorical)) {\r\n                // 1) Match against categories\r\n                evaluateDataRepetitionCategoricalCategory(dataViewCategorical, objectDescriptors, selector, rules, containsWildcard, objectDefns, colorAllocatorCache);\r\n\r\n                // 2) Match against valueGrouping\r\n                evaluateDataRepetitionCategoricalValueGrouping(dataViewCategorical, objectDescriptors, selector, rules, containsWildcard, objectDefns, colorAllocatorCache);\r\n\r\n                // Consider capturing diagnostics for unmatched selectors to help debugging.\r\n            }\r\n\r\n            let dataViewMatrix = dataView.matrix;\r\n            if (dataViewMatrix && EnumExtensions.hasFlag(targetDataViewKinds, StandardDataViewKinds.Matrix)) {\r\n                let rewrittenMatrix = evaluateDataRepetitionMatrix(dataViewMatrix, objectDescriptors, selector, rules, containsWildcard, objectDefns, colorAllocatorCache);\r\n                if (rewrittenMatrix) {\r\n                    // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\r\n                    // revisit this, likely when we do lazy evaluation of DataView.\r\n                    dataView.matrix = rewrittenMatrix;\r\n                }\r\n\r\n                // Consider capturing diagnostics for unmatched selectors to help debugging.\r\n            }\r\n\r\n            let dataViewTable = dataView.table;\r\n            if (dataViewTable && EnumExtensions.hasFlag(targetDataViewKinds, StandardDataViewKinds.Table)) {\r\n                let rewrittenSelector = rewriteTableRoleSelector(dataViewTable, selector);\r\n                let rewrittenTable = evaluateDataRepetitionTable(dataViewTable, selectTransforms, objectDescriptors, rewrittenSelector, rules, containsWildcard, objectDefns, colorAllocatorCache);\r\n                if (rewrittenTable) {\r\n                    // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\r\n                    // revisit this, likely when we do lazy evaluation of DataView.\r\n                    dataView.table = rewrittenTable;\r\n                }\r\n\r\n                // Consider capturing diagnostics for unmatched selectors to help debugging.\r\n            }\r\n        }\r\n\r\n        function rewriteTableRoleSelector(dataViewTable: DataViewTable, selector: Selector): Selector {\r\n            if (Selector.hasRoleWildcard(selector)) {\r\n                selector = findSelectorForRoleWildcard(dataViewTable, selector);\r\n            }\r\n\r\n            return selector;\r\n        }\r\n\r\n        function findSelectorForRoleWildcard(dataViewTable: DataViewTable, selector: Selector): Selector {\r\n            let resultingSelector: Selector = {\r\n                data: [],\r\n                id: selector.id,\r\n                metadata: selector.metadata\r\n            };\r\n\r\n            for (let dataSelector of selector.data) {\r\n                if (Selector.isRoleWildcard(dataSelector)) {\r\n                    let selectorRoles = dataSelector.roles;\r\n                    let allColumnsBelongToSelectorRole: boolean = allColumnsBelongToRole(dataViewTable.columns, selectorRoles);\r\n                    let exprs = dataViewTable.identityFields;\r\n                    if (allColumnsBelongToSelectorRole && exprs) {\r\n                        resultingSelector.data.push(DataViewScopeWildcard.fromExprs(<SQExpr[]>exprs));\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                if (isUniqueDataSelector(resultingSelector.data, dataSelector)) {\r\n                    resultingSelector.data.push(dataSelector);\r\n                }\r\n            }\r\n\r\n            return resultingSelector;\r\n        }\r\n\r\n        function isUniqueDataSelector(dataSelectors: DataRepetitionSelector[], newSelector: DataRepetitionSelector): boolean {\r\n            if (_.isEmpty(dataSelectors))\r\n                return true;\r\n\r\n            return !_.any(dataSelectors, (dataSelector: DataRepetitionSelector) => dataSelector.key === newSelector.key);\r\n        }\r\n\r\n        function allColumnsBelongToRole(columns: DataViewMetadataColumn[], selectorRoles: string[]): boolean {\r\n            for (let column of columns) {\r\n                var roles = column.roles;\r\n                if (!roles || !_.any(selectorRoles, (selectorRole) => roles[selectorRole]))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function evaluateDataRepetitionCategoricalCategory(\r\n            dataViewCategorical: DataViewCategorical,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            rules: RuleEvaluation[],\r\n            containsWildcard: boolean,\r\n            objectDefns: DataViewNamedObjectDefinition[],\r\n            colorAllocatorCache: IColorAllocatorCache): boolean {\r\n            debug.assertValue(dataViewCategorical, 'dataViewCategorical');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertAnyValue(rules, 'rules');\r\n            debug.assertValue(containsWildcard, 'containsWildcard');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n            debug.assertValue(colorAllocatorCache, 'colorAllocatorCache');\r\n\r\n            if (!dataViewCategorical.categories || dataViewCategorical.categories.length === 0)\r\n                return;\r\n\r\n            let targetColumn = findSelectedCategoricalColumn(dataViewCategorical, selector);\r\n            if (!targetColumn)\r\n                return;\r\n\r\n            let identities = targetColumn.identities,\r\n                foundMatch: boolean,\r\n                evalContext = createCategoricalEvalContext(colorAllocatorCache, dataViewCategorical);\r\n\r\n            if (!identities)\r\n                return;\r\n\r\n            debug.assert(targetColumn.column.values.length === identities.length, 'Column length mismatch');\r\n\r\n            for (let i = 0, len = identities.length; i < len; i++) {\r\n                let identity = identities[i];\r\n\r\n                if (containsWildcard || Selector.matchesData(selector, [identity])) {\r\n                    evalContext.setCurrentRowIndex(i);\r\n\r\n                    let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\r\n                    if (objects) {\r\n                        // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\r\n                        // revisit this, likely when we do lazy evaluation of DataView.\r\n                        if (!targetColumn.column.objects) {\r\n                            targetColumn.column.objects = [];\r\n                            targetColumn.column.objects.length = len;\r\n                        }\r\n                        targetColumn.column.objects[i] = objects;\r\n                    }\r\n\r\n                    if (!containsWildcard)\r\n                        return true;\r\n\r\n                    foundMatch = true;\r\n                }\r\n            }\r\n\r\n            return foundMatch;\r\n        }\r\n\r\n        function evaluateDataRepetitionCategoricalValueGrouping(\r\n            dataViewCategorical: DataViewCategorical,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            rules: RuleEvaluation[],\r\n            containsWildcard: boolean,\r\n            objectDefns: DataViewNamedObjectDefinition[],\r\n            colorAllocatorCache: IColorAllocatorCache): boolean {\r\n            debug.assertValue(dataViewCategorical, 'dataViewCategorical');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertAnyValue(rules, 'rules');\r\n            debug.assertValue(containsWildcard, 'containsWildcard');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n            debug.assertValue(colorAllocatorCache, 'colorAllocatorCache');\r\n\r\n            let dataViewCategoricalValues = dataViewCategorical.values;\r\n            if (!dataViewCategoricalValues || !dataViewCategoricalValues.identityFields)\r\n                return;\r\n\r\n            if (!Selector.matchesKeys(selector, <SQExpr[][]>[dataViewCategoricalValues.identityFields]))\r\n                return;\r\n\r\n            let valuesGrouped = dataViewCategoricalValues.grouped();\r\n            if (!valuesGrouped)\r\n                return;\r\n\r\n            // NOTE: We do not set the evalContext row index below because iteration is over value groups (i.e., columns, no rows).\r\n            // This should be enhanced in the future.\r\n            let evalContext = createCategoricalEvalContext(colorAllocatorCache, dataViewCategorical);\r\n\r\n            let foundMatch: boolean;\r\n            for (let i = 0, len = valuesGrouped.length; i < len; i++) {\r\n                let valueGroup = valuesGrouped[i];\r\n                let selectorMetadata = selector.metadata;\r\n                let valuesInGroup = valueGroup.values;\r\n                if (containsWildcard || Selector.matchesData(selector, [valueGroup.identity])) {\r\n                    let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\r\n                    if (objects) {\r\n                        // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\r\n                        // revisit this, likely when we do lazy evaluation of DataView.\r\n\r\n                        if (selectorMetadata) {\r\n                            for (let j = 0, jlen = valuesInGroup.length; j < jlen; j++) {\r\n                                let valueColumn = valuesInGroup[j],\r\n                                    valueSource = valueColumn.source;\r\n                                if (valueSource.queryName === selectorMetadata) {\r\n                                    let valueSourceOverwrite = Prototype.inherit(valueSource);\r\n                                    valueSourceOverwrite.objects = objects;\r\n                                    valueColumn.source = valueSourceOverwrite;\r\n\r\n                                    foundMatch = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            valueGroup.objects = objects;\r\n                            setGrouped(dataViewCategoricalValues, valuesGrouped);\r\n\r\n                            foundMatch = true;\r\n                        }\r\n                    }\r\n\r\n                    if (!containsWildcard)\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            return foundMatch;\r\n        }\r\n\r\n        function evaluateDataRepetitionMatrix(\r\n            dataViewMatrix: DataViewMatrix,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            rules: RuleEvaluation[],\r\n            containsWildcard: boolean,\r\n            objectDefns: DataViewNamedObjectDefinition[],\r\n            colorAllocatorCache: IColorAllocatorCache): DataViewMatrix {\r\n\r\n            let evalContext = createMatrixEvalContext(colorAllocatorCache, dataViewMatrix);\r\n            let rewrittenRows = evaluateDataRepetitionMatrixHierarchy(evalContext, dataViewMatrix.rows, objectDescriptors, selector, rules, containsWildcard, objectDefns);\r\n            let rewrittenCols = evaluateDataRepetitionMatrixHierarchy(evalContext, dataViewMatrix.columns, objectDescriptors, selector, rules, containsWildcard, objectDefns);\r\n\r\n            if (rewrittenRows || rewrittenCols) {\r\n                let rewrittenMatrix = inheritSingle(dataViewMatrix);\r\n\r\n                if (rewrittenRows)\r\n                    rewrittenMatrix.rows = rewrittenRows;\r\n                if (rewrittenCols)\r\n                    rewrittenMatrix.columns = rewrittenCols;\r\n\r\n                return rewrittenMatrix;\r\n            }\r\n        }\r\n\r\n        function evaluateDataRepetitionMatrixHierarchy(\r\n            evalContext: IEvalContext,\r\n            dataViewMatrixHierarchy: DataViewHierarchy,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            rules: RuleEvaluation[],\r\n            containsWildcard: boolean,\r\n            objectDefns: DataViewNamedObjectDefinition[]): DataViewHierarchy {\r\n            debug.assertAnyValue(dataViewMatrixHierarchy, 'dataViewMatrixHierarchy');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertAnyValue(rules, 'rules');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n\r\n            if (!dataViewMatrixHierarchy)\r\n                return;\r\n\r\n            let root = dataViewMatrixHierarchy.root;\r\n            if (!root)\r\n                return;\r\n\r\n            let rewrittenRoot = evaluateDataRepetitionMatrixNode(evalContext, root, objectDescriptors, selector, rules, containsWildcard, objectDefns);\r\n            if (rewrittenRoot) {\r\n                let rewrittenHierarchy = inheritSingle(dataViewMatrixHierarchy);\r\n                rewrittenHierarchy.root = rewrittenRoot;\r\n\r\n                return rewrittenHierarchy;\r\n            }\r\n        }\r\n\r\n        function evaluateDataRepetitionMatrixNode(\r\n            evalContext: IEvalContext,\r\n            dataViewNode: DataViewMatrixNode,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            rules: RuleEvaluation[],\r\n            containsWildcard: boolean,\r\n            objectDefns: DataViewNamedObjectDefinition[]): DataViewMatrixNode {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertValue(dataViewNode, 'dataViewNode');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertAnyValue(rules, 'rules');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n\r\n            let childNodes = dataViewNode.children;\r\n            if (!childNodes)\r\n                return;\r\n\r\n            let rewrittenNode: DataViewMatrixNode;\r\n            let shouldSearchChildren: boolean;\r\n            let childIdentityFields = dataViewNode.childIdentityFields;\r\n            if (childIdentityFields) {\r\n                // NOTE: selector matching in matrix currently only considers the current node, and does not consider parents as part of the match.\r\n                shouldSearchChildren = Selector.matchesKeys(selector, <SQExpr[][]>[childIdentityFields]);\r\n            }\r\n\r\n            for (let i = 0, len = childNodes.length; i < len; i++) {\r\n                let childNode = childNodes[i],\r\n                    identity = childNode.identity,\r\n                    rewrittenChildNode: DataViewMatrixNode = null;\r\n\r\n                if (shouldSearchChildren) {\r\n                    if (containsWildcard || Selector.matchesData(selector, [identity])) {\r\n                        // TODO: Need to initialize context for rule-based properties.  Rule-based properties\r\n                        // (such as fillRule/gradients) are not currently implemented.\r\n\r\n                        let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\r\n                        if (objects) {\r\n                            rewrittenChildNode = inheritSingle(childNode);\r\n                            rewrittenChildNode.objects = objects;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    rewrittenChildNode = evaluateDataRepetitionMatrixNode(\r\n                        evalContext,\r\n                        childNode,\r\n                        objectDescriptors,\r\n                        selector,\r\n                        rules,\r\n                        containsWildcard,\r\n                        objectDefns);\r\n                }\r\n\r\n                if (rewrittenChildNode) {\r\n                    if (!rewrittenNode)\r\n                        rewrittenNode = inheritNodeAndChildren(dataViewNode);\r\n                    rewrittenNode.children[i] = rewrittenChildNode;\r\n\r\n                    if (!containsWildcard) {\r\n                        // NOTE: once we find a match for a non-wildcard selector, stop looking.\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return rewrittenNode;\r\n        }\r\n\r\n        function inheritNodeAndChildren(node: DataViewMatrixNode): DataViewMatrixNode {\r\n            if (Object.getPrototypeOf(node) !== Object.prototype) {\r\n                return node;\r\n            }\r\n\r\n            let inherited = inheritSingle(node);\r\n            inherited.children = inherit(node.children);\r\n            return inherited;\r\n        }\r\n\r\n        function evaluateDataRepetitionTable(\r\n            dataViewTable: DataViewTable,\r\n            selectTransforms: DataViewSelectTransform[],\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            rules: RuleEvaluation[],\r\n            containsWildcard: boolean,\r\n            objectDefns: DataViewNamedObjectDefinition[],\r\n            colorAllocatorCache: IColorAllocatorCache): DataViewTable {\r\n            debug.assertValue(dataViewTable, 'dataViewTable');\r\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertAnyValue(rules, 'rules');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n            debug.assertValue(colorAllocatorCache, 'colorAllocatorCache');\r\n\r\n            let evalContext = createTableEvalContext(colorAllocatorCache, dataViewTable, selectTransforms);\r\n            let rewrittenRows = evaluateDataRepetitionTableRows(\r\n                evalContext,\r\n                dataViewTable.columns,\r\n                dataViewTable.rows,\r\n                dataViewTable.identity,\r\n                dataViewTable.identityFields,\r\n                objectDescriptors,\r\n                selector,\r\n                rules,\r\n                containsWildcard,\r\n                objectDefns);\r\n\r\n            if (rewrittenRows) {\r\n                let rewrittenTable = inheritSingle(dataViewTable);\r\n                rewrittenTable.rows = rewrittenRows;\r\n\r\n                return rewrittenTable;\r\n            }\r\n        }\r\n\r\n        function evaluateDataRepetitionTableRows(\r\n            evalContext: ITableEvalContext,\r\n            columns: DataViewMetadataColumn[],\r\n            rows: DataViewTableRow[],\r\n            identities: DataViewScopeIdentity[],\r\n            identityFields: ISQExpr[],\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            rules: RuleEvaluation[],\r\n            containsWildcard: boolean,\r\n            objectDefns: DataViewNamedObjectDefinition[]): DataViewTableRow[] {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n            debug.assertValue(columns, 'columns');\r\n            debug.assertValue(rows, 'rows');\r\n            debug.assertAnyValue(identities, 'identities');\r\n            debug.assertAnyValue(identityFields, 'identityFields');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertAnyValue(rules, 'rules');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n\r\n            if (_.isEmpty(identities) || _.isEmpty(identityFields))\r\n                return;\r\n\r\n            if (!selector.metadata ||\r\n                !Selector.matchesKeys(selector, <SQExpr[][]>[identityFields]))\r\n                return;\r\n\r\n            let colIdx = _.findIndex(columns, col => col.queryName === selector.metadata);\r\n            if (colIdx < 0)\r\n                return;\r\n\r\n            debug.assert(rows.length === identities.length, 'row length mismatch');\r\n            let colLen = columns.length;\r\n            let inheritedRows: DataViewTableRow[];\r\n\r\n            for (let rowIdx = 0, rowLen = identities.length; rowIdx < rowLen; rowIdx++) {\r\n                let identity = identities[rowIdx];\r\n\r\n                if (containsWildcard || Selector.matchesData(selector, [identity])) {\r\n                    evalContext.setCurrentRowIndex(rowIdx);\r\n\r\n                    let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\r\n                    if (objects) {\r\n                        if (!inheritedRows)\r\n                            inheritedRows = inheritSingle(rows);\r\n\r\n                        let inheritedRow = inheritedRows[rowIdx] = inheritSingle(inheritedRows[rowIdx]);\r\n                        let objectsForColumns = inheritedRow.objects;\r\n                        if (!objectsForColumns)\r\n                            inheritedRow.objects = objectsForColumns = new Array(colLen);\r\n\r\n                        objectsForColumns[colIdx] = objects;\r\n                    }\r\n\r\n                    if (!containsWildcard)\r\n                        break;\r\n                }\r\n            }\r\n\r\n            return inheritedRows;\r\n        }\r\n\r\n        function evaluateMetadataRepetition(\r\n            dataView: DataView,\r\n            selectTransforms: DataViewSelectTransform[],\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            selector: Selector,\r\n            objectDefns: DataViewNamedObjectDefinition[],\r\n            colorAllocatorCache: IColorAllocatorCache): void {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(selector, 'selector');\r\n            debug.assertValue(objectDefns, 'objectDefns');\r\n            debug.assertValue(colorAllocatorCache, 'colorAllocatorCache');\r\n\r\n            // TODO: This mutates the DataView -- the assumption is that prototypal inheritance has already occurred.  We should\r\n            // revisit this, likely when we do lazy evaluation of DataView.\r\n            let columns = dataView.metadata.columns,\r\n                metadataId = selector.metadata,\r\n                evalContext = createStaticEvalContext(colorAllocatorCache, dataView, selectTransforms);\r\n            for (let i = 0, len = columns.length; i < len; i++) {\r\n                let column = columns[i];\r\n                if (column.queryName === metadataId) {\r\n                    let objects = DataViewObjectEvaluationUtils.evaluateDataViewObjects(evalContext, objectDescriptors, objectDefns);\r\n                    if (objects)\r\n                        column.objects = objects;\r\n                }\r\n            }\r\n        }\r\n\r\n        /** Attempts to find a column that can possibly match the selector. */\r\n        function findSelectedCategoricalColumn(dataViewCategorical: DataViewCategorical, selector: Selector) {\r\n            debug.assertValue(dataViewCategorical.categories[0], 'dataViewCategorical.categories[0]');\r\n\r\n            let categoricalColumn = dataViewCategorical.categories[0];\r\n            if (!categoricalColumn.identityFields)\r\n                return;\r\n            if (!Selector.matchesKeys(selector, <SQExpr[][]>[categoricalColumn.identityFields]))\r\n                return;\r\n\r\n            let identities = categoricalColumn.identity,\r\n                targetColumn: DataViewCategoricalColumn = categoricalColumn;\r\n\r\n            let selectedMetadataId = selector.metadata;\r\n            if (selectedMetadataId) {\r\n                let valueColumns = dataViewCategorical.values;\r\n                if (valueColumns) {\r\n                    for (let i = 0, len = valueColumns.length; i < len; i++) {\r\n                        let valueColumn = valueColumns[i];\r\n                        if (valueColumn.source.queryName === selectedMetadataId) {\r\n                            targetColumn = valueColumn;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return {\r\n                column: targetColumn,\r\n                identities: identities,\r\n            };\r\n        }\r\n\r\n        function findSelectorForRuleInput(dataView: DataView, selectorRoles: string[]): Selector {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(selectorRoles, 'selectorRoles');\r\n\r\n            if (selectorRoles.length !== 1)\r\n                return;\r\n\r\n            let dataViewCategorical = dataView.categorical;\r\n            if (!dataViewCategorical)\r\n                return;\r\n\r\n            let categories = dataViewCategorical.categories;\r\n            if (!categories || categories.length !== 1)\r\n                return;\r\n\r\n            let categoryColumn = categories[0],\r\n                categoryRoles = categoryColumn.source.roles,\r\n                categoryIdentityFields = categoryColumn.identityFields;\r\n            if (!categoryRoles || !categoryIdentityFields || !categoryRoles[selectorRoles[0]])\r\n                return;\r\n\r\n            return { data: [DataViewScopeWildcard.fromExprs(<SQExpr[]>categoryIdentityFields)] };\r\n        }\r\n\r\n        function findFirstQueryNameForExpr(selectTransforms: DataViewSelectTransform[], expr: SQExpr): string {\r\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            if (!selectTransforms)\r\n                return;\r\n\r\n            for (let i = 0, len = selectTransforms.length; i < len; i++) {\r\n                let select = selectTransforms[i],\r\n                    columnExpr = select.expr;\r\n\r\n                if (!columnExpr || !SQExpr.equals(expr, select.expr))\r\n                    continue;\r\n\r\n                return select.queryName;\r\n            }\r\n        }\r\n\r\n        /** Attempts to find the value range for the single column with the given identifier/identifierKind. */\r\n        function findRuleInputColumnNumberRange(dataView: DataView, identifier: string, identifierKind: ColumnIdentifierKind): NumberRange {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(identifier, 'identifier');\r\n            debug.assertValue(identifierKind, 'identifierKind');\r\n\r\n            // NOTE: This implementation currently only supports categorical DataView, becuase that's the\r\n            // only scenario that has custom colors, as of this writing.  This would be rewritten to be more generic\r\n            // as required, when needed.\r\n            let dataViewCategorical = dataView.categorical;\r\n            if (!dataViewCategorical)\r\n                return;\r\n\r\n            let values = dataViewCategorical.values;\r\n            if (!values)\r\n                return;\r\n\r\n            for (let i = 0, len = values.length; i < len; i++) {\r\n                let valueCol = values[i];\r\n\r\n                if (identifierKind === ColumnIdentifierKind.Role) {\r\n                    let valueColRoles = valueCol.source.roles;\r\n\r\n                    if (!valueColRoles || !valueColRoles[identifier])\r\n                        continue;\r\n                }\r\n                else {\r\n                    debug.assert(identifierKind === ColumnIdentifierKind.QueryName, 'identifierKind === ColumnIdentifierKind.QueryName');\r\n\r\n                    if (valueCol.source.queryName !== identifier)\r\n                        continue;\r\n                }\r\n\r\n                let min = valueCol.min;\r\n                if (min === undefined)\r\n                    min = valueCol.minLocal;\r\n                if (min === undefined)\r\n                    continue;\r\n\r\n                let max = valueCol.max;\r\n                if (max === undefined)\r\n                    max = valueCol.maxLocal;\r\n                if (max === undefined)\r\n                    continue;\r\n\r\n                return { min: min, max: max };\r\n            }\r\n        }\r\n\r\n        // TODO: refactor this, setGrouped, and groupValues to a test helper to stop using it in the product\r\n        export function createValueColumns(\r\n            values: DataViewValueColumn[] = [],\r\n            valueIdentityFields?: SQExpr[],\r\n            source?: DataViewMetadataColumn): DataViewValueColumns {\r\n            let result = <DataViewValueColumns>values;\r\n            setGrouped(<DataViewValueColumns>values);\r\n\r\n            if (valueIdentityFields)\r\n                result.identityFields = valueIdentityFields;\r\n\r\n            if (source)\r\n                result.source = source;\r\n\r\n            return result;\r\n        }\r\n\r\n        export function setGrouped(values: DataViewValueColumns, groupedResult?: DataViewValueColumnGroup[]): void {\r\n            values.grouped = groupedResult\r\n                ? () => groupedResult\r\n                : () => groupValues(values);\r\n        }\r\n\r\n        /** Group together the values with a common identity. */\r\n        function groupValues(values: DataViewValueColumn[]): DataViewValueColumnGroup[] {\r\n            debug.assertValue(values, 'values');\r\n\r\n            let groups: DataViewValueColumnGroup[] = [],\r\n                currentGroup: DataViewValueColumnGroup;\r\n\r\n            for (let i = 0, len = values.length; i < len; i++) {\r\n                let value = values[i];\r\n\r\n                if (!currentGroup || currentGroup.identity !== value.identity) {\r\n                    currentGroup = {\r\n                        values: []\r\n                    };\r\n\r\n                    if (value.identity) {\r\n                        currentGroup.identity = value.identity;\r\n\r\n                        let source = value.source;\r\n\r\n                        // allow null, which will be formatted as (Blank).\r\n                        if (source.groupName !== undefined)\r\n                            currentGroup.name = source.groupName;\r\n                        else if (source.displayName)\r\n                            currentGroup.name = source.displayName;\r\n                    }\r\n\r\n                    groups.push(currentGroup);\r\n                }\r\n\r\n                currentGroup.values.push(value);\r\n            }\r\n\r\n            return groups;\r\n        }\r\n\r\n        function pivotIfNecessary(dataView: DataView, dataViewMappings: DataViewMapping[]): DataView {\r\n            debug.assertValue(dataView, 'dataView');\r\n\r\n            let transformedDataView: DataView;\r\n            switch (determineCategoricalTransformation(dataView.categorical, dataViewMappings)) {\r\n                case CategoricalDataViewTransformation.Pivot:\r\n                    transformedDataView = DataViewPivotCategorical.apply(dataView);\r\n                    break;\r\n\r\n                case CategoricalDataViewTransformation.SelfCrossJoin:\r\n                    transformedDataView = DataViewSelfCrossJoin.apply(dataView);\r\n                    break;\r\n            }\r\n\r\n            return transformedDataView || dataView;\r\n        }\r\n\r\n        function determineCategoricalTransformation(categorical: DataViewCategorical, dataViewMappings: DataViewMapping[]): CategoricalDataViewTransformation {\r\n            if (!categorical || _.isEmpty(dataViewMappings))\r\n                return;\r\n\r\n            let categories = categorical.categories;\r\n            if (!categories || categories.length !== 1)\r\n                return;\r\n\r\n            let values = categorical.values;\r\n            if (_.isEmpty(values))\r\n                return;\r\n\r\n            if (values.grouped().some(vg => !!vg.identity))\r\n                return;\r\n\r\n            // If we made it here, the DataView has a single category and no valueGrouping.\r\n            let categoryRoles = categories[0].source.roles;\r\n\r\n            for (let i = 0, len = dataViewMappings.length; i < len; i++) {\r\n                let roleMappingCategorical = dataViewMappings[i].categorical;\r\n                if (!roleMappingCategorical)\r\n                    continue;\r\n\r\n                if (!hasRolesGrouped(categoryRoles, <DataViewGroupedRoleMapping>roleMappingCategorical.values))\r\n                    continue;\r\n\r\n                // If we made it here, the DataView's single category has the value grouping role.\r\n                let categoriesMapping = roleMappingCategorical.categories;\r\n                let hasCategoryRole =\r\n                    hasRolesBind(categoryRoles, <DataViewRoleBindMappingWithReduction>categoriesMapping) ||\r\n                    hasRolesFor(categoryRoles, <DataViewRoleForMappingWithReduction>categoriesMapping);\r\n\r\n                if (hasCategoryRole)\r\n                    return CategoricalDataViewTransformation.SelfCrossJoin;\r\n\r\n                return CategoricalDataViewTransformation.Pivot;\r\n            }\r\n        }\r\n\r\n        function shouldPivotMatrix(matrix: DataViewMatrix, dataViewMappings: DataViewMapping[]): boolean {\r\n            if (!matrix || _.isEmpty(dataViewMappings))\r\n                return;\r\n\r\n            let rowLevels = matrix.rows.levels;\r\n            if (rowLevels.length < 1)\r\n                return;\r\n\r\n            let rows = matrix.rows.root.children;\r\n            if (!rows || rows.length === 0)\r\n                return;\r\n\r\n            let rowRoles = rowLevels[0].sources[0].roles;\r\n\r\n            for (let i = 0, len = dataViewMappings.length; i < len; i++) {\r\n                let roleMappingMatrix = dataViewMappings[i].matrix;\r\n                if (!roleMappingMatrix)\r\n                    continue;\r\n\r\n                if (!hasRolesFor(rowRoles, <DataViewRoleForMappingWithReduction>roleMappingMatrix.rows) &&\r\n                    hasRolesFor(rowRoles, <DataViewRoleForMappingWithReduction>roleMappingMatrix.columns)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        function hasRolesBind(roles: { [name: string]: boolean }, roleMapping: DataViewRoleBindMappingWithReduction): boolean {\r\n            if (roles && roleMapping && roleMapping.bind)\r\n                return roles[roleMapping.bind.to];\r\n        }\r\n\r\n        function hasRolesFor(roles: { [name: string]: boolean }, roleMapping: DataViewRoleForMappingWithReduction): boolean {\r\n            if (roles && roleMapping && roleMapping.for)\r\n                return roles[roleMapping.for.in];\r\n        }\r\n\r\n        function hasRolesGrouped(roles: { [name: string]: boolean }, roleMapping: DataViewGroupedRoleMapping): boolean {\r\n            if (roles && roleMapping && roleMapping.group)\r\n                return roles[roleMapping.group.by];\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import IStringResourceProvider = jsCommon.IStringResourceProvider;\r\n\r\n    export function createDisplayNameGetter(displayNameKey: string): (IStringResourceProvider) => string {\r\n        return (resourceProvider: IStringResourceProvider) => resourceProvider.get(displayNameKey);\r\n    }\r\n\r\n    export function getDisplayName(displayNameGetter: data.DisplayNameGetter, resourceProvider: jsCommon.IStringResourceProvider): string {\r\n        if (typeof displayNameGetter === 'function')\r\n            return displayNameGetter(resourceProvider);\r\n\r\n        if (typeof displayNameGetter === 'string')\r\n            return displayNameGetter;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    /** Represents a data reader. */\r\n    export interface IDataReader {\r\n        /** Executes a query, with a promise of completion.  The response object should be compatible with the transform implementation. */\r\n        execute?(options: DataReaderExecutionOptions): RejectablePromise2<DataReaderData, IClientError>;\r\n\r\n        /** Transforms the given data into a DataView.  When this function is not specified, the data is put on a property on the DataView. */\r\n        transform?(obj: DataReaderData): DataReaderTransformResult;\r\n\r\n        /** Stops all future communication and reject and pending communication  */\r\n        stopCommunication?(): void;\r\n\r\n        /** Resumes communication which enables future requests */\r\n        resumeCommunication?(): void;\r\n\r\n        /** Clear cache */\r\n        clearCache?(dataSource: DataReaderDataSource): void;\r\n\r\n        /** rewriteCacheEntries */\r\n        rewriteCacheEntries?(dataSource: DataReaderDataSource, rewriter: DataReaderCacheRewriter): void;\r\n\r\n        /** Sets the result into the local cache */\r\n        setLocalCacheResult?(options: DataReaderExecutionOptions, dataAsObject: DataReaderData): void;\r\n    }\r\n\r\n    /** Represents a query generator. */\r\n    export interface IQueryGenerator {\r\n        /** Query generation function to convert a (prototype) SemanticQuery to a runnable query command. */\r\n        execute(options: QueryGeneratorOptions): QueryGeneratorResult;\r\n    }\r\n\r\n    export interface IFederatedConceptualSchemaReader {\r\n        /** Executes a request for conceptual schema with a promise of completion. */\r\n        execute(options: FederatedConceptualSchemaReaderOptions): IPromise<FederatedConceptualSchemaResponse>;\r\n\r\n        /** Transforms the given data into a FederatedConceptualSchema. */\r\n        transform(obj: FederatedConceptualSchemaResponse): SchemaReaderTransformResult;\r\n    }\r\n\r\n    /** Represents a custom data reader plugin, to be registered in the powerbi.data.plugins object. */\r\n    export interface IDataReaderPlugin {\r\n        /** The name of this plugin. */\r\n        name: string;\r\n        \r\n        /** Factory method for the IDataReader. */\r\n        reader(hostServices: IDataReaderHostServices): IDataReader;\r\n\r\n        /** Factory method for the IQueryGenerator. */\r\n        queryGenerator?(): IQueryGenerator;\r\n\r\n        /** Factory method for the IFederatedConceptualSchemaReader. */\r\n        schemaReader?(hostServices: IDataReaderHostServices): IFederatedConceptualSchemaReader;\r\n    }\r\n\r\n    export interface QueryGeneratorOptions {\r\n        query: SemanticQuery;\r\n        mappings: CompiledDataViewMapping[];\r\n        additionalProjections?: AdditionalQueryProjection[];\r\n        highlightFilter?: SemanticFilter;\r\n        restartToken?: RestartToken;\r\n        dataWindow?: QueryGeneratorDataWindow;\r\n    }\r\n\r\n    export interface AdditionalQueryProjection {\r\n        queryName: string;\r\n        selector: Selector;\r\n        aggregates?: ProjectionAggregates;\r\n    }\r\n\r\n    export interface ProjectionAggregates {\r\n        min?: boolean;\r\n        max?: boolean;\r\n    }\r\n\r\n    export interface QueryGeneratorResult {\r\n        command: DataReaderQueryCommand;\r\n        splits?: DataViewSplitTransform[];\r\n    }\r\n\r\n    export interface DataReaderTransformResult {\r\n        dataView?: DataView;\r\n        restartToken?: RestartToken;\r\n        error?: IClientError;\r\n        warning?: IClientWarning;\r\n    }\r\n\r\n    export interface QueryGeneratorDataWindow {\r\n        // This interface is intentionally empty, as plugins define their own data structure.\r\n    }\r\n\r\n    export interface RestartToken {\r\n        // This interface is intentionally empty, as plugins define their own data structure.\r\n    }\r\n\r\n    export interface DataReaderQueryCommand {\r\n        // This interface is intentionally empty, as plugins define their own data structure.\r\n    }\r\n\r\n    /** Represents a query command defined by an IDataReader. */\r\n    export interface DataReaderCommand {\r\n        // This interface is intentionally empty, as plugins define their own data structure.\r\n    }\r\n\r\n    /** Represents a data source defined by an IDataReader. */\r\n    export interface DataReaderDataSource {\r\n        // This interface is intentionally empty, as plugins define their own data structure.\r\n    }\r\n\r\n    /** Represents arbitrary data defined by an IDataReader. */\r\n    export interface DataReaderData {\r\n        // This interface is intentionally empty, as plugins define their own data structure.\r\n    }\r\n\r\n    /** Represents cacheRewriter that will rewrite the cache of reader as defined by an IDataReader. */\r\n    export interface DataReaderCacheRewriter {\r\n        // This interface is intentionally empty, as plugins define their own data structure.\r\n    }\r\n\r\n    export interface DataReaderExecutionOptions {\r\n        dataSource?: DataReaderDataSource;\r\n        command: DataReaderCommand;\r\n        allowCache?: boolean;\r\n        cacheResponseOnServer?: boolean;\r\n        ignoreViewportForCache?: boolean;\r\n    }\r\n\r\n    export interface FederatedConceptualSchemaReaderOptions {\r\n        dataSources: ConceptualSchemaReaderDataSource[];\r\n    }\r\n\r\n    export interface ConceptualSchemaReaderDataSource {\r\n        id: number;\r\n\r\n        /** Specifies the name used in Semantic Queries to reference this DataSource. */\r\n        name: string;\r\n    }\r\n\r\n    export interface FederatedConceptualSchemaResponse {\r\n        data: FederatedConceptualSchemaData;\r\n    }\r\n\r\n    export interface FederatedConceptualSchemaData {\r\n        // This interface is intentionally empty, as plugins define their own data structure.\r\n    }\r\n\r\n    export interface SchemaReaderTransformResult {\r\n        schema: FederatedConceptualSchema;\r\n        error?: SchemaReaderError;\r\n    }\r\n\r\n    // Defect 5858607, consider removing serviceError and only have IClientError to be more consistent with IDataProxy.\r\n    export interface SchemaReaderError {\r\n        requestId?: string;\r\n        serviceError?: ServiceError;\r\n        clientError: IClientError;\r\n    }\r\n\r\n    export interface IDataReaderHostServices {\r\n        promiseFactory(): IPromiseFactory;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n\r\n    /** Enumeration of DateTimeUnits */\r\n    export enum DateTimeUnit {\r\n        Year,\r\n        Month,\r\n        Week,\r\n        Day,\r\n        Hour,\r\n        Minute,\r\n        Second,\r\n        Millisecond,\r\n    }\r\n\r\n    export interface IFormattingService {\r\n        /** \r\n         * Formats the value using provided format expression and culture\r\n         * @param value - value to be formatted and converted to string.\r\n         * @param format - format to be applied. If undefined or empty then generic format is used.        \r\n         */\r\n        formatValue(value: any, format?: string): string;\r\n\r\n        /** \r\n         * Replaces the indexed format tokens (for example {0:c2}) in the format string with the localized formatted arguments.\r\n         * @param formatWithIndexedTokens - format string with a set of indexed format tokens.\r\n         * @param args - array of values which should replace the tokens in the format string.\r\n         * @param culture - localization culture. If undefined then the current culture is used.\r\n         */\r\n        format(formatWithIndexedTokens: string, args: any[], culture?: string): string;\r\n\r\n        /** Gets a value indicating whether the specified format a standard numeric format specifier. */\r\n        isStandardNumberFormat(format: string): boolean;\r\n\r\n        /** Performs a custom format with a value override.  Typically used for custom formats showing scaled values. */\r\n        formatNumberWithCustomOverride(value: number, format: string, nonScientificOverrideFormat: string): string;\r\n\r\n        /** Gets the format string to use for dates in particular units. */\r\n        dateFormatString(unit: DateTimeUnit): string;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    /** Represents common expression patterns for 'field' expressions such as columns, column aggregates, measures, etc. */\r\n    export interface FieldExprPattern {\r\n        column?: FieldExprColumnPattern;\r\n        columnAggr?: FieldExprColumnAggrPattern;\r\n        columnHierarchyLevelVariation?: FieldExprColumnHierarchyLevelVariationPattern;\r\n        entity?: FieldExprEntityPattern;\r\n        entityAggr?: FieldExprEntityAggrPattern;\r\n        hierarchy?: FieldExprHierarchyPattern;\r\n        hierarchyLevel?: FieldExprHierarchyLevelPattern;\r\n        hierarchyLevelAggr?: FieldExprHierarchyLevelAggrPattern;\r\n        measure?: FieldExprMeasurePattern;\r\n    }\r\n\r\n    /** By design there is no default, no-op visitor. Components concerned with patterns need to be aware of all patterns as they are added. */\r\n    export interface IFieldExprPatternVisitor<T> {\r\n        visitColumn(column: FieldExprColumnPattern): T;\r\n        visitColumnAggr(columnAggr: FieldExprColumnAggrPattern): T;\r\n        visitColumnHierarchyLevelVariation(columnHierarchyLevelVariation: FieldExprColumnHierarchyLevelVariationPattern): T;\r\n        visitEntity(entity: FieldExprEntityPattern): T;\r\n        visitEntityAggr(entityAggr: FieldExprEntityAggrPattern): T;\r\n        visitHierarchy(hierarchy: FieldExprHierarchyPattern): T;\r\n        visitHierarchyLevel(hierarchyLevel: FieldExprHierarchyLevelPattern): T;\r\n        visitHierarchyLevelAggr(hierarchyLevelAggr: FieldExprHierarchyLevelAggrPattern): T;\r\n        visitMeasure(measure: FieldExprMeasurePattern): T;\r\n    }\r\n\r\n    export interface FieldExprEntityPattern {\r\n        schema: string;\r\n        entity: string;\r\n        entityVar?: string;\r\n    }\r\n\r\n    export interface FieldExprEntityItemPattern extends FieldExprEntityPattern {\r\n    }\r\n\r\n    export interface FieldExprEntityPropertyPattern extends FieldExprEntityItemPattern {\r\n        name: string;\r\n    }\r\n\r\n    export type FieldExprColumnPattern = FieldExprEntityPropertyPattern;\r\n    export type FieldExprMeasurePattern = FieldExprEntityPropertyPattern;\r\n    export type FieldExprHierarchyPattern = FieldExprEntityPropertyPattern;\r\n\r\n    export type FieldExprPropertyPattern = FieldExprColumnPattern | FieldExprMeasurePattern | FieldExprHierarchyPattern;\r\n\r\n    export interface FieldExprEntityAggrPattern extends FieldExprEntityPattern {\r\n        aggregate: QueryAggregateFunction;\r\n    }\r\n\r\n    export interface FieldExprColumnAggrPattern extends FieldExprColumnPattern {\r\n        aggregate: QueryAggregateFunction;\r\n    }\r\n\r\n    export interface FieldExprHierarchyLevelPattern extends FieldExprEntityItemPattern {\r\n        name: string;\r\n        level: string;\r\n    }\r\n\r\n    export interface FieldExprHierarchyLevelAggrPattern extends FieldExprHierarchyLevelPattern {\r\n        aggregate: QueryAggregateFunction;\r\n    }\r\n\r\n    export interface FieldExprColumnHierarchyLevelVariationPattern {\r\n        source: FieldExprColumnPattern;\r\n        level: FieldExprHierarchyLevelPattern;\r\n        variationName: string;\r\n    }\r\n\r\n    export module SQExprBuilder {\r\n        export function fieldExpr(fieldExpr: FieldExprPattern): SQExpr {\r\n            let sqExpr = FieldExprPattern.visit<SQExpr>(fieldExpr, FieldExprToSQExprVisitor.instance);\r\n            debug.assertValue(sqExpr, 'Failed to convert FieldExprPattern into SQExpr');\r\n            return sqExpr;\r\n        }\r\n        \r\n        export function fromColumnAggr(columnAggr: FieldExprColumnAggrPattern): SQAggregationExpr {\r\n            return aggregate(fromColumn(columnAggr), columnAggr.aggregate);\r\n        }\r\n        \r\n        export function fromColumn(column: FieldExprColumnPattern): SQColumnRefExpr {\r\n            return columnRef(fromEntity(column), column.name);\r\n        }\r\n        \r\n        export function fromEntity(entityPattern: FieldExprEntityPattern): SQEntityExpr {\r\n            return entity(entityPattern.schema, entityPattern.entity, entityPattern.entityVar);\r\n        }\r\n        \r\n        export function fromEntityAggr(entityAggr: FieldExprEntityAggrPattern): SQAggregationExpr {\r\n            return aggregate(fromEntity(entityAggr), entityAggr.aggregate);\r\n        }\r\n        \r\n        export function fromHierarchyLevelAggr(hierarchyLevelAggr: FieldExprHierarchyLevelAggrPattern): SQAggregationExpr {\r\n            return aggregate(fromHierarchyLevel(hierarchyLevelAggr), hierarchyLevelAggr.aggregate);\r\n        }\r\n        \r\n        export function fromHierarchyLevel(hierarchyLevelPattern: FieldExprHierarchyLevelPattern): SQHierarchyLevelExpr {\r\n            return hierarchyLevel(fromHierarchy(hierarchyLevelPattern), hierarchyLevelPattern.level);\r\n        }\r\n        \r\n        export function fromHierarchy(hierarchyPattern: FieldExprHierarchyPattern): SQHierarchyExpr {\r\n             return hierarchy(fromEntity(hierarchyPattern), hierarchyPattern.name);\r\n        }\r\n\r\n        class FieldExprToSQExprVisitor implements IFieldExprPatternVisitor<SQExpr> {\r\n            public static instance: FieldExprToSQExprVisitor = new FieldExprToSQExprVisitor();\r\n\r\n            public visitColumn(column: FieldExprColumnPattern): SQColumnRefExpr {\r\n                return fromColumn(column);   \r\n            }\r\n\r\n            public visitColumnAggr(columnAggr: FieldExprColumnAggrPattern): SQAggregationExpr {\r\n                return fromColumnAggr(columnAggr);\r\n            } \r\n\r\n            public visitColumnHierarchyLevelVariation(columnHierarchyLevelVariationPattern: FieldExprColumnHierarchyLevelVariationPattern): SQPropertyVariationSourceExpr {\r\n                return propertyVariationSource(\r\n                    this.visitEntity(columnHierarchyLevelVariationPattern.source),\r\n                    columnHierarchyLevelVariationPattern.source.name,\r\n                    columnHierarchyLevelVariationPattern.level.name);\r\n            }\r\n\r\n            public visitEntity(entityPattern: FieldExprEntityPattern): SQEntityExpr {\r\n                return fromEntity(entityPattern);\r\n            }\r\n\r\n            public visitEntityAggr(entityAggr: FieldExprEntityAggrPattern): SQAggregationExpr {\r\n                return fromEntityAggr(entityAggr);   \r\n            }\r\n\r\n            public visitHierarchy(hierarchyPattern: FieldExprHierarchyPattern): SQHierarchyExpr {\r\n                return fromHierarchy(hierarchyPattern);\r\n            }\r\n\r\n            public visitHierarchyLevel(level: FieldExprHierarchyLevelPattern): SQHierarchyLevelExpr {\r\n                return fromHierarchyLevel(level);\r\n            }\r\n\r\n            public visitHierarchyLevelAggr(hierarchyLevelAggr: FieldExprHierarchyLevelAggrPattern): SQAggregationExpr {\r\n                return fromHierarchyLevelAggr(hierarchyLevelAggr);\r\n            }\r\n\r\n            public visitMeasure(measure: FieldExprMeasurePattern): SQMeasureRefExpr {\r\n                return measureRef(this.visitEntity(measure), measure.name);\r\n            }\r\n        }\r\n    }\r\n\r\n    export module SQExprConverter {\r\n        export function asFieldPattern(sqExpr: SQExpr): FieldExprPattern {\r\n            return sqExpr.accept(FieldExprPatternBuilder.instance);\r\n        }\r\n    }\r\n\r\n    interface FieldExprSourceVariationPattern {\r\n        column: FieldExprColumnPattern;\r\n        variationName: string;\r\n    }\r\n\r\n    interface SourceExprPattern {\r\n        entity?: FieldExprEntityPattern;\r\n\r\n        // TODO: Change FieldExprHierarchyPattern to FieldExprHierarchyLevelPattern\r\n        hierarchy?: FieldExprHierarchyPattern;\r\n        variation?: FieldExprSourceVariationPattern;\r\n    }\r\n\r\n    interface HierarchySourceExprPattern {\r\n        hierarchy: FieldExprHierarchyPattern;\r\n        variation?: FieldExprSourceVariationPattern;\r\n    }\r\n\r\n    class FieldExprPatternBuilder extends DefaultSQExprVisitor<FieldExprPattern> {\r\n        public static instance: FieldExprPatternBuilder = new FieldExprPatternBuilder();\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr): FieldExprPattern {\r\n            let sourceRef = expr.source.accept(SourceExprPatternBuilder.instance);\r\n            if (!sourceRef)\r\n                return;\r\n\r\n            if (sourceRef.entity) {\r\n                let columnRef = <FieldExprColumnPattern>sourceRef.entity;\r\n                columnRef.name = expr.ref;\r\n\r\n                return { column: columnRef };\r\n            }\r\n        }\r\n\r\n        public visitMeasureRef(expr: SQMeasureRefExpr): FieldExprPattern {\r\n            let sourceRef = expr.source.accept(SourceExprPatternBuilder.instance);\r\n            if (!sourceRef)\r\n                return;\r\n\r\n            if (sourceRef.entity) {\r\n                let measureRef = <FieldExprMeasurePattern>sourceRef.entity;\r\n                measureRef.name = expr.ref;\r\n\r\n                return { measure: measureRef };\r\n            }\r\n        }\r\n\r\n        public visitEntity(expr: SQEntityExpr): FieldExprPattern {\r\n            let entityRef: FieldExprEntityPattern = {\r\n                schema: expr.schema,\r\n                entity: expr.entity\r\n            };\r\n            if (expr.variable)\r\n                entityRef.entityVar = expr.variable;\r\n\r\n            return { entity: entityRef };\r\n        }\r\n\r\n        public visitAggr(expr: SQAggregationExpr): FieldExprPattern {\r\n            let fieldPattern: FieldExprPattern = expr.arg.accept(this);\r\n            if (fieldPattern && fieldPattern.column) {\r\n                let argAggr = <FieldExprColumnAggrPattern>fieldPattern.column;\r\n                argAggr.aggregate = expr.func;\r\n                return { columnAggr: argAggr };\r\n            } else if (fieldPattern && fieldPattern.columnAggr) {\r\n                let argAggr = <FieldExprColumnAggrPattern>fieldPattern.columnAggr;\r\n                argAggr.aggregate = expr.func;\r\n                return { columnAggr: argAggr };\r\n            } else if (fieldPattern && fieldPattern.hierarchyLevel) {\r\n                let argAggr = <FieldExprHierarchyLevelAggrPattern>fieldPattern.hierarchyLevel;\r\n                argAggr.aggregate = expr.func;\r\n                return { hierarchyLevelAggr: argAggr };\r\n            }\r\n\r\n            let sourcePattern = expr.arg.accept(SourceExprPatternBuilder.instance);\r\n            if (sourcePattern && sourcePattern.entity) {\r\n                let argAggr = <FieldExprEntityAggrPattern>sourcePattern.entity;\r\n                argAggr.aggregate = expr.func;\r\n\r\n                return { entityAggr: argAggr };\r\n            }\r\n        }\r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr): FieldExprPattern {\r\n            let sourcePattern = expr.arg.accept(SourceExprPatternBuilder.instance);\r\n\r\n            if (sourcePattern && sourcePattern.entity) {\r\n                let hierarchyRef = <FieldExprHierarchyPattern>(sourcePattern.entity);\r\n                hierarchyRef.name = expr.hierarchy;\r\n                return { hierarchy: hierarchyRef };\r\n            }\r\n        }\r\n\r\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr): FieldExprPattern {\r\n            let hierarchySourceExprPattern: HierarchySourceExprPattern = expr.arg.accept(HierarchyExprPatternBuiler.instance);\r\n            if (!hierarchySourceExprPattern)\r\n                return;\r\n\r\n            let hierarchyLevel: FieldExprHierarchyLevelPattern;\r\n            if (hierarchySourceExprPattern.hierarchy) {\r\n                hierarchyLevel = {\r\n                    entity: hierarchySourceExprPattern.hierarchy.entity,\r\n                    schema: hierarchySourceExprPattern.hierarchy.schema,\r\n                    name: hierarchySourceExprPattern.hierarchy.name,\r\n                    level: expr.level,\r\n                };\r\n            }\r\n\r\n            if (hierarchySourceExprPattern.variation) {\r\n                return {\r\n                    columnHierarchyLevelVariation: {\r\n                        source: {\r\n                            entity: hierarchySourceExprPattern.variation.column.entity,\r\n                            schema: hierarchySourceExprPattern.variation.column.schema,\r\n                            name: hierarchySourceExprPattern.variation.column.name,\r\n                        },\r\n                        level: hierarchyLevel,\r\n                        variationName: hierarchySourceExprPattern.variation.variationName,\r\n                    }\r\n                };\r\n            }\r\n\r\n            return { hierarchyLevel: hierarchyLevel };\r\n        }\r\n    }\r\n\r\n    class SourceExprPatternBuilder extends DefaultSQExprVisitor<SourceExprPattern> {\r\n        public static instance: SourceExprPatternBuilder = new SourceExprPatternBuilder();\r\n\r\n        public visitEntity(expr: SQEntityExpr): SourceExprPattern {\r\n            let entityRef: FieldExprEntityPattern = {\r\n                schema: expr.schema,\r\n                entity: expr.entity\r\n            };\r\n            if (expr.variable)\r\n                entityRef.entityVar = expr.variable;\r\n\r\n            return { entity: entityRef };\r\n        }\r\n\r\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr): SourceExprPattern {\r\n            let entityExpr = <SQEntityExpr>expr.arg;\r\n\r\n            if (entityExpr instanceof SQEntityExpr) {\r\n                let propertyVariationSource: FieldExprColumnPattern = {\r\n                    schema: entityExpr.schema,\r\n                    entity: entityExpr.entity,\r\n                    name: expr.property,\r\n                };\r\n\r\n                if (entityExpr.variable)\r\n                    propertyVariationSource.entityVar = entityExpr.variable;\r\n\r\n                return {\r\n                    variation: {\r\n                        column: propertyVariationSource,\r\n                        variationName: expr.name,\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    class HierarchyExprPatternBuiler extends DefaultSQExprVisitor<HierarchySourceExprPattern> {\r\n        public static instance: HierarchyExprPatternBuiler = new HierarchyExprPatternBuiler();\r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr): HierarchySourceExprPattern {\r\n            let exprPattern = expr.arg.accept(SourceExprPatternBuilder.instance);\r\n            let hierarchyRef: FieldExprHierarchyPattern;\r\n            let variationRef: FieldExprSourceVariationPattern;\r\n\r\n            if (exprPattern.variation) {\r\n                hierarchyRef = {\r\n                    name: expr.hierarchy,\r\n                    schema: exprPattern.variation.column.schema,\r\n                    entity: exprPattern.variation.column.entity,\r\n                };\r\n                variationRef = exprPattern.variation;\r\n            }\r\n            else\r\n                hierarchyRef = {\r\n                    name: expr.hierarchy,\r\n                    schema: exprPattern.entity.schema,\r\n                    entity: exprPattern.entity.entity,\r\n                };\r\n\r\n            return {\r\n                hierarchy: hierarchyRef,\r\n                variation: variationRef\r\n            };\r\n        }\r\n    }\r\n\r\n    export module FieldExprPattern {\r\n\r\n        export function visit<T>(expr: SQExpr | FieldExprPattern, visitor: IFieldExprPatternVisitor<T>): T {\r\n            debug.assertValue(expr, 'expr');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            let fieldExprPattern = expr instanceof SQExpr ? SQExprConverter.asFieldPattern(expr) : expr;\r\n            debug.assertValue(fieldExprPattern, 'expected sqExpr to conform to a fieldExprPattern');\r\n\r\n            if (fieldExprPattern.column)\r\n                return visitColumn(fieldExprPattern.column, visitor);\r\n            if (fieldExprPattern.columnAggr)\r\n                return visitColumnAggr(fieldExprPattern.columnAggr, visitor);\r\n            if (fieldExprPattern.columnHierarchyLevelVariation)\r\n                return visitColumnHierarchyLevelVariation(fieldExprPattern.columnHierarchyLevelVariation, visitor);\r\n            if (fieldExprPattern.entity)\r\n                return visitEntity(fieldExprPattern.entity, visitor);\r\n            if (fieldExprPattern.entityAggr)\r\n                return visitEntityAggr(fieldExprPattern.entityAggr, visitor);\r\n            if (fieldExprPattern.hierarchy)\r\n                return visitHierarchy(fieldExprPattern.hierarchy, visitor);\r\n            if (fieldExprPattern.hierarchyLevel)\r\n                return visitHierarchyLevel(fieldExprPattern.hierarchyLevel, visitor);\r\n            if (fieldExprPattern.hierarchyLevelAggr)\r\n                return visitHierarchyLevelAggr(fieldExprPattern.hierarchyLevelAggr, visitor);\r\n            if (fieldExprPattern.measure)\r\n                return visitMeasure(fieldExprPattern.measure, visitor);\r\n                \r\n            debug.assertFail('failed to visit a fieldExprPattern.');\r\n            return;\r\n        }\r\n\r\n        function visitColumn<T>(column: FieldExprColumnPattern, visitor: IFieldExprPatternVisitor<T>): T {\r\n            debug.assertValue(column, 'column');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            return visitor.visitColumn(column);\r\n        }\r\n\r\n        function visitColumnAggr<T>(columnAggr: FieldExprColumnAggrPattern, visitor: IFieldExprPatternVisitor<T>): T{\r\n            debug.assertValue(columnAggr, 'columnAggr');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            return visitor.visitColumnAggr(columnAggr);\r\n        }\r\n\r\n        function visitColumnHierarchyLevelVariation<T>(\r\n            columnHierarchyLevelVariation: FieldExprColumnHierarchyLevelVariationPattern,\r\n            visitor: IFieldExprPatternVisitor<T>): T{\r\n\r\n            debug.assertValue(columnHierarchyLevelVariation, 'columnHierarchyLevelVariation');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            return visitor.visitColumnHierarchyLevelVariation(columnHierarchyLevelVariation);\r\n        }\r\n\r\n        function visitEntity<T>(entity: FieldExprEntityPattern, visitor: IFieldExprPatternVisitor<T>): T{\r\n            debug.assertValue(entity, 'entity');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            return visitor.visitEntity(entity);\r\n        }\r\n        \r\n        function visitEntityAggr<T>(entityAggr: FieldExprEntityAggrPattern, visitor: IFieldExprPatternVisitor<T>): T{\r\n            debug.assertValue(entityAggr, 'entityAggr');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            return visitor.visitEntityAggr(entityAggr);\r\n        }\r\n\r\n        function visitHierarchy<T>(hierarchy: FieldExprHierarchyPattern, visitor: IFieldExprPatternVisitor<T>): T{\r\n            debug.assertValue(hierarchy, 'hierarchy');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            return visitor.visitHierarchy(hierarchy);\r\n        }\r\n\r\n        function visitHierarchyLevel<T>(hierarchyLevel: FieldExprHierarchyLevelPattern, visitor: IFieldExprPatternVisitor<T>): T{\r\n            debug.assertValue(hierarchyLevel, 'hierarchyLevel');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            return visitor.visitHierarchyLevel(hierarchyLevel);\r\n        }\r\n\r\n        function visitHierarchyLevelAggr<T>(hierarchyLevelAggr: FieldExprHierarchyLevelAggrPattern, visitor: IFieldExprPatternVisitor<T>): T{\r\n            debug.assertValue(hierarchyLevelAggr, 'hierarchyLevelAggr');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            return visitor.visitHierarchyLevelAggr(hierarchyLevelAggr);\r\n        }\r\n\r\n        function visitMeasure<T>(measure: FieldExprMeasurePattern, visitor: IFieldExprPatternVisitor<T>): T{\r\n            debug.assertValue(measure, 'measure');\r\n            debug.assertValue(visitor, 'visitor');\r\n\r\n            return visitor.visitMeasure(measure);\r\n        }\r\n\r\n        export function toColumnRefSQExpr(columnPattern: FieldExprColumnPattern): SQColumnRefExpr {\r\n            return SQExprBuilder.columnRef(\r\n                SQExprBuilder.entity(columnPattern.schema, columnPattern.entity, columnPattern.entityVar),\r\n                columnPattern.name);\r\n        }\r\n\r\n        export function getAggregate(fieldExpr: FieldExprPattern): QueryAggregateFunction {\r\n            debug.assertValue(fieldExpr, 'fieldExpr');\r\n       \r\n            return visit(fieldExpr, FieldExprPatternAggregateVisitor.instance);\r\n        }\r\n\r\n        export function hasFieldExprName(fieldExpr: FieldExprPattern): boolean {\r\n            return (fieldExpr.column ||\r\n                fieldExpr.columnAggr ||\r\n                fieldExpr.measure) !== undefined;\r\n        }\r\n\r\n        export function getPropertyName(fieldExpr: FieldExprPattern): string {\r\n            let column = (fieldExpr.column ||\r\n                fieldExpr.columnAggr ||\r\n                fieldExpr.measure);\r\n\r\n            if (column)\r\n                return column.name;\r\n        }\r\n\r\n        export function getHierarchyName(fieldExpr: FieldExprPattern): string {\r\n            let hierarchy = fieldExpr.hierarchy;\r\n            if (hierarchy)\r\n                return hierarchy.name;\r\n        }\r\n\r\n        export function getColumnRef(fieldExpr: FieldExprPattern): FieldExprPropertyPattern {\r\n            if (fieldExpr.columnHierarchyLevelVariation)\r\n                return fieldExpr.columnHierarchyLevelVariation.source;\r\n\r\n            return fieldExpr.column || fieldExpr.measure || fieldExpr.columnAggr;\r\n        }\r\n\r\n        export function getFieldExprName(fieldExpr: FieldExprPattern): string {\r\n            let name = getPropertyName(fieldExpr);\r\n\r\n            if (name)\r\n                return name;\r\n\r\n            // In case it is an entity\r\n            return toFieldExprEntityPattern(fieldExpr).entity;\r\n        }\r\n\r\n        export function toFieldExprEntityPattern(fieldExpr: FieldExprPattern): FieldExprEntityPattern {\r\n            return FieldExprPattern.visit(fieldExpr, FieldExprToEntityExprPatternBuilder.instance);\r\n        }\r\n\r\n        export function toFieldExprEntityItemPattern(fieldExpr: FieldExprPattern): FieldExprEntityPattern {\r\n            return FieldExprPattern.visit(fieldExpr, FieldExprToEntityExprPatternBuilder.instance);\r\n        }\r\n\r\n        class FieldExprPatternAggregateVisitor implements IFieldExprPatternVisitor<QueryAggregateFunction> {\r\n            public static instance: FieldExprPatternAggregateVisitor = new FieldExprPatternAggregateVisitor();\r\n\r\n            public visitColumn(column: FieldExprColumnPattern): QueryAggregateFunction {\r\n                return;\r\n            }\r\n\r\n            public visitColumnAggr(columnAggr: FieldExprColumnAggrPattern): QueryAggregateFunction {\r\n                return columnAggr.aggregate;\r\n            }\r\n\r\n            public visitColumnHierarchyLevelVariation(columnHierarchyLevelVariation: FieldExprColumnHierarchyLevelVariationPattern): QueryAggregateFunction {\r\n                return;\r\n            }\r\n\r\n            public visitEntity(entity: FieldExprEntityPattern): QueryAggregateFunction {\r\n                return;\r\n            }\r\n\r\n            public visitEntityAggr(entityAggr: FieldExprEntityAggrPattern): QueryAggregateFunction {\r\n                return entityAggr.aggregate;\r\n            }\r\n\r\n            public visitHierarchy(hierarchy: FieldExprHierarchyPattern): QueryAggregateFunction {\r\n                return;\r\n            }\r\n\r\n            public visitHierarchyLevel(hierarchyLevel: FieldExprHierarchyLevelPattern): QueryAggregateFunction {\r\n                return;\r\n            }\r\n\r\n            public visitHierarchyLevelAggr(hierarchyLevelAggr: FieldExprHierarchyLevelAggrPattern): QueryAggregateFunction {\r\n                return hierarchyLevelAggr.aggregate;\r\n            }\r\n\r\n            public visitMeasure(measure: FieldExprMeasurePattern): QueryAggregateFunction {\r\n                return;\r\n            }\r\n        }\r\n\r\n        class FieldExprToEntityExprPatternBuilder implements IFieldExprPatternVisitor<FieldExprEntityItemPattern> {\r\n            public static instance: FieldExprToEntityExprPatternBuilder = new FieldExprToEntityExprPatternBuilder();\r\n\r\n            public visitColumn(column: FieldExprColumnPattern): FieldExprEntityItemPattern {\r\n                return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(column);\r\n            }\r\n\r\n            public visitColumnAggr(columnAggr: FieldExprColumnAggrPattern): FieldExprEntityItemPattern {\r\n                return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(columnAggr);\r\n            }\r\n\r\n            public visitColumnHierarchyLevelVariation(columnHierarchyLevelVariation: FieldExprColumnHierarchyLevelVariationPattern): FieldExprEntityItemPattern {\r\n                return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(columnHierarchyLevelVariation.source);\r\n            }\r\n\r\n            public visitEntity(entity: FieldExprEntityPattern): FieldExprEntityItemPattern {\r\n                return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(entity);\r\n            }\r\n\r\n            public visitEntityAggr(entityAggr: FieldExprEntityAggrPattern): FieldExprEntityItemPattern {\r\n                return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(entityAggr);\r\n            }\r\n\r\n            public visitHierarchy(hierarchy: FieldExprHierarchyPattern): FieldExprEntityItemPattern {\r\n                return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(hierarchy);\r\n            }\r\n\r\n            public visitHierarchyLevel(hierarchyLevel: FieldExprHierarchyLevelPattern): FieldExprEntityItemPattern {\r\n                return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(hierarchyLevel);\r\n            }\r\n\r\n            public visitHierarchyLevelAggr(hierarchyLevelAggr: FieldExprHierarchyLevelAggrPattern): FieldExprEntityItemPattern {\r\n                return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(hierarchyLevelAggr);\r\n            }\r\n\r\n            public visitMeasure(measure: FieldExprMeasurePattern): FieldExprEntityItemPattern {\r\n                return FieldExprToEntityExprPatternBuilder.toEntityItemExprPattern(measure);\r\n            }\r\n\r\n            private static toEntityItemExprPattern(exprPattern: FieldExprEntityItemPattern): FieldExprEntityItemPattern {\r\n                debug.assertValue(exprPattern, 'exprPattern');\r\n\r\n                let pattern: FieldExprEntityItemPattern = { schema: exprPattern.schema, entity: exprPattern.entity };\r\n\r\n                if (exprPattern.entityVar) {\r\n                    pattern.entityVar = exprPattern.entityVar;\r\n                }\r\n\r\n                return pattern;\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    export module DataViewAnalysis {\r\n        import ArrayExtensions = jsCommon.ArrayExtensions;\r\n        import QueryProjectionsByRole = powerbi.data.QueryProjectionsByRole;\r\n        import DataViewObjectDescriptors = powerbi.data.DataViewObjectDescriptors;\r\n        import DataViewObjectDefinitions = powerbi.data.DataViewObjectDefinitions;\r\n\r\n        export interface ValidateAndReshapeResult {\r\n            dataView?: DataView;\r\n            isValid: boolean;\r\n        }\r\n\r\n        export interface RoleKindByQueryRef {\r\n            [queryRef: string]: VisualDataRoleKind;\r\n        }\r\n\r\n        export interface DataViewMappingResult {\r\n            supportedMappings: DataViewMapping[];\r\n\r\n            /** A set of mapping errors if there are no supported mappings */\r\n            mappingErrors: DataViewMappingMatchError[];\r\n        }\r\n\r\n        export enum DataViewMappingMatchErrorCode {\r\n            conditionRangeTooLarge,\r\n            conditionRangeTooSmall,\r\n            conditionKindExpectedMeasure,\r\n            conditionKindExpectedGrouping,\r\n            conditionKindExpectedGroupingOrMeasure,\r\n        }\r\n\r\n        export interface DataViewMappingMatchError {\r\n            code: DataViewMappingMatchErrorCode;\r\n            roleName: string;\r\n            mappingIndex?: number;\r\n            conditionIndex?: number;\r\n        }\r\n\r\n        /** Reshapes the data view to match the provided schema if possible. If not, returns null */\r\n        export function validateAndReshape(dataView: DataView, dataViewMappings: DataViewMapping[]): ValidateAndReshapeResult {\r\n            if (!dataViewMappings || dataViewMappings.length === 0)\r\n                return { dataView: dataView, isValid: true };\r\n\r\n            if (dataView) {\r\n                for (let dataViewMapping of dataViewMappings) {\r\n                    // Keep the original when possible.\r\n                    if (supports(dataView, dataViewMapping))\r\n                        return { dataView: dataView, isValid: true };\r\n\r\n                    if (dataViewMapping.categorical && dataView.categorical)\r\n                        return reshapeCategorical(dataView, dataViewMapping);\r\n\r\n                    if (dataViewMapping.tree && dataView.tree)\r\n                        return reshapeTree(dataView, dataViewMapping.tree);\r\n\r\n                    if (dataViewMapping.single && dataView.single)\r\n                        return reshapeSingle(dataView, dataViewMapping.single);\r\n\r\n                    if (dataViewMapping.table && dataView.table)\r\n                        return reshapeTable(dataView, dataViewMapping.table);\r\n                }\r\n            }\r\n            else if (ScriptResultUtil.findScriptResult(dataViewMappings)) {\r\n                // Currently, PBI Service treats R Script Visuals as static images.\r\n                // This causes validation to fail, since in PBI service no DataView is generated, but there are DataViewMappings,\r\n                // to support the PBI Desktop scenario.\r\n                // This code will be removed once PBI Service fully supports R Script Visuals.\r\n                // VSTS: 6217994 - [R Viz] Remove temporary DataViewAnalysis validation workaround of static R Script Visual mappings\r\n                return { dataView: dataView, isValid: true };\r\n            }\r\n\r\n            return { isValid: false };\r\n        }\r\n\r\n        function reshapeCategorical(dataView: DataView, dataViewMapping: DataViewMapping): ValidateAndReshapeResult {\r\n            debug.assertValue(dataViewMapping, 'dataViewMapping');\r\n\r\n            //The functionality that used to compare categorical.values.length to schema.values doesn't apply any more, we don't want to use the same logic for re-shaping.\r\n            let categoryRoleMapping = dataViewMapping.categorical;\r\n            let categorical = dataView.categorical;\r\n            if (!categorical)\r\n                return { isValid: false };\r\n\r\n            let rowCount;\r\n            if (categoryRoleMapping.rowCount) {\r\n                rowCount = categoryRoleMapping.rowCount.supported;\r\n                if (rowCount && rowCount.max) {\r\n                    let updated: DataViewCategorical;\r\n                    let categories = categorical.categories;\r\n                    let maxRowCount = rowCount.max;\r\n                    let originalLength = undefined;\r\n                    if (categories) {\r\n                        for (let i = 0, len = categories.length; i < len; i++) {\r\n                            let category = categories[i];\r\n                            originalLength = category.values.length;\r\n                            if (maxRowCount !== undefined && originalLength > maxRowCount) {\r\n\r\n                                // Row count too large: Trim it to fit.\r\n                                let updatedCategories = ArrayExtensions.range(category.values, 0, maxRowCount - 1);\r\n\r\n                                updated = updated || { categories: [] };\r\n                                updated.categories.push({\r\n                                    source: category.source,\r\n                                    values: updatedCategories\r\n                                });\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (categorical.values && categorical.values.length > 0 && maxRowCount) {\r\n                        if (!originalLength)\r\n                            originalLength = categorical.values[0].values.length;\r\n\r\n                        if (maxRowCount !== undefined && originalLength > maxRowCount) {\r\n                            updated = updated || {};\r\n                            updated.values = data.DataViewTransform.createValueColumns();\r\n\r\n                            for (let i = 0, len = categorical.values.length; i < len; i++) {\r\n                                let column = categorical.values[i],\r\n                                    updatedColumn: DataViewValueColumn = {\r\n                                        source: column.source,\r\n                                        values: ArrayExtensions.range(column.values, 0, maxRowCount - 1)\r\n                                    };\r\n\r\n                                if (column.min !== undefined)\r\n                                    updatedColumn.min = column.min;\r\n                                if (column.max !== undefined)\r\n                                    updatedColumn.max = column.max;\r\n                                if (column.subtotal !== undefined)\r\n                                    updatedColumn.subtotal = column.subtotal;\r\n\r\n                                updated.values.push(updatedColumn);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (updated) {\r\n                        dataView = {\r\n                            metadata: dataView.metadata,\r\n                            categorical: updated,\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (supportsCategorical(dataView, dataViewMapping))\r\n                return { dataView: dataView, isValid: true };\r\n\r\n            return null;\r\n        }\r\n\r\n        function reshapeSingle(dataView: DataView, singleRoleMapping: DataViewSingleMapping): ValidateAndReshapeResult {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(singleRoleMapping, 'singleRoleMapping');\r\n\r\n            if (dataView.single)\r\n                return { dataView: dataView, isValid: true };\r\n\r\n            return { isValid: false };\r\n        }\r\n\r\n        function reshapeTree(dataView: DataView, treeRoleMapping: DataViewTreeMapping): ValidateAndReshapeResult {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(treeRoleMapping, 'treeRoleMapping');\r\n\r\n            // TODO: Need to implement the reshaping of Tree\r\n            let metadata = dataView.metadata;\r\n            if (validateRange(countGroups(metadata.columns), treeRoleMapping.depth) == null /*&& conforms(countMeasures(metadata.columns), treeRoleMapping.aggregates)*/)\r\n                return { dataView: dataView, isValid: true };\r\n\r\n            return { isValid: false };\r\n        }\r\n\r\n        function reshapeTable(dataView: DataView, tableRoleMapping: DataViewTableMapping): ValidateAndReshapeResult {\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(tableRoleMapping, 'tableRoleMapping');\r\n\r\n            if (dataView.table)\r\n                return { dataView: dataView, isValid: true };\r\n\r\n            return { isValid: false };\r\n        }\r\n\r\n        export function countGroups(columns: DataViewMetadataColumn[]): number {\r\n            let count = 0;\r\n\r\n            for (let i = 0, len = columns.length; i < len; i++) {\r\n                if (!columns[i].isMeasure)\r\n                    ++count;\r\n            }\r\n\r\n            return count;\r\n        }\r\n\r\n        export function countMeasures(columns: DataViewMetadataColumn[]): number {\r\n            let count = 0;\r\n\r\n            for (let i = 0, len = columns.length; i < len; i++) {\r\n                if (columns[i].isMeasure)\r\n                    ++count;\r\n            }\r\n\r\n            return count;\r\n        }\r\n\r\n        /** Indicates whether the dataView conforms to the specified schema. */\r\n        export function supports(dataView: DataView, roleMapping: DataViewMapping, usePreferredDataViewSchema?: boolean): boolean {\r\n            if (!roleMapping || !dataView)\r\n                return false;\r\n\r\n            if (roleMapping.scriptResult && !supportsScriptResult(dataView.scriptResult, roleMapping.scriptResult))\r\n                return false;\r\n\r\n            if (roleMapping.categorical && !supportsCategorical(dataView, roleMapping.categorical, usePreferredDataViewSchema))\r\n                return false;\r\n\r\n            if (roleMapping.tree && !supportsTree(dataView, roleMapping.tree))\r\n                return false;\r\n\r\n            if (roleMapping.single && !supportsSingle(dataView.single, roleMapping.single))\r\n                return false;\r\n\r\n            if (roleMapping.table && !supportsTable(dataView.table, roleMapping.table, usePreferredDataViewSchema))\r\n                return false;\r\n\r\n            return true;\r\n        }\r\n\r\n        function supportsCategorical(dataView: DataView, categoryRoleMapping: DataViewCategoricalMapping, usePreferredDataViewSchema?: boolean): boolean {\r\n            debug.assertValue(categoryRoleMapping, 'categoryRoleMapping');\r\n\r\n            let dataViewCategorical = dataView.categorical;\r\n            if (!dataViewCategorical)\r\n                return false;\r\n\r\n            // TODO: Disabling this implementation isn't right.\r\n            //if (!conforms(countMeasures(dataView.metadata.columns), categoryRoleMapping.values.roles.length))\r\n            //    return false;\r\n\r\n            if (categoryRoleMapping.rowCount) {\r\n                let rowCount = categoryRoleMapping.rowCount.supported;\r\n                if (usePreferredDataViewSchema && categoryRoleMapping.rowCount.preferred)\r\n                    rowCount = categoryRoleMapping.rowCount.preferred;\r\n\r\n                if (rowCount) {\r\n                    let len: number = 0;\r\n                    if (dataViewCategorical.values && dataViewCategorical.values.length)\r\n                        len = dataViewCategorical.values[0].values.length;\r\n                    else if (dataViewCategorical.categories && dataViewCategorical.categories.length)\r\n                        len = dataViewCategorical.categories[0].values.length;\r\n\r\n                    if (validateRange(len, rowCount) != null)\r\n                        return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function supportsSingle(dataViewSingle: DataViewSingle, singleRoleMapping: DataViewSingleMapping): boolean {\r\n            debug.assertValue(singleRoleMapping, 'singleRoleMapping');\r\n\r\n            if (!dataViewSingle)\r\n                return false;\r\n\r\n            return true;\r\n        }\r\n\r\n        function supportsTree(dataView: DataView, treeRoleMapping: DataViewTreeMapping): boolean {\r\n            debug.assertValue(treeRoleMapping, 'treeRoleMapping');\r\n\r\n            let metadata = dataView.metadata;\r\n            return validateRange(countGroups(metadata.columns), treeRoleMapping.depth) == null;\r\n        }\r\n\r\n        function supportsTable(dataViewTable: DataViewTable, tableRoleMapping: DataViewTableMapping, usePreferredDataViewSchema?: boolean): boolean {\r\n            debug.assertValue(tableRoleMapping, 'tableRoleMapping');\r\n\r\n            if (!dataViewTable)\r\n                return false;\r\n\r\n            if (tableRoleMapping.rowCount) {\r\n                let rowCount = tableRoleMapping.rowCount.supported;\r\n                if (usePreferredDataViewSchema && tableRoleMapping.rowCount.preferred)\r\n                    rowCount = tableRoleMapping.rowCount.preferred;\r\n\r\n                if (rowCount) {\r\n                    let len: number = 0;\r\n                    if (dataViewTable.rows && dataViewTable.rows.length)\r\n                        len = dataViewTable.rows.length;\r\n\r\n                    if (validateRange(len, rowCount) != null)\r\n                        return false;\r\n                }\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function supportsScriptResult(dataView: DataViewScriptResultData, scriptResultRoleMapping: DataViewScriptResultMapping): boolean {\r\n            debug.assertValue(scriptResultRoleMapping, 'scriptResultRoleMapping');\r\n\r\n            if (!dataView)\r\n                return false;\r\n\r\n            if (!dataView.imageBase64)\r\n                return false;\r\n\r\n            return true;\r\n        }\r\n\r\n        /** \r\n         * Determines whether the value conforms to the range in the role condition, returning undefined\r\n         * if so or an appropriate error code if not.\r\n         */\r\n        export function validateRange(value: number, roleCondition: RoleCondition, ignoreMin?: boolean): DataViewMappingMatchErrorCode {\r\n            debug.assertValue(value, 'value');\r\n\r\n            if (!roleCondition)\r\n                return;\r\n\r\n            if (!ignoreMin && roleCondition.min !== undefined && roleCondition.min > value)\r\n                return DataViewMappingMatchErrorCode.conditionRangeTooSmall;\r\n\r\n            if (roleCondition.max !== undefined && roleCondition.max < value)\r\n                return DataViewMappingMatchErrorCode.conditionRangeTooLarge;\r\n        }\r\n\r\n        /** \r\n         * Determines whether the value conforms to the kind in the role condition, returning undefined\r\n         * if so or an appropriate error code if not.\r\n         */\r\n        function validateKind(roleCondition: RoleCondition, roleName: string, projections: QueryProjectionsByRole, roleKindByQueryRef: RoleKindByQueryRef): DataViewMappingMatchErrorCode {\r\n            if (!roleCondition || roleCondition.kind === undefined) {\r\n                return;\r\n            }\r\n            let expectedKind = roleCondition.kind;\r\n            let roleCollection = projections[roleName];\r\n            if (roleCollection) {\r\n                let roleProjections = roleCollection.all();\r\n                for (let roleProjection of roleProjections) {\r\n                    if (roleKindByQueryRef[roleProjection.queryRef] !== expectedKind) {\r\n                        switch (expectedKind) {\r\n                            case VisualDataRoleKind.Measure:\r\n                                return DataViewMappingMatchErrorCode.conditionKindExpectedMeasure;\r\n                            case VisualDataRoleKind.Grouping:\r\n                                return DataViewMappingMatchErrorCode.conditionKindExpectedGrouping;\r\n                            case VisualDataRoleKind.GroupingOrMeasure:\r\n                                return DataViewMappingMatchErrorCode.conditionKindExpectedGroupingOrMeasure;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /** Determines the appropriate DataViewMappings for the projections. */\r\n        export function chooseDataViewMappings(\r\n            projections: QueryProjectionsByRole,\r\n            mappings: DataViewMapping[],\r\n            roleKindByQueryRef: RoleKindByQueryRef,\r\n            objectDescriptors?: DataViewObjectDescriptors,\r\n            objectDefinitions?: DataViewObjectDefinitions): DataViewMappingResult {\r\n            debug.assertValue(projections, 'projections');\r\n            debug.assertAnyValue(mappings, 'mappings');\r\n\r\n            let supportedMappings: DataViewMapping[] = [];\r\n            let errors: DataViewMappingMatchError[] = [];\r\n\r\n            if (!_.isEmpty(mappings)) {\r\n                for (let mappingIndex = 0, mappingCount = mappings.length; mappingIndex < mappingCount; mappingIndex++) {\r\n                    let mapping = mappings[mappingIndex],\r\n                        mappingConditions = mapping.conditions,\r\n                        requiredProperties = mapping.requiredProperties;\r\n                    let allPropertiesValid: boolean = areAllPropertiesValid(requiredProperties, objectDescriptors, objectDefinitions);\r\n                    let conditionsMet: DataViewMappingCondition[] = [];\r\n\r\n                    if (!_.isEmpty(mappingConditions)) {\r\n                        for (let conditionIndex = 0, conditionCount = mappingConditions.length; conditionIndex < conditionCount; conditionIndex++) {\r\n                            let condition = mappingConditions[conditionIndex];\r\n                            let currentConditionErrors = checkForConditionErrors(projections, condition, roleKindByQueryRef);\r\n                            if (!_.isEmpty(currentConditionErrors)) {\r\n                                for (let error of currentConditionErrors) {\r\n                                    error.mappingIndex = mappingIndex;\r\n                                    error.conditionIndex = conditionIndex;\r\n                                    errors.push(error);\r\n                                }\r\n                            }\r\n                            else\r\n                                conditionsMet.push(condition);\r\n                        }\r\n                    }\r\n                    else {\r\n                        conditionsMet.push({});\r\n                    }\r\n\r\n                    if (!_.isEmpty(conditionsMet) && allPropertiesValid) {\r\n                        let supportedMapping = _.cloneDeep(mapping);\r\n\r\n                        let updatedConditions = _.filter(conditionsMet, (condition) => Object.keys(condition).length > 0);\r\n                        if (!_.isEmpty(updatedConditions))\r\n                            supportedMapping.conditions = updatedConditions;\r\n                        supportedMappings.push(supportedMapping);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return {\r\n                supportedMappings: ArrayExtensions.emptyToNull(supportedMappings),\r\n                mappingErrors: ArrayExtensions.emptyToNull(errors),\r\n            };\r\n        }\r\n\r\n        function checkForConditionErrors(projections: QueryProjectionsByRole, condition: DataViewMappingCondition, roleKindByQueryRef: RoleKindByQueryRef): DataViewMappingMatchError[] {\r\n            debug.assertValue(projections, 'projections');\r\n            debug.assertValue(condition, 'condition');\r\n\r\n            let conditionRoles = Object.keys(condition);\r\n            let errors: DataViewMappingMatchError[] = [];\r\n\r\n            for (let i = 0, len = conditionRoles.length; i < len; i++) {\r\n                let roleName: string = conditionRoles[i],\r\n                    isDrillable = projections[roleName] && !_.isEmpty(projections[roleName].activeProjectionRefs),\r\n                    roleCondition = condition[roleName];\r\n\r\n                let roleCount = getPropertyCount(roleName, projections, isDrillable);\r\n                let rangeError = validateRange(roleCount, roleCondition);\r\n                if (rangeError != null) {\r\n                    errors.push({\r\n                        code: rangeError,\r\n                        roleName: roleName,\r\n                    });\r\n                }\r\n                let kindError = validateKind(roleCondition, roleName, projections, roleKindByQueryRef);\r\n                if (kindError != null) {\r\n                    errors.push({\r\n                        code: kindError,\r\n                        roleName: roleName,\r\n                    });\r\n                }\r\n            }\r\n\r\n            return errors;\r\n        }\r\n\r\n        function areAllPropertiesValid(requiredProperties: DataViewObjectPropertyIdentifier[], objectDescriptors: DataViewObjectDescriptors, objectDefinitions?: DataViewObjectDefinitions): boolean {\r\n            if (_.isEmpty(requiredProperties))\r\n                return true;\r\n\r\n            if (!objectDescriptors || !objectDefinitions)\r\n                return false;\r\n\r\n            let staticEvalContext: data.IEvalContext = data.createStaticEvalContext();\r\n\r\n            return _.every(requiredProperties, (requiredProperty) => {\r\n                let objectDescriptorValue = null;\r\n                let objectDescriptorProperty = objectDescriptors[requiredProperty.objectName];\r\n                if (objectDescriptorProperty)\r\n                    objectDescriptorValue = objectDescriptorProperty.properties[requiredProperty.propertyName];\r\n                let objectDefinitionValue = DataViewObjectDefinitions.getValue(objectDefinitions, requiredProperty, null);\r\n\r\n                if (!objectDescriptorValue || !objectDefinitionValue)\r\n                    return false;\r\n\r\n                return data.DataViewObjectEvaluator.evaluateProperty(staticEvalContext, objectDescriptorValue, objectDefinitionValue);\r\n            });\r\n        }\r\n\r\n        export function getPropertyCount(roleName: string, projections: QueryProjectionsByRole, useActiveIfAvailable?: boolean): number {\r\n            debug.assertValue(roleName, 'roleName');\r\n            debug.assertValue(projections, 'projections');\r\n\r\n            let projectionsForRole = projections[roleName];\r\n            if (projectionsForRole) {\r\n                if (useActiveIfAvailable)\r\n                    return 1;\r\n                return projectionsForRole.all().length;\r\n            }\r\n\r\n            return 0;\r\n        }\r\n\r\n        export function hasSameCategoryIdentity(dataView1: DataView, dataView2: DataView): boolean {\r\n            if (dataView1\r\n                && dataView2\r\n                && dataView1.categorical\r\n                && dataView2.categorical) {\r\n                let dv1Categories = dataView1.categorical.categories;\r\n                let dv2Categories = dataView2.categorical.categories;\r\n                if (dv1Categories\r\n                    && dv2Categories\r\n                    && dv1Categories.length === dv2Categories.length) {\r\n                    for (let i = 0, len = dv1Categories.length; i < len; i++) {\r\n                        let dv1Identity = dv1Categories[i].identity;\r\n                        let dv2Identity = dv2Categories[i].identity;\r\n\r\n                        let dv1Length = getLengthOptional(dv1Identity);\r\n                        if (dv1Length !== getLengthOptional(dv2Identity))\r\n                            return false;\r\n\r\n                        for (let j = 0; j < dv1Length; j++) {\r\n                            if (!DataViewScopeIdentity.equals(dv1Identity[j], dv2Identity[j]))\r\n                                return false;\r\n                        }\r\n                    }\r\n\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        function getLengthOptional(identity: DataViewScopeIdentity[]): number {\r\n            if (identity)\r\n                return identity.length;\r\n\r\n            return 0;\r\n        }\r\n\r\n        export function areMetadataColumnsEquivalent(column1: DataViewMetadataColumn, column2: DataViewMetadataColumn): boolean {\r\n            if (!column1 && !column2)\r\n                return true;\r\n\r\n            if (!column1 || !column2)\r\n                return false;\r\n\r\n            if (column1.displayName !== column2.displayName)\r\n                return false;\r\n\r\n            if (column1.queryName !== column2.queryName)\r\n                return false;\r\n\r\n            if (column1.isMeasure !== column2.isMeasure)\r\n                return false;\r\n\r\n            if (column1.type !== column2.type)\r\n                return false;\r\n\r\n            if (column1.sort !== column2.sort)\r\n                return false;\r\n\r\n            return true;\r\n        }\r\n\r\n        /* Returns true if the metadata columns at the same positions in the array are equivalent. */\r\n        export function isMetadataEquivalent(metadata1: DataViewMetadata, metadata2: DataViewMetadata): boolean {\r\n            if (!metadata1 && !metadata2)\r\n                return true;\r\n\r\n            if (!metadata1 || !metadata2)\r\n                return false;\r\n\r\n            let previousColumnsLength = metadata1.columns.length;\r\n            let newColumnsLength = metadata2.columns.length;\r\n\r\n            if (previousColumnsLength !== newColumnsLength)\r\n                return false;\r\n\r\n            for (let i: number = 0; i < newColumnsLength; i++) {\r\n                if (!DataViewAnalysis.areMetadataColumnsEquivalent(metadata1.columns[i], metadata2.columns[i]))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import ArrayExtensions = jsCommon.ArrayExtensions;\r\n    import Lazy = jsCommon.Lazy;\r\n\r\n    export module DataViewRoleWildcard {\r\n        export function fromRoles(roles: string[]): DataViewRoleWildcard {\r\n            return new DataViewRoleWildcardImpl(roles);\r\n        }\r\n\r\n        export function equals(firstRoleWildcard: DataViewRoleWildcard, secondRoleWildcard: DataViewRoleWildcard): boolean {\r\n            return firstRoleWildcard.key &&\r\n                secondRoleWildcard.key &&\r\n                firstRoleWildcard.key === secondRoleWildcard.key &&\r\n                ArrayExtensions.sequenceEqual<string>(\r\n                    firstRoleWildcard.roles,\r\n                    secondRoleWildcard.roles,\r\n                    (role1: string, role2: string) => role1 === role2);\r\n        }\r\n\r\n        class DataViewRoleWildcardImpl implements DataViewRoleWildcard {\r\n            private _roles: string[];\r\n            private _key: Lazy<string>;\r\n\r\n            public constructor(roles: string[]) {\r\n                debug.assertNonEmpty(roles, 'roles');\r\n\r\n                this._roles = roles;\r\n                this._key = new Lazy<string>(() => JSON.stringify(this.roles));\r\n            }\r\n\r\n            public get roles(): string[] {\r\n                return this._roles;\r\n            }\r\n\r\n            public get key(): string {\r\n                return this._key.getValue();\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n\r\n    export module DataViewScopeIdentity {\r\n        /** Compares the two DataViewScopeIdentity values for equality. */\r\n        export function equals(x: DataViewScopeIdentity, y: DataViewScopeIdentity, ignoreCase?: boolean): boolean {\r\n            // Normalize falsy to null\r\n            x = x || null;\r\n            y = y || null;\r\n\r\n            if (x === y)\r\n                return true;\r\n\r\n            if (!x !== !y)\r\n                return false;\r\n\r\n            debug.assertValue(x, 'x');\r\n            debug.assertValue(y, 'y');\r\n\r\n            return data.SQExpr.equals(<data.SQExpr>x.expr, <data.SQExpr>y.expr, ignoreCase);\r\n        }\r\n\r\n        export function filterFromIdentity(identities: DataViewScopeIdentity[], isNot?: boolean): data.SemanticFilter {\r\n            if (_.isEmpty(identities))\r\n                return;\r\n            \r\n            let exprs: data.SQExpr[] = [];\r\n            for (let identity of identities) {\r\n                exprs.push(<data.SQExpr>identity.expr);\r\n            }\r\n\r\n            return filterFromExprs(exprs, isNot);\r\n        }\r\n\r\n        export function filterFromExprs(orExprs: data.SQExpr[], isNot?: boolean): data.SemanticFilter {\r\n            if (_.isEmpty(orExprs))\r\n                return;\r\n\r\n            let resultExpr: data.SQExpr;\r\n            for (let orExpr of orExprs) {\r\n                let inExpr = data.ScopeIdentityExtractor.getInExpr(orExpr);\r\n                if (resultExpr)\r\n                    resultExpr = data.SQExprBuilder.or(resultExpr, inExpr);\r\n                else\r\n                    resultExpr = inExpr || orExpr;\r\n            }\r\n            \r\n            if (resultExpr) {\r\n                if (isNot)\r\n                    resultExpr = powerbi.data.SQExprBuilder.not(resultExpr);\r\n            }\r\n\r\n            return powerbi.data.SemanticFilter.fromSQExpr(resultExpr);\r\n        }\r\n    }\r\n\r\n    export module data {\r\n        import Lazy = jsCommon.Lazy;\r\n\r\n        export function createDataViewScopeIdentity(expr: SQExpr): DataViewScopeIdentity {\r\n            return new DataViewScopeIdentityImpl(expr);\r\n        }\r\n\r\n        class DataViewScopeIdentityImpl implements DataViewScopeIdentity {\r\n            private _expr: SQExpr;\r\n            private _key: Lazy<string>;\r\n\r\n            public constructor(expr: SQExpr) {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                this._expr = expr;\r\n                this._key = new Lazy(() => SQExprShortSerializer.serialize(expr));\r\n            }\r\n\r\n            public get expr(): SQExpr {\r\n                return this._expr;\r\n            }\r\n\r\n            public get key(): string {\r\n                return this._key.getValue();\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import Lazy = jsCommon.Lazy;\r\n\r\n    export module DataViewScopeWildcard {\r\n        export function matches(wildcard: DataViewScopeWildcard, instance: DataViewScopeIdentity): boolean {\r\n            let instanceExprs = ScopeIdentityExtractor.getKeys(<SQExpr>instance.expr);\r\n            if (!instanceExprs)\r\n                return false;\r\n\r\n            return SQExprUtils.sequenceEqual(<SQExpr[]>wildcard.exprs, instanceExprs);\r\n        }\r\n\r\n        export function equals(firstScopeWildcard: DataViewScopeWildcard, secondScopeWildcard: DataViewScopeWildcard): boolean {\r\n            return firstScopeWildcard.key === secondScopeWildcard.key &&\r\n                SQExprUtils.sequenceEqual(<SQExpr[]>firstScopeWildcard.exprs, <SQExpr[]>secondScopeWildcard.exprs);\r\n        }\r\n\r\n        export function fromExprs(exprs: SQExpr[]): DataViewScopeWildcard {\r\n            return new DataViewScopeWildcardImpl(exprs);\r\n        }\r\n\r\n        class DataViewScopeWildcardImpl implements DataViewScopeWildcard {\r\n            private _exprs: SQExpr[];\r\n            private _key: Lazy<string>;\r\n\r\n            public constructor(exprs: SQExpr[]) {\r\n                debug.assertValue(exprs, 'exprs');\r\n\r\n                this._exprs = exprs;\r\n                this._key = new Lazy(() => SQExprShortSerializer.serializeArray(exprs));\r\n            }\r\n\r\n            public get exprs(): SQExpr[] {\r\n                return this._exprs;\r\n            }\r\n\r\n            public get key(): string {\r\n                return this._key.getValue();\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export interface IColorAllocatorCache {\r\n        get(key: SQFillRuleExpr): IColorAllocator;\r\n        register(key: SQFillRuleExpr, colorAllocator: IColorAllocator): this;\r\n    }\r\n\r\n    export function createColorAllocatorCache(): IColorAllocatorCache {\r\n        return new ColorAllocatorProvider();\r\n    }\r\n\r\n    interface ColorAllocatorCacheEntry {\r\n        key: SQFillRuleExpr;\r\n        allocator: IColorAllocator;\r\n    }\r\n\r\n    class ColorAllocatorProvider implements IColorAllocatorCache {\r\n        private cache: ColorAllocatorCacheEntry[];\r\n\r\n        constructor() {\r\n            this.cache = [];\r\n        }\r\n\r\n        public get(key: SQFillRuleExpr): IColorAllocator {\r\n            debug.assertValue(key, 'key');\r\n\r\n            for (let entry of this.cache) {\r\n                if (entry.key === key)\r\n                    return entry.allocator;\r\n            }\r\n        }\r\n\r\n        public register(key: SQFillRuleExpr, colorAllocator: IColorAllocator): this {\r\n            debug.assertValue(key, 'key');\r\n            debug.assertValue(colorAllocator, 'colorAllocator');\r\n            debug.assert(this.get(key) == null, 'Trying to re-register for same key expr.');\r\n\r\n            this.cache.push({\r\n                key: key,\r\n                allocator: colorAllocator,\r\n            });\r\n\r\n            return this;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    /** Responsible for providing specific values to be used by expression and rule evaluation. */\r\n    export interface IEvalContext {\r\n        getColorAllocator(expr: SQFillRuleExpr): IColorAllocator;\r\n        getExprValue(expr: SQExpr): PrimitiveValue;\r\n        getRoleValue(roleName: string): PrimitiveValue;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import RoleKindByQueryRef = DataViewAnalysis.RoleKindByQueryRef;\r\n\r\n    export interface DataViewRegressionRunOptions {\r\n        dataViewMappings: DataViewMapping[];\r\n        visualDataViews: DataView[];\r\n        dataRoles: VisualDataRole[];\r\n        objectDescriptors: DataViewObjectDescriptors;\r\n        objectDefinitions: DataViewObjectDefinitions;\r\n        colorAllocatorFactory: IColorAllocatorFactory;\r\n        transformSelects: DataViewSelectTransform[];\r\n        metadata: DataViewMetadata;\r\n        projectionActiveItems: DataViewProjectionActiveItems;\r\n    }\r\n\r\n    export module DataViewRegression {\r\n        // TODO VSTS 6842046: Currently we are using a constant queryName since we don't have a way to generate\r\n        // unique ones. There is a bug filed to do this by lawong, so this part will be fixed with that bug.\r\n        const regressionXQueryName: string = 'RegressionX';\r\n        const regressionSeriesQueryName: string = 'RegressionSeries';\r\n        export const regressionYQueryName: string = 'RegressionY';\r\n\r\n        export function run(options: DataViewRegressionRunOptions): DataView[] {\r\n            debug.assertValue(options, 'options');\r\n\r\n            let dataViewMappings: DataViewMapping[] = options.dataViewMappings;\r\n            let visualDataViews: DataView[] = options.visualDataViews;\r\n            let dataRoles: VisualDataRole[] = options.dataRoles;\r\n            let objectDescriptors: DataViewObjectDescriptors = options.objectDescriptors;\r\n            let objectDefinitions: DataViewObjectDefinitions = options.objectDefinitions;\r\n            let colorAllocatorFactory: IColorAllocatorFactory = options.colorAllocatorFactory;\r\n            let transformSelects: DataViewSelectTransform[] = options.transformSelects;\r\n            let projectionActiveItems = options.projectionActiveItems;\r\n            let metadata: DataViewMetadata = options.metadata;\r\n\r\n            if (!_.isEmpty(visualDataViews) && transformSelects && metadata) {\r\n                // compute linear regression line if applicable\r\n                let roleKindByQueryRef: RoleKindByQueryRef = DataViewSelectTransform.createRoleKindFromMetadata(transformSelects, metadata);\r\n                let projections: QueryProjectionsByRole = DataViewSelectTransform.projectionsFromSelects(transformSelects, projectionActiveItems);\r\n                if (!roleKindByQueryRef || !projections || _.isEmpty(dataViewMappings) || !objectDescriptors || !objectDefinitions)\r\n                    return visualDataViews;\r\n\r\n                let applicableDataViewMappings: DataViewMapping[] = DataViewAnalysis.chooseDataViewMappings(projections, dataViewMappings, roleKindByQueryRef, objectDescriptors, objectDefinitions).supportedMappings;\r\n\r\n                if (applicableDataViewMappings) {\r\n                    let regressionDataViewMapping: DataViewMapping = _.find(applicableDataViewMappings, (dataViewMapping) => {\r\n                        return dataViewMapping.usage && dataViewMapping.usage.regression;\r\n                    });\r\n\r\n                    if (regressionDataViewMapping) {\r\n                        let regressionDataViews: DataView[] = [];\r\n                        for (let visualDataView of visualDataViews) {\r\n                            let regressionDataView: DataView = this.linearRegressionTransform(visualDataView, dataRoles, regressionDataViewMapping, objectDescriptors, objectDefinitions, colorAllocatorFactory);\r\n\r\n                            if (regressionDataView)\r\n                                regressionDataViews.push(regressionDataView);\r\n                        }\r\n\r\n                        if (!_.isEmpty(regressionDataViews))\r\n                            visualDataViews.push(...regressionDataViews);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return visualDataViews;\r\n        }\r\n\r\n        /**\r\n         * This function will compute the linear regression algorithm on the sourceDataView and create a new dataView.\r\n         * It works on scalar axis only.\r\n         * The algorithm is as follows\r\n         *\r\n         * 1. Find the cartesian X and Y roles and the columns that correspond to those roles\r\n         * 2. Get the data points, (X, Y) pairs, for each series, combining if needed.\r\n         * 3. Compute the X and Y points for regression line using Y = Slope * X + Intercept\r\n         * If highlights values are present, repeat steps 2 & 3 using highlight values.\r\n         * 4. Create the new dataView using the points computed above\r\n         */\r\n        export function linearRegressionTransform(\r\n            sourceDataView: DataView,\r\n            dataRoles: VisualDataRole[],\r\n            regressionDataViewMapping: DataViewMapping,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            objectDefinitions: DataViewObjectDefinitions,\r\n            colorAllocatorFactory: IColorAllocatorFactory): DataView {\r\n            debug.assertValue(sourceDataView, 'sourceDataView');\r\n            debug.assertValue(sourceDataView.categorical, 'sourceDataView.categorical');\r\n            debug.assertValue(dataRoles, 'dataRoles');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(objectDefinitions, 'objectDefinitions');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n\r\n            if (!sourceDataView.categorical)\r\n                return;\r\n\r\n            // Step 1\r\n            let xColumns: DataViewCategoricalColumn[] = getColumnsForCartesianRoleKind(CartesianRoleKind.X, sourceDataView.categorical, dataRoles);\r\n            let yColumns: DataViewCategoricalColumn[] = getColumnsForCartesianRoleKind(CartesianRoleKind.Y, sourceDataView.categorical, dataRoles);\r\n\r\n            if (_.isEmpty(xColumns) || _.isEmpty(yColumns))\r\n                return;\r\n\r\n            let xColumnSource = xColumns[0].source;\r\n            let yColumnSource = yColumns[0].source;\r\n\r\n            let combineSeries = true;\r\n            if (regressionDataViewMapping.usage && regressionDataViewMapping.usage.regression && sourceDataView.metadata.objects) {\r\n                let regressionUsage = regressionDataViewMapping.usage.regression;\r\n\r\n                let combineSeriesPropertyId = regressionUsage['combineSeries'];\r\n                if (combineSeriesPropertyId) {\r\n                    combineSeries = DataViewObjects.getValue<boolean>(sourceDataView.metadata.objects, combineSeriesPropertyId, true);\r\n                }\r\n            }\r\n\r\n            // Step 2\r\n            let dataPointsBySeries = getDataPointsBySeries(xColumns, yColumns, combineSeries, /* preferHighlights */ false);\r\n            let lineDefSet = calculateLineDefinitions(dataPointsBySeries);\r\n            let xMin = lineDefSet.xMin;\r\n            let xMax = lineDefSet.xMax;\r\n\r\n            let shouldComputeHightlights = hasHighlightValues(yColumns) || hasHighlightValues(xColumns);\r\n            let highlightsLineDefSet: LineDefinitionSet;\r\n            if (shouldComputeHightlights) {\r\n                let highlightDataPointsBySeries = getDataPointsBySeries(xColumns, yColumns, combineSeries, /* preferHighlights */ true);\r\n                highlightsLineDefSet = calculateLineDefinitions(highlightDataPointsBySeries);\r\n                if (highlightsLineDefSet) {\r\n                    xMin = _.min([xMin, highlightsLineDefSet.xMin]);\r\n                    xMax = _.max([xMax, highlightsLineDefSet.xMax]);\r\n                }\r\n                else {\r\n                    shouldComputeHightlights = false;\r\n                }\r\n            }\r\n\r\n            // Step 3\r\n            let valuesByTrend: number[][] = [];\r\n            for (let trend of lineDefSet.lineDefs) {\r\n                valuesByTrend.push(computeLineYValues(trend, +xMin, +xMax));\r\n            }\r\n\r\n            let highlightsByTrend: number[][];\r\n            if (shouldComputeHightlights) {\r\n                highlightsByTrend = [];\r\n                for (let trend of highlightsLineDefSet.lineDefs) {\r\n                    highlightsByTrend.push(computeLineYValues(trend, +xMin, +xMax));\r\n                }\r\n            }\r\n\r\n            // Step 4\r\n            let groupValues: PrimitiveValue[];\r\n            if (combineSeries) {\r\n                groupValues = ['combinedRegressionSeries'];\r\n            }\r\n            else {\r\n                // If we are producing a trend line per series we need to maintain the group identities so that we can map between the \r\n                // trend line and the original series (to match the color for example).\r\n                if (sourceDataView.categorical.values.source) {\r\n                    // Source data view has dynamic series.\r\n                    let groups = sourceDataView.categorical.values.grouped();\r\n                    groupValues = _.map(groups, (group) => group.name);\r\n                }\r\n                else {\r\n                    // Source data view has static or no series.\r\n                    groupValues = _.map(yColumns, (column) => column.source.queryName);\r\n                }\r\n            }\r\n\r\n            // Step 5\r\n            let regressionDataView: DataView = createRegressionDataView(\r\n                xColumnSource,\r\n                yColumnSource,\r\n                groupValues,\r\n                [xMin, xMax],\r\n                valuesByTrend,\r\n                highlightsByTrend,\r\n                sourceDataView,\r\n                regressionDataViewMapping,\r\n                objectDescriptors,\r\n                objectDefinitions,\r\n                colorAllocatorFactory);\r\n\r\n            return regressionDataView;\r\n        }\r\n\r\n        function calculateLineDefinitions(dataPointsBySeries: DataPointSet[]): LineDefinitionSet {\r\n            let xMin: PrimitiveValue;\r\n            let xMax: PrimitiveValue;\r\n            let lineDefs: LineDefinition[] = [];\r\n            for (let dataPointSet of dataPointsBySeries) {\r\n                let unsortedXValues: PrimitiveValue[] = dataPointSet.xValues;\r\n                let unsortedYValues: PrimitiveValue[] = dataPointSet.yValues;\r\n\r\n                if (_.isEmpty(unsortedXValues) || _.isEmpty(unsortedYValues))\r\n                    return;\r\n\r\n                // get the data type for each column; we will have null type when dataPoints have different type or if a value is null\r\n                let xDataType: string = getDataType(unsortedXValues);\r\n                if (!xDataType)\r\n                    return;\r\n                let yDataType: string = getDataType(unsortedYValues);\r\n                if (!yDataType)\r\n                    return;\r\n\r\n                let sortedDataPointSet: DataPointSet = sortValues(unsortedXValues, unsortedYValues);\r\n                let minCategoryValue: PrimitiveValue = sortedDataPointSet.xValues[0];\r\n                let maxCategoryValue: PrimitiveValue = sortedDataPointSet.xValues[sortedDataPointSet.xValues.length - 1];\r\n\r\n                let lineDef: LineDefinition = computeRegressionLine(sortedDataPointSet.xValues, sortedDataPointSet.yValues);\r\n\r\n                xMin = _.min([xMin, minCategoryValue]);\r\n                xMax = _.max([xMax, maxCategoryValue]);\r\n\r\n                lineDefs.push(lineDef);\r\n            }\r\n\r\n            return {\r\n                lineDefs: lineDefs,\r\n                xMin: xMin,\r\n                xMax: xMax,\r\n            };\r\n        }\r\n\r\n        function getColumnsForCartesianRoleKind(roleKind: CartesianRoleKind, categorical: DataViewCategorical, roles: VisualDataRole[]): DataViewCategoricalColumn[] {\r\n            debug.assertValue(roleKind, 'roleKind');\r\n            debug.assertValue(categorical, 'categorical');\r\n\r\n            let columns = getColumnsWithRoleKind(roleKind, categorical.values, roles);\r\n            if (!_.isEmpty(columns))\r\n                return columns;\r\n\r\n            let categories = categorical.categories;\r\n            if (_.isEmpty(categories))\r\n                return;\r\n\r\n            debug.assert(categories.length === 1, 'composite category columns not supported');\r\n            let categoryColumn = categories[0];\r\n            columns = getColumnsWithRoleKind(roleKind, [categoryColumn], roles);\r\n            if (!_.isEmpty(columns))\r\n                return columns;\r\n        }\r\n\r\n        function getColumnsWithRoleKind(roleKind: CartesianRoleKind, columns: DataViewCategoricalColumn[], roles: VisualDataRole[]): DataViewCategoricalColumn[] {\r\n            if (_.isEmpty(columns))\r\n                return;\r\n\r\n            return _.filter(columns, (column) => {\r\n                for (let roleName in column.source.roles) {\r\n                    if (!column.source.roles[roleName])\r\n                        continue;\r\n\r\n                    let role = _.find(roles, (role) => role.name === roleName);\r\n                    if (role && role.cartesianKind === roleKind)\r\n                        return true;\r\n                }\r\n\r\n                return false;\r\n            });\r\n        }\r\n\r\n        function getDataType(values: PrimitiveValue[]): string {\r\n            let firstNonNull: PrimitiveValue = _.find(values, (value) => value != null);\r\n            if (firstNonNull == null)\r\n                return;\r\n\r\n            let dataType: string = typeof firstNonNull;\r\n\r\n            if (_.some(values, (value) => value != null && typeof value !== dataType))\r\n                return;\r\n\r\n            return dataType;\r\n        }\r\n\r\n        function sortValues(unsortedXValues: PrimitiveValue[], unsortedYValues: PrimitiveValue[]): DataPointSet {\r\n            debug.assertValue(unsortedXValues, 'unsortedXValues');\r\n            debug.assertValue(unsortedYValues, 'unsortedYValues');\r\n\r\n            let zippedValues = _.zip(unsortedXValues, unsortedYValues);\r\n            let [xValues, yValues] = _.chain(zippedValues)\r\n                .filter((valuePair) => valuePair[0] != null && valuePair[1] != null)\r\n                .sortBy((valuePair) => valuePair[0])\r\n                .unzip()\r\n                .value();\r\n\r\n            return {\r\n                xValues: xValues,\r\n                yValues: yValues\r\n            };\r\n        }\r\n\r\n        /**\r\n         * Computes a line definition using linear regression.\r\n         *   xBar: average of X values, yBar: average of Y values\r\n         *   ssXX: sum of squares of X values = Sum(xi - xBar)^2\r\n         *   ssXY: sum of squares of X and Y values  = Sum((xi - xBar)(yi - yBar)\r\n         *   Slope: ssXY / ssXX\r\n         *   Intercept: yBar - xBar * slope\r\n         */\r\n        function computeRegressionLine(xValues: number[], yValues: number[]): LineDefinition {\r\n            debug.assertValue(xValues, 'xValues');\r\n            debug.assertValue(yValues, 'yValues');\r\n\r\n            let xBar = _.sum(xValues) / xValues.length;\r\n            let yBar = _.sum(yValues) / yValues.length;\r\n\r\n            let ssXX = _.chain(xValues)\r\n                .map((x) => {\r\n                    return (x - xBar) ** 2;\r\n                })\r\n                .sum();\r\n\r\n            let ssXY = _.chain(xValues)\r\n                .map((x, i) => {\r\n                    return (x - xBar) * (yValues[i] - yBar);\r\n                })\r\n                .sum();\r\n\r\n            let slope = ssXY / ssXX;\r\n            let intercept = yBar - (xBar * slope);\r\n\r\n            return {\r\n                slope: slope,\r\n                intercept: intercept\r\n            };\r\n        }\r\n\r\n        function computeLineYValues(lineDef: LineDefinition, x1: number, x2: number): number[] {\r\n            return [x1 * lineDef.slope + lineDef.intercept, x2 * lineDef.slope + lineDef.intercept];\r\n        }\r\n\r\n        function getValuesFromColumn(column: DataViewCategoricalColumn, preferHighlights: boolean): PrimitiveValue[] {\r\n            if (preferHighlights) {\r\n                // Attempt to use highlight values. When X is categorical, we may not have highlight values so we should fall back to the non-highlight values.\r\n                let valueColumn = <DataViewValueColumn>column;\r\n                if (valueColumn.highlights) {\r\n                    return valueColumn.highlights;\r\n                }\r\n            }\r\n\r\n            return column.values;\r\n        }\r\n\r\n        function getDataPointsBySeries(xColumns: DataViewCategoricalColumn[], yColumns: DataViewCategoricalColumn[], combineSeries: boolean, preferHighlights: boolean): DataPointSet[] {\r\n            let dataPointsBySeries: DataPointSet[] = [];\r\n            let xValueArray: PrimitiveValue[][] = _.map(xColumns, (column) => getValuesFromColumn(column, preferHighlights));\r\n            let seriesYValues: PrimitiveValue[][] = _.map(yColumns, (column) => getValuesFromColumn(column, preferHighlights));\r\n\r\n            let multipleXValueColumns: boolean = xColumns.length > 1;\r\n            for (let i = 0; i < seriesYValues.length; i++) {\r\n                let xValues = multipleXValueColumns ? xValueArray[i] : xValueArray[0];\r\n                let yValues = seriesYValues[i];\r\n\r\n                if (combineSeries && dataPointsBySeries.length > 0) {\r\n                    dataPointsBySeries[0].xValues = dataPointsBySeries[0].xValues.concat(xValues);\r\n                    dataPointsBySeries[0].yValues = dataPointsBySeries[0].yValues.concat(yValues);\r\n                }\r\n                else {\r\n                    dataPointsBySeries.push({\r\n                        xValues: xValues,\r\n                        yValues: yValues,\r\n                    });\r\n                }\r\n            }\r\n\r\n            return dataPointsBySeries;\r\n        }\r\n\r\n        function createRegressionDataView(\r\n            xColumnSource: DataViewMetadataColumn,\r\n            yColumnSource: DataViewMetadataColumn,\r\n            groupValues: PrimitiveValue[],\r\n            categories: PrimitiveValue[],\r\n            values: PrimitiveValue[][],\r\n            highlights: PrimitiveValue[][],\r\n            sourceDataView: DataView,\r\n            regressionDataViewMapping: DataViewMapping,\r\n            objectDescriptors: DataViewObjectDescriptors,\r\n            objectDefinitions: DataViewObjectDefinitions,\r\n            colorAllocatorFactory: IColorAllocatorFactory): DataView {\r\n            debug.assertValue(xColumnSource, 'xColumnSource');\r\n            debug.assertValue(yColumnSource, 'yColumnSource');\r\n            debug.assertValue(categories, 'categories');\r\n            debug.assertValue(values, 'values');\r\n            debug.assertValue(sourceDataView, 'sourceDataView');\r\n            debug.assertValue(objectDescriptors, 'objectDescriptors');\r\n            debug.assertValue(objectDefinitions, 'objectDefinitions');\r\n            debug.assertValue(colorAllocatorFactory, 'colorAllocatorFactory');\r\n            debug.assertAnyValue(highlights, 'highlights');\r\n            debug.assert(!highlights || highlights.length === values.length, 'highlights should have the same length as values');\r\n\r\n            let xRole: string = (<DataViewRoleForMapping>regressionDataViewMapping.categorical.categories).for.in;\r\n            let grouped = (<DataViewGroupedRoleMapping>regressionDataViewMapping.categorical.values).group;\r\n            let yRole: string;\r\n            let seriesRole: string;\r\n            if (grouped && !_.isEmpty(grouped.select)) {\r\n                yRole = (<DataViewRoleForMapping>grouped.select[0]).for ?\r\n                    (<DataViewRoleForMapping>grouped.select[0]).for.in :\r\n                    (<DataViewRoleBindMapping>grouped.select[0]).bind.to;\r\n                seriesRole = grouped.by;\r\n            }\r\n            if (!yRole || !seriesRole)\r\n                return;\r\n\r\n            let categoricalRoles: { [name: string]: boolean } = {[xRole]: true};\r\n            let valueRoles: { [name: string]: boolean } = {[yRole]: true};\r\n            let seriesRoles: { [name: string]: boolean } = {[seriesRole]: true};\r\n\r\n            let valuesBySeries: DataViewBuilderSeriesData[][] = [];\r\n            for (let index in values) {\r\n                let seriesData: DataViewBuilderSeriesData = {\r\n                    values: values[index],\r\n                };\r\n\r\n                if (highlights)\r\n                    seriesData.highlights = highlights[index];\r\n\r\n                valuesBySeries.push([seriesData]);\r\n            }\r\n\r\n            let regressionDataView: DataView = createCategoricalDataViewBuilder()\r\n                .withCategory({\r\n                    source: {\r\n                        displayName: xColumnSource.displayName,\r\n                        queryName: regressionXQueryName,\r\n                        type: xColumnSource.type,\r\n                        isMeasure: false,\r\n                        roles: categoricalRoles\r\n                    },\r\n                    values: categories,\r\n                    identityFrom: {\r\n                        fields: [SQExprBuilder.columnRef(SQExprBuilder.entity('s', 'RegressionEntity'), 'RegressionCategories')],\r\n                    },\r\n                })\r\n                .withGroupedValues({\r\n                    groupColumn: {\r\n                        source: {\r\n                            displayName: yColumnSource.displayName + 'Regression',\r\n                            queryName: regressionSeriesQueryName,\r\n                            type: yColumnSource.type,\r\n                            isMeasure: yColumnSource.isMeasure,\r\n                            roles: seriesRoles\r\n                        },\r\n                        values: groupValues,\r\n                        identityFrom: {\r\n                            fields: [SQExprBuilder.columnRef(SQExprBuilder.entity('s', 'RegressionEntity'), 'RegressionSeries')],\r\n                        }\r\n                    },\r\n                    valueColumns: [{\r\n                        source: {\r\n                            displayName: yColumnSource.displayName,\r\n                            queryName: regressionYQueryName,\r\n                            type: yColumnSource.type,\r\n                            isMeasure: yColumnSource.isMeasure,\r\n                            roles: valueRoles\r\n                        },\r\n                    }],\r\n                    data: valuesBySeries\r\n                })\r\n                .build();\r\n            DataViewTransform.transformObjects(regressionDataView, data.StandardDataViewKinds.Categorical, objectDescriptors, objectDefinitions, [], colorAllocatorFactory);\r\n            return regressionDataView;\r\n        }\r\n\r\n        function hasHighlightValues(columns: DataViewCategoricalColumn[]): boolean {\r\n            return _.any(columns, (column) => {\r\n                let valueColumn = <DataViewValueColumn>column;\r\n                return valueColumn.highlights != null;\r\n            });\r\n        }\r\n    }\r\n\r\n    interface DataPointSet {\r\n        xValues: any[];\r\n        yValues: any[];\r\n    }\r\n\r\n    interface LineDefinition {\r\n        slope: number;\r\n        intercept: number;\r\n    }\r\n\r\n    interface LineDefinitionSet {\r\n        lineDefs: LineDefinition[];\r\n        xMin: PrimitiveValue;\r\n        xMax: PrimitiveValue;\r\n    }\r\n}\r\n","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import RoleKindByQueryRef = DataViewAnalysis.RoleKindByQueryRef;\r\n\r\n    export interface DataViewSelectTransform {\r\n        displayName?: string;\r\n        queryName?: string;\r\n        format?: string;\r\n        type?: ValueType;\r\n        roles?: { [roleName: string]: boolean };\r\n        kpi?: DataViewKpiColumnMetadata;\r\n        sort?: SortDirection;\r\n        expr?: SQExpr;\r\n        discourageAggregationAcrossGroups?: boolean;\r\n\r\n        /** Describes the default value applied to a column, if any. */\r\n        defaultValue?: DefaultValueDefinition;\r\n    }\r\n\r\n    export module DataViewSelectTransform {\r\n        /** Convert selection info to projections */\r\n        export function projectionsFromSelects(selects: DataViewSelectTransform[], projectionActiveItems: DataViewProjectionActiveItems): QueryProjectionsByRole {\r\n            debug.assertAnyValue(selects, \"selects\");\r\n            debug.assertAnyValue(projectionActiveItems, \"projectionActiveItems\");\r\n\r\n            let projections: QueryProjectionsByRole = {};\r\n            for (let select of selects) {\r\n                let roles = select.roles;\r\n                if (!roles)\r\n                    continue;\r\n\r\n                for (let roleName in roles) {\r\n                    if (roles[roleName]) {\r\n                        let qp = projections[roleName];\r\n                        if (!qp)\r\n                            qp = projections[roleName] = new QueryProjectionCollection([]);\r\n                        qp.all().push({ queryRef: select.queryName });\r\n\r\n                        if (projectionActiveItems && projectionActiveItems[roleName])\r\n                            qp.activeProjectionRefs = _.map(projectionActiveItems[roleName], (activeItem: DataViewProjectionActiveItemInfo) => activeItem.queryRef);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return projections;\r\n        }\r\n\r\n        /** Use selections and metadata to fashion query role kinds */\r\n        export function createRoleKindFromMetadata(selects: DataViewSelectTransform[], metadata: DataViewMetadata): RoleKindByQueryRef {\r\n            let roleKindByQueryRef: DataViewAnalysis.RoleKindByQueryRef = {};\r\n            for (let column of metadata.columns) {\r\n                if ((!column.index && column.index !== 0) || column.index < 0 || column.index >= selects.length)\r\n                    continue;\r\n\r\n                let select = selects[column.index];\r\n                if (select) {\r\n                    let queryRef = select.queryName;\r\n                    if (queryRef && roleKindByQueryRef[queryRef] === undefined) {\r\n                        roleKindByQueryRef[queryRef] = column.isMeasure ? VisualDataRoleKind.Measure : VisualDataRoleKind.Grouping;\r\n                    }\r\n                }\r\n            }\r\n            return roleKindByQueryRef;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export interface ICategoricalEvalContext extends IEvalContext {\r\n        setCurrentRowIndex(index: number): void;\r\n    }\r\n\r\n    export function createCategoricalEvalContext(colorAllocatorProvider: IColorAllocatorCache, dataViewCategorical: DataViewCategorical): ICategoricalEvalContext {\r\n        return new CategoricalEvalContext(colorAllocatorProvider, dataViewCategorical);\r\n    }\r\n\r\n    class CategoricalEvalContext implements ICategoricalEvalContext {\r\n        private colorAllocatorProvider: IColorAllocatorCache;\r\n        private dataView: DataViewCategorical;\r\n        private columnsByRole: { [name: string]: DataViewCategoricalColumn };\r\n        private index: number;\r\n\r\n        constructor(colorAllocatorProvider: IColorAllocatorCache, dataView: DataViewCategorical) {\r\n            debug.assertValue(colorAllocatorProvider, 'colorAllocatorProvider');\r\n            debug.assertValue(dataView, 'dataView');\r\n\r\n            this.colorAllocatorProvider = colorAllocatorProvider;\r\n            this.dataView = dataView;\r\n            this.columnsByRole = {};\r\n        }\r\n\r\n        public getColorAllocator(expr: SQFillRuleExpr): IColorAllocator {\r\n            return this.colorAllocatorProvider.get(expr);\r\n        }\r\n\r\n        public getExprValue(expr: SQExpr): PrimitiveValue {\r\n            return;\r\n        }\r\n\r\n        public getRoleValue(roleName: string): PrimitiveValue {\r\n            let columnsByRole = this.columnsByRole;\r\n            let column = columnsByRole[roleName];\r\n            if (!column)\r\n                column = columnsByRole[roleName] = findRuleInputColumn(this.dataView, roleName);\r\n            \r\n            if (!column)\r\n                return;\r\n\r\n            let index = this.index;\r\n            if (index != null)\r\n                return column.values[this.index];\r\n        }\r\n\r\n        public setCurrentRowIndex(index: number): void {\r\n            debug.assertValue(index, 'index');\r\n\r\n            this.index = index;\r\n        }\r\n    }\r\n\r\n    function findRuleInputColumn(dataViewCategorical: DataViewCategorical, inputRole: string): DataViewCategoricalColumn {\r\n        debug.assertValue(dataViewCategorical, 'dataViewCategorical');\r\n\r\n        return findRuleInputInColumns(dataViewCategorical.values, inputRole) ||\r\n            findRuleInputInColumns(dataViewCategorical.categories, inputRole);\r\n    }\r\n\r\n    function findRuleInputInColumns(columns: DataViewCategoricalColumn[], inputRole: string): DataViewCategoricalColumn {\r\n        debug.assertAnyValue(columns, 'columns');\r\n\r\n        if (!columns)\r\n            return;\r\n\r\n        for (let column of columns) {\r\n            let roles = column.source.roles;\r\n            if (!roles || !roles[inputRole])\r\n                continue;\r\n\r\n            return column;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import SQExpr = powerbi.data.SQExpr;\r\n\r\n    export interface ITableEvalContext extends IEvalContext {\r\n        setCurrentRowIndex(index: number): void;\r\n    }\r\n\r\n    export function createTableEvalContext(colorAllocatorProvider: IColorAllocatorCache, dataViewTable: DataViewTable, selectTransforms: DataViewSelectTransform[]): ITableEvalContext {\r\n        return new TableEvalContext(colorAllocatorProvider, dataViewTable, selectTransforms);\r\n    }\r\n\r\n    class TableEvalContext implements ITableEvalContext {\r\n        private colorAllocatorProvider: IColorAllocatorCache;\r\n        private dataView: DataViewTable;\r\n        private rowIdx: number;\r\n        private selectTransforms: DataViewSelectTransform[];\r\n\r\n        constructor(colorAllocatorProvider: IColorAllocatorCache, dataView: DataViewTable, selectTransforms: DataViewSelectTransform[]) {\r\n            debug.assertValue(colorAllocatorProvider, 'colorAllocatorProvider');\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertValue(selectTransforms, 'selectTransforms');\r\n\r\n            this.colorAllocatorProvider = colorAllocatorProvider;\r\n            this.dataView = dataView;\r\n            this.selectTransforms = selectTransforms;\r\n        }\r\n\r\n        public getColorAllocator(expr: SQFillRuleExpr): IColorAllocator {\r\n            return this.colorAllocatorProvider.get(expr);\r\n        }\r\n\r\n        public getExprValue(expr: SQExpr): PrimitiveValue {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            let rowIdx = this.rowIdx;\r\n            if (rowIdx == null)\r\n                return;\r\n\r\n            return getExprValueFromTable(expr, this.selectTransforms, this.dataView, rowIdx);\r\n        }\r\n\r\n        public getRoleValue(roleName: string): PrimitiveValue {\r\n            return;\r\n        }\r\n\r\n        public setCurrentRowIndex(index: number): void {\r\n            debug.assertValue(index, 'index');\r\n\r\n            this.rowIdx = index;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export class RuleEvaluation {\r\n        // NOTE: even though this class has no behaviour, we still use a class to facilitate instanceof checks.\r\n\r\n        public evaluate(evalContext: IEvalContext): any {\r\n            debug.assertFail('Abstract method RuleEvaluation.evaluate not implemented.');\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export class ColorRuleEvaluation extends RuleEvaluation {\r\n        private inputRole: string;\r\n        private allocator: IColorAllocator;\r\n\r\n        constructor(inputRole: string, allocator: IColorAllocator) {\r\n            debug.assertValue(inputRole, 'inputRole');\r\n            debug.assertValue(allocator, 'allocator');\r\n\r\n            super();\r\n            this.inputRole = inputRole;\r\n            this.allocator = allocator;\r\n        }\r\n\r\n        public evaluate(evalContext: IEvalContext): any {\r\n            debug.assertValue(evalContext, 'evalContext');\r\n\r\n            let value: any = evalContext.getRoleValue(this.inputRole);\r\n            if (value !== undefined)\r\n                return this.allocator.color(value);\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data.utils {\r\n    import inherit = Prototype.inherit;\r\n    import inheritSingle = Prototype.inheritSingle;\r\n    import ArrayExtensions = jsCommon.ArrayExtensions;\r\n\r\n    export module DataViewMatrixUtils {\r\n\r\n        /**\r\n         * Invokes the specified callback once per leaf nodes (including root-level leaves and descendent leaves) of the \r\n         * specified rootNodes, with an optional index parameter in the callback that is the 0-based index of the \r\n         * particular leaf node in the context of this forEachLeafNode(...) invocation.\r\n         *\r\n         * If rootNodes is null or undefined or empty, the specified callback will not get invoked.\r\n         *\r\n         * The treePath parameter in the callback is an ordered set of nodes that form the path from the specified \r\n         * rootNodes down to the leafNode argument itself.  If callback leafNode is one of the specified rootNodes,\r\n         * then treePath will be an array of length 1 containing that very node.\r\n         *\r\n         * IMPORTANT: The treePath array passed to the callback will be modified after the callback function returns!\r\n         * If your callback needs to retain a copy of the treePath, please clone the array before returning.\r\n         */\r\n        export function forEachLeafNode(\r\n            rootNodes: DataViewMatrixNode | DataViewMatrixNode[],\r\n            callback: (leafNode: DataViewMatrixNode, index?: number, treePath?: DataViewMatrixNode[]) => void): void {\r\n            debug.assertAnyValue(rootNodes, 'rootNodes');\r\n            debug.assertValue(callback, 'callback');\r\n\r\n            // Note: Don't do \"if (!_.isEmpty(rootNodes))\" for checking whether rootNodes is an empty array DataViewMatrixNode[],\r\n            // because rootNodes can also be an non-array DataViewMatrixNode, and an empty object can be a valid root node DataViewMatrixNode, \r\n            // for the fact that all the properties on DataViewMatrixNode are optional...\r\n            if (rootNodes) {\r\n                if (isNodeArray(rootNodes)) {\r\n                    let index = 0;\r\n                    for (let rootNode of rootNodes) {\r\n                        if (rootNode) {\r\n                            index = forEachLeafNodeRecursive(rootNode, index, [], callback);\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    forEachLeafNodeRecursive(rootNodes, 0, [], callback);\r\n                }\r\n            }\r\n        }\r\n\r\n        function isNodeArray(nodeOrNodeArray: DataViewMatrixNode | DataViewMatrixNode[]): nodeOrNodeArray is DataViewMatrixNode[] {\r\n            return ArrayExtensions.isArrayOrInheritedArray(nodeOrNodeArray);\r\n        }\r\n\r\n        /**\r\n         * Recursively traverses to each leaf node of the specified matrixNode and invokes callback with each of them.\r\n         * Returns the index for the next node after the last node that this function invokes callback with.\r\n         *\r\n         * @treePath an array that contains the path from the specified rootNodes in forEachLeafNode() down to the parent of the argument matrixNode (i.e. treePath does not contain the matrixNode argument yet).\r\n         */\r\n        function forEachLeafNodeRecursive(\r\n            matrixNode: DataViewMatrixNode,\r\n            nextIndex: number,\r\n            treePath: DataViewMatrixNode[],\r\n            callback: (leafNode: DataViewMatrixNode, index?: number, treePath?: DataViewMatrixNode[]) => void): number {\r\n            debug.assertValue(matrixNode, 'matrixNode');\r\n            debug.assertValue(treePath, 'treePath');\r\n            debug.assertValue(callback, 'callback');\r\n\r\n            // If treePath already contains matrixNode, then either one of the following errors has happened:\r\n            // 1. the caller code mistakenly added matrixNode to treePath, or\r\n            // 2. the callback modified treePath by adding a node to it, or\r\n            // 3. the matrix hierarchy contains a cyclical node reference.');\r\n            debug.assert(!_.contains(treePath, matrixNode),\r\n                'pre-condition: treePath must not already contain matrixNode');\r\n\r\n            treePath.push(matrixNode);\r\n\r\n            if (_.isEmpty(matrixNode.children)) { // if it is a leaf node\r\n                callback(matrixNode, nextIndex, treePath);\r\n                nextIndex++;\r\n            }\r\n            else {\r\n                let children = matrixNode.children;\r\n                for (let nextChild of children) {\r\n                    if (nextChild) {\r\n                        nextIndex = forEachLeafNodeRecursive(nextChild, nextIndex, treePath, callback);\r\n                    }\r\n                }\r\n            }\r\n\r\n            debug.assert(_.last(treePath) === matrixNode, 'pre-condition: the callback given to forEachLeafNode() is not supposed to modify the treePath argument array.');\r\n            treePath.pop();\r\n\r\n            return nextIndex;\r\n        }\r\n\r\n        /**\r\n         * Returned an object tree where each node and its children property are inherited from the specified node \r\n         * hierarchy, from the root down to the nodes at the specified deepestLevelToInherit, inclusively.\r\n         *\r\n         * The inherited nodes at level === deepestLevelToInherit will NOT get an inherited version of children array \r\n         * property, i.e. its children property is the same array object referenced in the input node's object tree.\r\n         *\r\n         * @param node The input node with the hierarchy object tree.\r\n         * @param deepestLevelToInherit The highest level for a node to get inherited. See DataViewMatrixNode.level property.\r\n         * @param useInheritSingle If true, then a node will get inherited in the returned object tree only if it is \r\n         * not already an inherited object. Same goes for the node's children property.  This is useful for creating \r\n         * \"visual DataView\" objects from \"query DataView\" objects, as object inheritance is the mechanism for \r\n         * \"visual DataView\" to override properties in \"query DataView\", and that \"query DataView\" never contains \r\n         * inherited objects.\r\n         */\r\n        export function inheritMatrixNodeHierarchy(\r\n            node: DataViewMatrixNode,\r\n            deepestLevelToInherit: number,\r\n            useInheritSingle: boolean): DataViewMatrixNode {\r\n            debug.assertValue(node, 'node');\r\n            debug.assert(deepestLevelToInherit >= 0, 'deepestLevelToInherit >= 0');\r\n            debug.assertValue(useInheritSingle, 'useInheritSingle');\r\n\r\n            let returnNode = node;\r\n\r\n            // Note: The level property of DataViewMatrix.rows.root and DataViewMatrix.columns.root are always undefined.\r\n            // Also, in a matrix with multiple column grouping fields and multiple value fields, the DataViewMatrixNode\r\n            // for the Grand Total column in the column hierarchy will have children nodes where level > (parent.level + 1):\r\n            //  {\r\n            //    \"level\": 0,\r\n            //    \"isSubtotal\": true,\r\n            //    \"children\": [\r\n            //      { \"level\": 2, \"isSubtotal\": true },\r\n            //      { \"level\": 2, \"levelSourceIndex\": 1, \"isSubtotal\": true }\r\n            //    ]\r\n            //  }\r\n            let isRootNode = _.isUndefined(node.level);\r\n            let shouldInheritCurrentNode = isRootNode || (node.level <= deepestLevelToInherit);\r\n            if (shouldInheritCurrentNode) {\r\n                let inheritFunc = useInheritSingle ? inheritSingle : inherit;\r\n                let inheritedNode: DataViewMatrixNode = inheritFunc(node);\r\n\r\n                let shouldInheritChildNodes = isRootNode || (node.level < deepestLevelToInherit);\r\n                if (shouldInheritChildNodes && !_.isEmpty(node.children)) {\r\n                    inheritedNode.children = inheritFunc(node.children); // first, make an inherited array\r\n                    for (let i = 0, ilen = inheritedNode.children.length; i < ilen; i++) {\r\n                        inheritedNode.children[i] =\r\n                            inheritMatrixNodeHierarchy(inheritedNode.children[i], deepestLevelToInherit, useInheritSingle);\r\n                    }\r\n                }\r\n\r\n                returnNode = inheritedNode;\r\n            }\r\n\r\n            return returnNode;\r\n        }\r\n\r\n        /**\r\n         * Returns true if the specified matrixOrHierarchy contains any composite grouping, i.e. a grouping on multiple columns.\r\n         * An example of composite grouping is one on [Year, Quarter, Month], where a particular group instance can have\r\n         * Year === 2016, Quarter === 'Qtr 1', Month === 1.\r\n         *\r\n         * Returns false if the specified matrixOrHierarchy does not contain any composite group, \r\n         * or if matrixOrHierarchy is null or undefined.\r\n         */\r\n        export function containsCompositeGroup(matrixOrHierarchy: DataViewMatrix | DataViewHierarchy): boolean {\r\n            debug.assertAnyValue(matrixOrHierarchy, 'matrixOrHierarchy');\r\n\r\n            let hasCompositeGroup = false;\r\n\r\n            if (matrixOrHierarchy) {\r\n                if (isMatrix(matrixOrHierarchy)) {\r\n                    hasCompositeGroup = containsCompositeGroup(matrixOrHierarchy.rows) ||\r\n                        containsCompositeGroup(matrixOrHierarchy.columns);\r\n                }\r\n                else {\r\n                    let hierarchyLevels = matrixOrHierarchy.levels;\r\n                    if (!_.isEmpty(hierarchyLevels)) {\r\n                        for (var level of hierarchyLevels) {\r\n                            // it takes at least 2 columns at the same hierarchy level to form a composite group...\r\n                            if (level.sources && (level.sources.length >= 2)) {\r\n\r\n                                debug.assert(_.all(level.sources, sourceColumn => sourceColumn.isMeasure === level.sources[0].isMeasure),\r\n                                    'pre-condition: in a valid DataViewMatrix, the source columns in each of its hierarchy levels must either be all non-measure columns (i.e. a grouping level) or all measure columns (i.e. a measure headers level)');\r\n\r\n                                // Measure headers are not group\r\n                                let isMeasureHeadersLevel = level.sources[0].isMeasure;\r\n                                if (!isMeasureHeadersLevel) {\r\n                                    hasCompositeGroup = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return hasCompositeGroup;\r\n        }\r\n\r\n        function isMatrix(matrixOrHierarchy: DataViewMatrix | DataViewHierarchy): matrixOrHierarchy is DataViewMatrix {\r\n            return 'rows' in matrixOrHierarchy &&\r\n                'columns' in matrixOrHierarchy &&\r\n                'valueSources' in matrixOrHierarchy;\r\n        }\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data.utils {\r\n    export module DataViewMetadataColumnUtils {\r\n\r\n        export interface MetadataColumnAndProjectionIndex {\r\n            /**\r\n            * A metadata column taken from a source collection, e.g. DataViewHierarchyLevel.sources, DataViewMatrix.valueSources...\r\n            */\r\n            metadataColumn: DataViewMetadataColumn;\r\n\r\n            /**\r\n             * The index of this.metadataColumn in its sources collection.\r\n             *\r\n             * E.g.1 This can be the value of the property DataViewMatrixGroupValue.levelSourceIndex which is the index of this.metadataColumn in DataViewHierarchyLevel.sources.\r\n             * E.g.2 This can be the value of the property DataViewMatrixNodeValue.valueSourceIndex which refer to columns in DataViewMatrix.valueSources.\r\n             */\r\n            sourceIndex: number;\r\n\r\n            /**\r\n            * The index of this.metadataColumn in the projection ordering of a given role.\r\n            */\r\n            projectionOrderIndex: number;\r\n        }\r\n\r\n        /**\r\n         * Returns true iff the specified metadataColumn is assigned to the specified targetRole.\r\n         */\r\n        export function isForRole(metadataColumn: DataViewMetadataColumn, targetRole: string): boolean {\r\n            debug.assertValue(metadataColumn, 'metadataColumn');\r\n            debug.assertValue(targetRole, 'targetRole');\r\n\r\n            let roles = metadataColumn.roles;\r\n            return roles && roles[targetRole];\r\n        }\r\n\r\n        /**\r\n         * Joins each column in the specified columnSources with projection ordering index into a wrapper object.\r\n         *\r\n         * Note: In order for this function to reliably calculate the \"source index\" of a particular column, the \r\n         * specified columnSources must be a non-filtered array of column sources from the DataView, such as\r\n         * the DataViewHierarchyLevel.sources and DataViewMatrix.valueSources array properties.\r\n         *\r\n         * @param columnSources E.g. DataViewHierarchyLevel.sources, DataViewMatrix.valueSources...\r\n         * @param projection The projection ordering.  It must contain an ordering for the specified role.\r\n         * @param role The role for getting the relevant projection ordering, as well as for filtering out the irrevalent columns in columnSources.\r\n         */\r\n        export function joinMetadataColumnsAndProjectionOrder(\r\n            columnSources: DataViewMetadataColumn[],\r\n            projection: DataViewProjectionOrdering,\r\n            role: string): MetadataColumnAndProjectionIndex[] {\r\n            debug.assertAnyValue(columnSources, 'columnSources');\r\n            debug.assert(_.all(columnSources, column => _.isNumber(column.index)),\r\n                'pre-condition: Every value in columnSources must already have its Select Index property initialized.');\r\n            debug.assertNonEmpty(projection[role], 'projection[role]');\r\n            debug.assert(_.all(columnSources, column => !isForRole(column, role) || _.contains(projection[role], column.index)),\r\n                'pre-condition: The projection order for the specified role must contain the Select Index of every column with matching role in the specified columnSources.');\r\n\r\n            let jointResult: MetadataColumnAndProjectionIndex[] = [];\r\n\r\n            if (!_.isEmpty(columnSources)) {\r\n                let projectionOrderSelectIndices = projection[role];\r\n                let selectIndexToProjectionIndexMap: { [selectIndex: number]: number } = {};\r\n                for (let i = 0, ilen = projectionOrderSelectIndices.length; i < ilen; i++) {\r\n                    let selectIndex = projectionOrderSelectIndices[i];\r\n                    selectIndexToProjectionIndexMap[selectIndex] = i;\r\n                }\r\n\r\n                for (let j = 0, jlen = columnSources.length; j < jlen; j++) {\r\n                    var column = columnSources[j];\r\n                    if (isForRole(column, role)) {\r\n                        let jointColumnInfo: MetadataColumnAndProjectionIndex = {\r\n                            metadataColumn: column,\r\n                            sourceIndex: j,\r\n                            projectionOrderIndex: selectIndexToProjectionIndexMap[column.index]\r\n                        };\r\n\r\n                        jointResult.push(jointColumnInfo);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return jointResult;\r\n        }\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import ArrayNamedItems = jsCommon.ArrayNamedItems;\r\n\r\n    export class ConceptualSchema {\r\n        public entities: ArrayNamedItems<ConceptualEntity>;\r\n        public capabilities: ConceptualCapabilities;\r\n\r\n        /** Indicates whether the user can edit this ConceptualSchema.  This is used to enable/disable model authoring UX. */\r\n        public canEdit: boolean;\r\n\r\n        public findProperty(entityName: string, propertyName: string): ConceptualProperty {\r\n            let entity = this.entities.withName(entityName);\r\n            if (!entity || _.isEmpty(entity.properties))\r\n                return;\r\n\r\n            return entity.properties.withName(propertyName);\r\n        }\r\n\r\n        public findHierarchy(entityName: string, name: string): ConceptualHierarchy {\r\n            let entity = this.entities.withName(entityName);\r\n            if (!entity || _.isEmpty(entity.hierarchies))\r\n                return;\r\n\r\n            return entity.hierarchies.withName(name);\r\n        }\r\n\r\n        public findHierarchyByVariation(\r\n            variationEntityName: string,\r\n            variationColumnName: string,\r\n            variationName: string,\r\n            hierarchyName: string): ConceptualHierarchy {\r\n\r\n            let variationEntity = this.entities.withName(variationEntityName);\r\n            if (!variationEntity || _.isEmpty(variationEntity.properties))\r\n                return;\r\n\r\n            let variationProperty = variationEntity.properties.withName(variationColumnName);\r\n            if (!variationProperty)\r\n                return;\r\n\r\n            let variationColumn = variationProperty.column;\r\n            if (!variationColumn || _.isEmpty(variationColumn.variations))\r\n                return;\r\n\r\n            let variation = variationColumn.variations.withName(variationName);\r\n            if (variation) {\r\n                let targetEntity = variation.navigationProperty ? variation.navigationProperty.targetEntity : variationEntity;\r\n                if (!targetEntity || _.isEmpty(targetEntity.hierarchies))\r\n                    return;\r\n\r\n                return targetEntity.hierarchies.withName(hierarchyName);\r\n            }\r\n        }\r\n\r\n        /**\r\n        * Returns the first property of the entity whose kpi is tied to kpiProperty\r\n        */\r\n        public findPropertyWithKpi(entityName: string, kpiProperty: ConceptualProperty): ConceptualProperty {\r\n            debug.assertValue(kpiProperty, 'kpiProperty');\r\n\r\n            let entity = this.entities.withName(entityName);\r\n            if (!entity || _.isEmpty(entity.properties))\r\n                return;\r\n\r\n            for (let prop of entity.properties) {\r\n                if (prop &&\r\n                    prop.measure &&\r\n                    prop.measure.kpi &&\r\n                    (prop.measure.kpi.status === kpiProperty || prop.measure.kpi.goal === kpiProperty))\r\n                    return prop;\r\n            }\r\n\r\n            return;\r\n        }\r\n    }\r\n\r\n    export interface ConceptualCapabilities {\r\n        discourageQueryAggregateUsage: boolean;\r\n        normalizedFiveStateKpiRange: boolean;\r\n        supportsMedian: boolean;\r\n        supportsPercentile: boolean;\r\n    }\r\n\r\n    export interface ConceptualPropertyItemContainer {\r\n        properties: ArrayNamedItems<ConceptualProperty>;\r\n        hierarchies?: ArrayNamedItems<ConceptualHierarchy>;\r\n        displayFolders?: ArrayNamedItems<ConceptualDisplayFolder>;\r\n    }\r\n\r\n    export interface ConceptualPropertyItem {\r\n        name: string;\r\n        displayName: string;\r\n        hidden?: boolean;\r\n    }\r\n\r\n    export interface ConceptualEntity extends ConceptualPropertyItemContainer {\r\n        name: string;\r\n        displayName: string;\r\n        visibility?: ConceptualVisibility;\r\n        calculated?: boolean;\r\n        queryable?: ConceptualQueryableState;\r\n        navigationProperties?: ArrayNamedItems<ConceptualNavigationProperty>;\r\n    }\r\n\r\n    export interface ConceptualDisplayFolder extends ConceptualPropertyItem, ConceptualPropertyItemContainer {\r\n    }\r\n\r\n    export interface ConceptualProperty extends ConceptualPropertyItem {\r\n        type: ValueType;\r\n        kind: ConceptualPropertyKind;\r\n        format?: string;\r\n        column?: ConceptualColumn;\r\n        queryable?: ConceptualQueryableState;\r\n        measure?: ConceptualMeasure;\r\n        kpiValue?: ConceptualProperty;\r\n    }\r\n\r\n    export interface ConceptualHierarchy extends ConceptualPropertyItem {\r\n        levels: ArrayNamedItems<ConceptualHierarchyLevel>;\r\n    }\r\n\r\n    export interface ConceptualHierarchyLevel extends ConceptualPropertyItem {\r\n        column: ConceptualProperty;\r\n    }\r\n\r\n    export interface ConceptualNavigationProperty {\r\n        name: string;\r\n        isActive: boolean;\r\n        sourceColumn?: ConceptualColumn;\r\n        targetEntity: ConceptualEntity;\r\n        sourceMultiplicity: ConceptualMultiplicity;\r\n        targetMultiplicity: ConceptualMultiplicity;\r\n    }\r\n\r\n    export interface ConceptualVariationSource {\r\n        name: string;\r\n        isDefault: boolean;\r\n        navigationProperty?: ConceptualNavigationProperty;\r\n        defaultHierarchy?: ConceptualHierarchy;\r\n        defaultProperty?: ConceptualProperty;\r\n    }\r\n\r\n    export interface ConceptualColumn {\r\n        defaultAggregate?: ConceptualDefaultAggregate;\r\n        keys?: ArrayNamedItems<ConceptualProperty>;\r\n        idOnEntityKey?: boolean;\r\n        calculated?: boolean;\r\n        defaultValue?: SQConstantExpr;\r\n        variations?: ArrayNamedItems<ConceptualVariationSource>;\r\n        aggregateBehavior?: ConceptualAggregateBehavior;\r\n    }\r\n\r\n    export interface ConceptualMeasure {\r\n        kpi?: ConceptualPropertyKpi;\r\n    }\r\n\r\n    export interface ConceptualPropertyKpi {\r\n        statusMetadata: DataViewKpiColumnMetadata;\r\n        trendMetadata?: DataViewKpiColumnMetadata;\r\n        status?: ConceptualProperty;\r\n        goal?: ConceptualProperty;\r\n        trend?: ConceptualProperty;\r\n    }\r\n\r\n    export const enum ConceptualVisibility {\r\n        Visible = 0,\r\n        Hidden = 1,\r\n        ShowAsVariationsOnly = 2,\r\n        IsPrivate = 4,\r\n    }\r\n\r\n    export const enum ConceptualQueryableState {\r\n        Queryable = 0,\r\n        Error = 1,\r\n    }\r\n\r\n    export const enum ConceptualMultiplicity {\r\n        ZeroOrOne = 0,\r\n        One = 1,\r\n        Many = 2,\r\n    }\r\n\r\n    export const enum ConceptualPropertyKind {\r\n        Column,\r\n        Measure,\r\n        Kpi,\r\n    }\r\n\r\n    export const enum ConceptualDefaultAggregate {\r\n        Default,\r\n        None,\r\n        Sum,\r\n        Count,\r\n        Min,\r\n        Max,\r\n        Average,\r\n        DistinctCount,\r\n    }\r\n\r\n    // TODO: Remove this (replaced by ValueType)\r\n    export enum ConceptualDataCategory {\r\n        None,\r\n        Address,\r\n        City,\r\n        Company,\r\n        Continent,\r\n        Country,\r\n        County,\r\n        Date,\r\n        Image,\r\n        ImageUrl,\r\n        Latitude,\r\n        Longitude,\r\n        Organization,\r\n        Place,\r\n        PostalCode,\r\n        Product,\r\n        StateOrProvince,\r\n        WebUrl,\r\n    }\r\n\r\n    export const enum ConceptualAggregateBehavior {\r\n        Default,\r\n        DiscourageAcrossGroups,\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n    import ArrayNamedItems = jsCommon.ArrayNamedItems;\r\n    import StringExtensions = jsCommon.StringExtensions;\r\n    import FederatedConceptualSchema = powerbi.data.FederatedConceptualSchema;\r\n    import FieldExprColumnPattern = powerbi.data.FieldExprColumnPattern;\r\n    import FieldExprColumnAggrPattern = powerbi.data.FieldExprColumnAggrPattern;\r\n    import FieldExprColumnHierarchyLevelVariationPattern = powerbi.data.FieldExprColumnHierarchyLevelVariationPattern;\r\n    import FieldExprEntityPattern = powerbi.data.FieldExprEntityPattern;\r\n    import FieldExprEntityAggrPattern = powerbi.data.FieldExprEntityAggrPattern;\r\n    import FieldExprHierarchyPattern = powerbi.data.FieldExprHierarchyPattern;\r\n    import FieldExprHierarchyLevelPattern = powerbi.data.FieldExprHierarchyLevelPattern;\r\n    import FieldExprHierarchyLevelAggrPattern = powerbi.data.FieldExprHierarchyLevelAggrPattern;\r\n    import FieldExprMeasurePattern = powerbi.data.FieldExprMeasurePattern;\r\n    import FieldExprPattern = powerbi.data.FieldExprPattern;\r\n    import IFieldExprPatternVisitor = powerbi.data.IFieldExprPatternVisitor;\r\n    import QueryProjectionsByRole = data.QueryProjectionsByRole;\r\n\r\n    export interface ScriptResult {\r\n        source: string;\r\n        provider: string;\r\n    }\r\n\r\n    export module ScriptResultUtil {\r\n\r\n        export function findScriptResult(dataViewMappings: DataViewMapping[] | data.CompiledDataViewMapping[]): DataViewScriptResultMapping | data.CompiledDataViewScriptResultMapping {\r\n            if (dataViewMappings && dataViewMappings.length === 1) {\r\n                return dataViewMappings[0].scriptResult;\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        export function extractScriptResult(dataViewMappings: data.CompiledDataViewMapping[]): ScriptResult {\r\n            let scriptResult = findScriptResult(dataViewMappings);\r\n            if (scriptResult) {\r\n                let objects = dataViewMappings[0].metadata.objects;\r\n                let source: string = DataViewObjects.getValue<string>(objects, scriptResult.script.source);\r\n                let provider: string = DataViewObjects.getValue<string>(objects, scriptResult.script.provider);\r\n                return {\r\n                    source: source,\r\n                    provider: provider\r\n                };\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        export function extractScriptResultFromVisualConfig(dataViewMappings: DataViewMapping[], objects: powerbi.data.DataViewObjectDefinitions): ScriptResult {\r\n            let scriptResult = findScriptResult(dataViewMappings);\r\n            if (scriptResult && objects) {\r\n                let scriptSource = <data.SQConstantExpr>data.DataViewObjectDefinitions.getValue(objects, scriptResult.script.source, null);\r\n                let provider = <data.SQConstantExpr>data.DataViewObjectDefinitions.getValue(objects, scriptResult.script.provider, null);\r\n                return {\r\n                    source: scriptSource ? scriptSource.value : null,\r\n                    provider: provider ? provider.value : null\r\n                };\r\n            }\r\n\r\n            return undefined;\r\n        }\r\n\r\n        export function getScriptInput(projections: QueryProjectionsByRole, selects: ArrayNamedItems<data.NamedSQExpr>, schema: FederatedConceptualSchema): data.ScriptInput {\r\n            let scriptInput: data.ScriptInput = {\r\n                VariableName: \"dataset\",\r\n                Columns: []\r\n            };\r\n\r\n            // Go over all the projections, and create an input column according to the order\r\n            // of the projections (including duplicate expressions)\r\n            if (projections && selects && !_.isEmpty(selects)) {\r\n                let scriptInputColumnNames: string[] = [];\r\n                let scriptInputColumns: data.ScriptInputColumn[] = [];\r\n                for (let role in projections) {\r\n                    for (let projection of projections[role].all()) {\r\n                        let select = selects.withName(projection.queryRef);\r\n                        if (select) {\r\n                            let scriptInputColumn = <data.ScriptInputColumn>{\r\n                                QueryName: select.name,\r\n                                Name: FieldExprPattern.visit(select.expr, new ScriptInputColumnNameVisitor(schema))\r\n                            };\r\n\r\n                            scriptInputColumns.push(scriptInputColumn);\r\n                            scriptInputColumnNames.push(scriptInputColumn.Name);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Make sure the names of the columns are unique\r\n                scriptInputColumnNames = StringExtensions.ensureUniqueNames(scriptInputColumnNames);\r\n\r\n                // Update the names of the columns\r\n                for (let i = 0; i < scriptInputColumnNames.length; i++) {\r\n                    let scriptInputColumn = scriptInputColumns[i];\r\n                    scriptInputColumn.Name = scriptInputColumnNames[i];\r\n                }\r\n\r\n                scriptInput.Columns = scriptInputColumns;\r\n            }\r\n\r\n            return scriptInput;\r\n        }\r\n\r\n        class ScriptInputColumnNameVisitor implements IFieldExprPatternVisitor<string>\r\n        {\r\n            private federatedSchema: FederatedConceptualSchema;\r\n\r\n            constructor(federatedSchema: FederatedConceptualSchema) {\r\n                this.federatedSchema = federatedSchema;\r\n            }\r\n\r\n            public visitColumn(column: FieldExprColumnPattern): string {\r\n                return ScriptInputColumnNameVisitor.getNameForProperty(column, this.federatedSchema);\r\n            }\r\n\r\n            public visitColumnAggr(columnAggr: FieldExprColumnAggrPattern): string {\r\n                return ScriptInputColumnNameVisitor.getNameForProperty(columnAggr, this.federatedSchema);\r\n            }\r\n\r\n            public visitColumnHierarchyLevelVariation(columnHierarchyLevelVariation: FieldExprColumnHierarchyLevelVariationPattern): string {\r\n                return ScriptInputColumnNameVisitor.getVariationLevelName(columnHierarchyLevelVariation, this.federatedSchema);\r\n            }\r\n\r\n            public visitEntity(entity: FieldExprEntityPattern): string {\r\n                return entity.entity;\r\n            }\r\n\r\n            public visitEntityAggr(entityAggr: FieldExprEntityAggrPattern): string {\r\n                return entityAggr.entity;\r\n            }\r\n\r\n            public visitHierarchy(hierarchy: FieldExprHierarchyPattern): string {\r\n                return ScriptInputColumnNameVisitor.getNameForHierarchy(hierarchy, this.federatedSchema);\r\n            }\r\n\r\n            public visitHierarchyLevel(hierarchyLevel: FieldExprHierarchyLevelPattern): string {\r\n                /*Hierarchy levels are not supported yet*/\r\n                return;\r\n            }\r\n\r\n            public visitHierarchyLevelAggr(hierarchyLevelAggr: FieldExprHierarchyLevelAggrPattern): string {\r\n                return ScriptInputColumnNameVisitor.getNameForProperty(hierarchyLevelAggr, this.federatedSchema);\r\n            }\r\n\r\n            public visitMeasure(measure: FieldExprMeasurePattern): string {\r\n                return ScriptInputColumnNameVisitor.getNameForProperty(measure, this.federatedSchema);\r\n            }\r\n\r\n            private static getNameForHierarchy(pattern: FieldExprHierarchyPattern, federatedScheam: FederatedConceptualSchema): string {\r\n                debug.assertValue(pattern, 'pattern');\r\n\r\n                let schema = federatedScheam.schema(pattern.schema),\r\n                    hierarchy = schema.findHierarchy(pattern.entity, pattern.name);\r\n\r\n                if (hierarchy)\r\n                    return hierarchy.name;\r\n            }\r\n\r\n            private static getNameForProperty(pattern: data.FieldExprPropertyPattern, federatedSchema: FederatedConceptualSchema): string {\r\n                debug.assertValue(pattern, 'pattern');\r\n\r\n                let schema = federatedSchema.schema(pattern.schema),\r\n                    property = schema.findProperty(pattern.entity, pattern.name);\r\n\r\n                if (property)\r\n                    return property.name;\r\n            }\r\n\r\n            private static getVariationLevelName(pattern: FieldExprColumnHierarchyLevelVariationPattern, federatedSchema: FederatedConceptualSchema): string {\r\n                debug.assertValue(pattern, 'pattern');\r\n\r\n                let source = pattern.source;\r\n                let prop = federatedSchema.schema(source.schema).findProperty(source.entity, source.name);\r\n                if (!prop)\r\n                    return;\r\n\r\n                let variations = prop.column.variations;\r\n                for (let variation of variations)\r\n                    if (variation.name === pattern.variationName)\r\n                        for (let level of variation.defaultHierarchy.levels)\r\n                            if (level.name === pattern.level.level)\r\n                                return level.column.name;\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data.segmentation {\r\n\r\n    export interface DataViewTableSegment extends DataViewTable {\r\n        /** \r\n         * Index of the last item that had a merge flag in the underlying data.\r\n         * We assume merge flags are not random but adjacent to each other. \r\n         */\r\n        lastMergeIndex?: number;\r\n    }\r\n\r\n    export interface DataViewTreeSegmentNode extends DataViewTreeNode {\r\n        /** Indicates whether the node is a duplicate of a node from a previous segment. */\r\n        isMerge?: boolean;\r\n    }\r\n\r\n    export interface DataViewCategoricalSegment extends DataViewCategorical {\r\n        /** \r\n         * Index of the last item that had a merge flag in the underlying data.\r\n         * We assume merge flags are not random but adjacent to each other. \r\n         */\r\n        lastMergeIndex?: number;\r\n    }\r\n\r\n    export interface DataViewMatrixSegmentNode extends DataViewMatrixNode {\r\n        /**\r\n         * Index of the last item that had a merge flag in the underlying data.\r\n         * We assume merge flags are not random but adjacent to each other. \r\n         */\r\n        isMerge?: boolean;\r\n    }\r\n\r\n    export module DataViewMerger {\r\n\r\n        export function mergeDataViews(source: DataView, segment: DataView): void {\r\n\r\n            if (!DataViewAnalysis.isMetadataEquivalent(source.metadata, segment.metadata)) {\r\n                debug.assertFail(\"Cannot merge data views with different metadata columns\");\r\n            }\r\n\r\n            // The last segment is complete. We mark the source as complete.\r\n            if (!segment.metadata.segment)\r\n                delete source.metadata.segment;\r\n\r\n            if (source.table && segment.table)\r\n                mergeTables(source.table, <DataViewTableSegment>segment.table);\r\n\r\n            if (source.categorical && segment.categorical)\r\n                mergeCategorical(source.categorical, <DataViewCategoricalSegment>segment.categorical);\r\n\r\n            // Tree cannot support subtotals hence we can get into situations\r\n            // where a node has no children in one segment and more than 1 child\r\n            // in another segment.\r\n            if (source.tree && segment.tree)\r\n                mergeTreeNodes(source.tree.root, segment.tree.root, true /*allowDifferentStructure*/);\r\n\r\n            if (source.matrix && segment.matrix)\r\n                mergeTreeNodes(source.matrix.rows.root, segment.matrix.rows.root, false /*allowDifferentStructure*/);\r\n        }\r\n\r\n        /** Note: Public for testability */\r\n        export function mergeTables(source: DataViewTable, segment: DataViewTableSegment): void {\r\n            debug.assertValue(source, 'source');\r\n            debug.assertValue(segment, 'segment');\r\n\r\n            if (segment.rows.length === 0)\r\n                return;\r\n\r\n            merge(source.rows, segment.rows, segment.lastMergeIndex + 1);\r\n        }\r\n\r\n        /**\r\n         * Merge categories values and identities\r\n         * \r\n         * Note: Public for testability \r\n         */\r\n        export function mergeCategorical(source: DataViewCategorical, segment: DataViewCategoricalSegment): void {\r\n            debug.assertValue(source, 'source');\r\n            debug.assertValue(segment, 'segment');\r\n\r\n            // Merge categories values and identities\r\n            if (source.categories && segment.categories) {\r\n                let segmentCategoriesLength = segment.categories.length;\r\n                debug.assert(source.categories.length === segmentCategoriesLength, \"Source and segment categories have different lengths.\");\r\n\r\n                for (let categoryIndex: number = 0; categoryIndex < segmentCategoriesLength; categoryIndex++) {\r\n                    let segmentCategory = segment.categories[categoryIndex];\r\n                    let sourceCategory = source.categories[categoryIndex];\r\n\r\n                    debug.assert(DataViewAnalysis.areMetadataColumnsEquivalent(sourceCategory.source, segmentCategory.source), \"Source and segment category have different sources.\");\r\n\r\n                    if (!sourceCategory.values && segmentCategory.values) {\r\n                        sourceCategory.values = [];\r\n                        debug.assert(!sourceCategory.identity, \"Source category is missing values but has identities.\");\r\n                    }\r\n\r\n                    if (segmentCategory.values) {\r\n                        merge(sourceCategory.values, segmentCategory.values, segment.lastMergeIndex + 1);\r\n                    }\r\n\r\n                    if (!sourceCategory.identity && segmentCategory.identity) {\r\n                        sourceCategory.identity = [];\r\n                    }\r\n\r\n                    if (segmentCategory.identity) {\r\n                        merge(sourceCategory.identity, segmentCategory.identity, segment.lastMergeIndex + 1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Merge values for each value column\r\n            if (source.values && segment.values) {\r\n                let segmentValuesLength = segment.values.length;\r\n                debug.assert(source.values.length === segmentValuesLength, \"Source and segment values have different lengths.\");\r\n\r\n                for (let valueIndex: number = 0; valueIndex < segmentValuesLength; valueIndex++) {\r\n                    let segmentValue = segment.values[valueIndex];\r\n                    let sourceValue = source.values[valueIndex];\r\n\r\n                    debug.assert(jsCommon.JsonComparer.equals(sourceValue.source, segmentValue.source), \"Source and segment value have different sources.\");\r\n\r\n                    if (!sourceValue.values && segmentValue.values) {\r\n                        sourceValue.values = [];\r\n                    }\r\n\r\n                    if (segmentValue.values) {\r\n                        merge(sourceValue.values, segmentValue.values, segment.lastMergeIndex + 1);\r\n                    }\r\n\r\n                    if (segmentValue.highlights) {\r\n                        merge(sourceValue.highlights, segmentValue.highlights, segment.lastMergeIndex + 1);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Merges the segment array starting at the specified index into the source array \r\n         * and returns the segment slice that wasn't merged.\r\n         * The segment array is spliced up to specified index in the process.\r\n         */\r\n        function merge(source: any[], segment: any[], index?: number): any[] {\r\n            if (index >= segment.length)\r\n                return segment;\r\n\r\n            let result: any[] = [];\r\n            if (index !== undefined)\r\n                result = segment.splice(0, index);\r\n\r\n            Array.prototype.push.apply(source, segment);\r\n\r\n            return result;\r\n        }\r\n\r\n        /** Note: Public for testability */\r\n        export function mergeTreeNodes(sourceRoot: DataViewTreeNode, segmentRoot: DataViewTreeNode, allowDifferentStructure: boolean): void {\r\n            debug.assertValue(sourceRoot, 'sourceRoot');\r\n            debug.assertValue(segmentRoot, 'segmentRoot');\r\n\r\n            if (!segmentRoot.children || segmentRoot.children.length === 0)\r\n                return;\r\n\r\n            if (allowDifferentStructure && (!sourceRoot.children || sourceRoot.children.length === 0)) {\r\n                sourceRoot.children = segmentRoot.children;\r\n                return;\r\n            }\r\n\r\n            debug.assert(sourceRoot.children && sourceRoot.children.length >= 0,\r\n                \"Source tree has different structure than segment.\");\r\n\r\n            let firstAppendIndex = findFirstAppendIndex(segmentRoot.children);\r\n            let lastSourceChild = sourceRoot.children[sourceRoot.children.length - 1];\r\n            let mergedChildren = merge(sourceRoot.children, segmentRoot.children, firstAppendIndex);\r\n\r\n            if (mergedChildren.length > 0)\r\n                mergeTreeNodes(lastSourceChild, mergedChildren[mergedChildren.length - 1], allowDifferentStructure);\r\n        }\r\n\r\n        function findFirstAppendIndex(children: DataViewTreeNode[]): number {\r\n            if (children.length === 0)\r\n                return 0;\r\n\r\n            let i: number = 0;\r\n            for (; i < children.length; i++) {\r\n                let childSegment: DataViewTreeSegmentNode = <DataViewTreeSegmentNode>children[i];\r\n                if (!childSegment.isMerge)\r\n                    break;\r\n            }\r\n\r\n            return i;\r\n        }\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import ArrayExtensions = jsCommon.ArrayExtensions;\r\n\r\n    /** Rewrites an expression tree, including all descendant nodes. */\r\n    export class SQExprRewriter implements ISQExprVisitor<SQExpr>, IFillRuleDefinitionVisitor<LinearGradient2Definition, LinearGradient3Definition> {\r\n        public visitColumnRef(expr: SQColumnRefExpr): SQExpr {\r\n            let origArg = expr.source,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return expr;\r\n\r\n            return new SQColumnRefExpr(rewrittenArg, expr.ref);\r\n        }\r\n\r\n        public visitMeasureRef(expr: SQMeasureRefExpr): SQExpr {\r\n            let origArg = expr.source,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return expr;\r\n\r\n            return new SQMeasureRefExpr(rewrittenArg, expr.ref);\r\n        }\r\n\r\n        public visitAggr(expr: SQAggregationExpr): SQExpr {\r\n            let origArg = expr.arg,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return expr;\r\n\r\n            return new SQAggregationExpr(rewrittenArg, expr.func);\r\n        }\r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr): SQExpr {\r\n            let origArg = expr.arg,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return expr;\r\n\r\n            return new SQHierarchyExpr(rewrittenArg, expr.hierarchy);\r\n        }\r\n\r\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr): SQExpr {\r\n            let origArg = expr.arg,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return expr;\r\n\r\n            return new SQHierarchyLevelExpr(rewrittenArg, expr.level);\r\n        }\r\n\r\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr): SQExpr {\r\n            let origArg = expr.arg,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return expr;\r\n\r\n            return new SQPropertyVariationSourceExpr(rewrittenArg, expr.name, expr.property);\r\n        }\r\n\r\n        public visitEntity(expr: SQEntityExpr): SQExpr {\r\n            return expr;\r\n        }\r\n\r\n        public visitAnd(orig: SQAndExpr): SQExpr {\r\n            let origLeft = orig.left,\r\n                rewrittenLeft = origLeft.accept(this),\r\n                origRight = orig.right,\r\n                rewrittenRight = origRight.accept(this);\r\n\r\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\r\n                return orig;\r\n\r\n            return new SQAndExpr(rewrittenLeft, rewrittenRight);\r\n        }\r\n\r\n        public visitBetween(orig: SQBetweenExpr): SQExpr {\r\n            let origArg = orig.arg,\r\n                rewrittenArg = origArg.accept(this),\r\n                origLower = orig.lower,\r\n                rewrittenLower = origLower.accept(this),\r\n                origUpper = orig.upper,\r\n                rewrittenUpper = origUpper.accept(this);\r\n\r\n            if (origArg === rewrittenArg && origLower === rewrittenLower && origUpper === rewrittenUpper)\r\n                return orig;\r\n\r\n            return new SQBetweenExpr(rewrittenArg, rewrittenLower, rewrittenUpper);\r\n        }\r\n\r\n        public visitIn(orig: SQInExpr): SQExpr {\r\n            let origArgs = orig.args,\r\n                rewrittenArgs = this.rewriteAll(origArgs),\r\n                origValues: SQExpr[][] = orig.values,\r\n                rewrittenValues: SQExpr[][];\r\n\r\n            for (let i = 0, len = origValues.length; i < len; i++) {\r\n                let origValueTuple = origValues[i],\r\n                    rewrittenValueTuple = this.rewriteAll(origValueTuple);\r\n\r\n                if (origValueTuple !== rewrittenValueTuple && !rewrittenValues)\r\n                    rewrittenValues = ArrayExtensions.take(origValues, i);\r\n\r\n                if (rewrittenValues)\r\n                    rewrittenValues.push(rewrittenValueTuple);\r\n            }\r\n\r\n            if (origArgs === rewrittenArgs && !rewrittenValues)\r\n                return orig;\r\n\r\n            return new SQInExpr(rewrittenArgs, rewrittenValues || origValues);\r\n        }\r\n\r\n        private rewriteAll(origExprs: SQExpr[]): SQExpr[] {\r\n            debug.assertValue(origExprs, 'origExprs');\r\n\r\n            let rewrittenResult: SQExpr[];\r\n            for (let i = 0, len = origExprs.length; i < len; i++) {\r\n                let origExpr = origExprs[i],\r\n                    rewrittenExpr = origExpr.accept(this);\r\n\r\n                if (origExpr !== rewrittenExpr && !rewrittenResult)\r\n                    rewrittenResult = ArrayExtensions.take(origExprs, i);\r\n\r\n                if (rewrittenResult)\r\n                    rewrittenResult.push(rewrittenExpr);\r\n            }\r\n\r\n            return rewrittenResult || origExprs;\r\n        }\r\n\r\n        public visitOr(orig: SQOrExpr): SQExpr {\r\n            let origLeft = orig.left,\r\n                rewrittenLeft = origLeft.accept(this),\r\n                origRight = orig.right,\r\n                rewrittenRight = origRight.accept(this);\r\n\r\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\r\n                return orig;\r\n\r\n            return new SQOrExpr(rewrittenLeft, rewrittenRight);\r\n        }\r\n\r\n        public visitCompare(orig: SQCompareExpr): SQExpr {\r\n            let origLeft = orig.left,\r\n                rewrittenLeft = origLeft.accept(this),\r\n                origRight = orig.right,\r\n                rewrittenRight = origRight.accept(this);\r\n\r\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\r\n                return orig;\r\n\r\n            return new SQCompareExpr(orig.comparison, rewrittenLeft, rewrittenRight);\r\n        }\r\n\r\n        public visitContains(orig: SQContainsExpr): SQExpr {\r\n            let origLeft = orig.left,\r\n                rewrittenLeft = origLeft.accept(this),\r\n                origRight = orig.right,\r\n                rewrittenRight = origRight.accept(this);\r\n\r\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\r\n                return orig;\r\n\r\n            return new SQContainsExpr(rewrittenLeft, rewrittenRight);\r\n        }\r\n\r\n        public visitExists(orig: SQExistsExpr): SQExpr {\r\n            let origArg = orig.arg,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return orig;\r\n\r\n            return new SQExistsExpr(rewrittenArg);\r\n        }\r\n\r\n        public visitNot(orig: SQNotExpr): SQExpr {\r\n            let origArg = orig.arg,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return orig;\r\n\r\n            return new SQNotExpr(rewrittenArg);\r\n        }\r\n\r\n        public visitStartsWith(orig: SQStartsWithExpr): SQExpr {\r\n            let origLeft = orig.left,\r\n                rewrittenLeft = origLeft.accept(this),\r\n                origRight = orig.right,\r\n                rewrittenRight = origRight.accept(this);\r\n\r\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\r\n                return orig;\r\n\r\n            return new SQStartsWithExpr(rewrittenLeft, rewrittenRight);\r\n        }\r\n\r\n        public visitConstant(expr: SQConstantExpr): SQExpr {\r\n            return expr;\r\n        }\r\n\r\n        public visitDateSpan(orig: SQDateSpanExpr): SQExpr {\r\n            let origArg = orig.arg,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return orig;\r\n\r\n            return new SQDateSpanExpr(orig.unit, rewrittenArg);\r\n        }\r\n\r\n        public visitDateAdd(orig: SQDateAddExpr): SQExpr {\r\n            let origArg = orig.arg,\r\n                rewrittenArg = origArg.accept(this);\r\n\r\n            if (origArg === rewrittenArg)\r\n                return orig;\r\n\r\n            return new SQDateAddExpr(orig.unit, orig.amount, rewrittenArg);\r\n        }\r\n\r\n        public visitNow(orig: SQNowExpr): SQExpr {\r\n            return orig;\r\n        }\r\n\r\n        public visitDefaultValue(orig: SQDefaultValueExpr): SQExpr {\r\n            return orig;\r\n        }\r\n\r\n        public visitAnyValue(orig: SQAnyValueExpr): SQExpr {\r\n            return orig;\r\n        }\r\n\r\n        public visitArithmetic(orig: SQArithmeticExpr): SQExpr {\r\n            let origLeft = orig.left,\r\n                rewrittenLeft = origLeft.accept(this),\r\n                origRight = orig.right,\r\n                rewrittenRight = origRight.accept(this);\r\n\r\n            if (origLeft === rewrittenLeft && origRight === rewrittenRight)\r\n                return orig;\r\n\r\n            return new SQArithmeticExpr(rewrittenLeft, rewrittenRight, orig.operator);\r\n        }\r\n\r\n        public visitScopedEval(orig: SQScopedEvalExpr): SQExpr {\r\n            let origExpression = orig.expression,\r\n                rewrittenExpression = origExpression.accept(this),\r\n                origScope = orig.scope,\r\n                rewrittenScope = this.rewriteAll(origScope);\r\n\r\n            if (origExpression === rewrittenExpression && origScope === rewrittenScope)\r\n                return orig;\r\n\r\n            return new SQScopedEvalExpr(rewrittenExpression, rewrittenScope);\r\n        }\r\n\r\n        public visitFillRule(orig: SQFillRuleExpr): SQExpr {\r\n            let origInput = orig.input,\r\n                rewrittenInput = origInput.accept(this);\r\n\r\n            let origRule = orig.rule;\r\n\r\n            let origGradient2 = origRule.linearGradient2,\r\n                rewrittenGradient2 = origGradient2;\r\n            if (origGradient2) {\r\n                rewrittenGradient2 = this.visitLinearGradient2(origGradient2);\r\n            }\r\n\r\n            let origGradient3 = origRule.linearGradient3,\r\n                rewrittenGradient3 = origGradient3;\r\n            if (origGradient3) {\r\n                rewrittenGradient3 = this.visitLinearGradient3(origGradient3);\r\n            }\r\n\r\n            if (origInput !== rewrittenInput ||\r\n                origGradient2 !== rewrittenGradient2 ||\r\n                origGradient3 !== rewrittenGradient3) {\r\n                let rewrittenRule: FillRuleDefinition = {};\r\n                if (rewrittenGradient2)\r\n                    rewrittenRule.linearGradient2 = rewrittenGradient2;\r\n                if (rewrittenGradient3)\r\n                    rewrittenRule.linearGradient3 = rewrittenGradient3;\r\n\r\n                return new SQFillRuleExpr(rewrittenInput, rewrittenRule);\r\n            }\r\n\r\n            return orig;\r\n        }\r\n\r\n        public visitLinearGradient2(origGradient2: LinearGradient2Definition): LinearGradient2Definition {\r\n            debug.assertValue(origGradient2, 'origGradient2');\r\n\r\n            let origMin = origGradient2.min,\r\n                rewrittenMin = this.visitFillRuleStop(origMin),\r\n                origMax = origGradient2.max,\r\n                rewrittenMax = this.visitFillRuleStop(origMax);\r\n\r\n            if (origMin !== rewrittenMin || origMax !== rewrittenMax) {\r\n                return {\r\n                    min: rewrittenMin,\r\n                    max: rewrittenMax,\r\n                };\r\n            }\r\n\r\n            return origGradient2;\r\n        }\r\n\r\n        public visitLinearGradient3(origGradient3: LinearGradient3Definition): LinearGradient3Definition {\r\n            debug.assertValue(origGradient3, 'origGradient3');\r\n\r\n            let origMin = origGradient3.min,\r\n                rewrittenMin = this.visitFillRuleStop(origMin),\r\n                origMid = origGradient3.mid,\r\n                rewrittenMid = this.visitFillRuleStop(origMid),\r\n                origMax = origGradient3.max,\r\n                rewrittenMax = this.visitFillRuleStop(origMax);\r\n\r\n            if (origMin !== rewrittenMin || origMid !== rewrittenMid || origMax !== rewrittenMax) {\r\n                return {\r\n                    min: rewrittenMin,\r\n                    mid: rewrittenMid,\r\n                    max: rewrittenMax,\r\n                };\r\n            }\r\n\r\n            return origGradient3;\r\n        }\r\n\r\n        private visitFillRuleStop(stop: RuleColorStopDefinition): RuleColorStopDefinition {\r\n            debug.assertValue(stop, 'stop');\r\n\r\n            let origColor = stop.color,\r\n                rewrittenColor = stop.color.accept(this);\r\n\r\n            let origValue = stop.value,\r\n                rewrittenValue = origValue;\r\n            if (origValue)\r\n                rewrittenValue = origValue.accept(this);\r\n\r\n            if (origColor !== rewrittenColor || origValue !== rewrittenValue) {\r\n                let rewrittenStop: RuleColorStopDefinition = {\r\n                    color: rewrittenColor\r\n                };\r\n\r\n                if (rewrittenValue)\r\n                    rewrittenStop.value = rewrittenValue;\r\n\r\n                return rewrittenStop;\r\n            }\r\n\r\n            return stop;\r\n        }\r\n\r\n        public visitResourcePackageItem(orig: SQResourcePackageItemExpr): SQExpr {\r\n            return orig;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    /** Responsible for writing equality comparisons against a field to an SQInExpr. */\r\n    export module EqualsToInRewriter {\r\n        export function run(expr: SQExpr): SQExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.accept(new Rewriter());\r\n        }\r\n\r\n        class Rewriter extends SQExprRewriter {\r\n            private current: InBuilder;\r\n\r\n            constructor() {\r\n                super();\r\n            }\r\n\r\n            public visitCompare(expr: SQCompareExpr): SQExpr {\r\n                if (expr.comparison !== QueryComparisonKind.Equal)\r\n                    return this.visitUnsupported(expr);\r\n                if (!this.isSupported(expr.left) || !this.isSupported(expr.right))\r\n                    return this.visitUnsupported(expr);\r\n\r\n                let leftIsComparand = this.isComparand(expr.left);\r\n                let rightIsComparand = this.isComparand(expr.right);\r\n                if (leftIsComparand === rightIsComparand)\r\n                    return this.visitUnsupported(expr);\r\n\r\n                let operand: SQExpr = leftIsComparand\r\n                    ? expr.left\r\n                    : expr.right;\r\n                let value: SQExpr = leftIsComparand\r\n                    ? expr.right\r\n                    : expr.left;\r\n\r\n                let current = this.current;\r\n                if (!current) {\r\n                    return SQExprBuilder.inExpr([operand], [[value]]);\r\n                }\r\n\r\n                current.add(operand, value);\r\n\r\n                return expr;\r\n            }\r\n\r\n            public visitOr(expr: SQOrExpr): SQExpr {\r\n                if (!this.isSupported(expr.left) || !this.isSupported(expr.right))\r\n                    return this.visitUnsupported(expr);\r\n\r\n                let current: InBuilder;\r\n                if (!this.current) {\r\n                    current = this.current = new InBuilder();\r\n                }\r\n\r\n                expr.left.accept(this);\r\n                expr.right.accept(this);\r\n\r\n                if (current) {\r\n                    this.current = null;\r\n                    return current.complete() || expr;\r\n                }\r\n\r\n                return expr;\r\n            }\r\n\r\n            public visitAnd(expr: SQAndExpr): SQExpr {\r\n                if (!this.isSupported(expr.left) || !this.isSupported(expr.right))\r\n                    return this.visitUnsupported(expr);\r\n\r\n                let current = this.current;\r\n                if (current) {\r\n                    // NOTE: Composite keys are not supported by this algorithm.\r\n                    current.cancel();\r\n                    return expr;\r\n                }\r\n\r\n                return super.visitAnd(expr);\r\n            }\r\n\r\n            private visitUnsupported(expr: SQExpr): SQExpr {\r\n                let current = this.current;\r\n                if (current)\r\n                    current.cancel();\r\n\r\n                return expr;\r\n            }\r\n\r\n            private isSupported(expr: SQExpr): boolean {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                return expr instanceof SQCompareExpr\r\n                    || expr instanceof SQColumnRefExpr\r\n                    || expr instanceof SQConstantExpr\r\n                    || expr instanceof SQHierarchyLevelExpr\r\n                    || expr instanceof SQOrExpr\r\n                    || expr instanceof SQAndExpr;\r\n            }\r\n\r\n            private isComparand(expr: SQExpr): boolean {\r\n                return expr instanceof SQColumnRefExpr\r\n                    || expr instanceof SQHierarchyLevelExpr;\r\n            }\r\n        }\r\n\r\n        class InBuilder {\r\n            private operand: SQExpr;\r\n            private values: SQExpr[];\r\n            private cancelled: boolean;\r\n\r\n            public add(operand: SQExpr, value: SQExpr): void {\r\n                debug.assertValue(operand, 'operand');\r\n                debug.assertValue(value, 'value');\r\n\r\n                if (this.cancelled)\r\n                    return;\r\n\r\n                if (this.operand && !SQExpr.equals(operand, this.operand)) {\r\n                    this.cancel();\r\n                    return;\r\n                }\r\n\r\n                this.operand = operand;\r\n\r\n                let values = this.values;\r\n                if (!values)\r\n                    values = this.values = [];\r\n\r\n                values.push(value);\r\n            }\r\n\r\n            public cancel(): void {\r\n                this.cancelled = true;\r\n            }\r\n\r\n            public complete(): SQInExpr {\r\n                if (this.cancelled || !this.operand)\r\n                    return;\r\n\r\n                return SQExprBuilder.inExpr([this.operand], _.map(this.values, v => [v]));\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n\r\n    export interface FilterValueScopeIdsContainer {\r\n            isNot: boolean;\r\n            scopeIds: DataViewScopeIdentity[];\r\n        }\r\n\r\n    export module SQExprConverter {\r\n        export function asScopeIdsContainer(filter: SemanticFilter, fieldSQExprs: SQExpr[]): FilterValueScopeIdsContainer {\r\n            debug.assertValue(filter, 'filter');\r\n            debug.assertValue(fieldSQExprs, 'fieldSQExprs');\r\n            debug.assert(fieldSQExprs.length > 0, 'There should be at least 1 field expression.');\r\n\r\n            let filterItems = filter.conditions();\r\n            debug.assert(filterItems.length === 1, 'There should be exactly 1 filter expression.');\r\n            let filterItem = filterItems[0];\r\n            if (filterItem) {\r\n                let visitor = new FilterScopeIdsCollectorVisitor(fieldSQExprs);\r\n                if (filterItem.accept(visitor))\r\n                    return visitor.getResult();\r\n            }\r\n        }\r\n\r\n        /** Gets a comparand value from the given DataViewScopeIdentity. */\r\n        export function getFirstComparandValue(identity: DataViewScopeIdentity): any {\r\n            debug.assertValue(identity, 'identity');\r\n\r\n            let comparandExpr = (<SQExpr>identity.expr).accept(new FindComparandVisitor());\r\n            if (comparandExpr)\r\n                return comparandExpr.value;\r\n        }\r\n    }\r\n\r\n    /** Collect filter values from simple semantic filter that is similar to 'is any of' or 'is not any of', getResult() returns a collection of scopeIds.**/\r\n    class FilterScopeIdsCollectorVisitor extends DefaultSQExprVisitor<boolean>{\r\n        private isRoot: boolean;\r\n        private isNot: boolean;\r\n        private keyExprsCount: number;\r\n        private valueExprs: SQExpr[];\r\n        private fieldExprs: SQExpr[];\r\n\r\n        constructor(fieldSQExprs:SQExpr[]) {\r\n            super();\r\n            this.isRoot = true;\r\n            this.isNot = false;\r\n            this.keyExprsCount = null;\r\n            this.valueExprs = [];\r\n\r\n            // Need to drop the entitylet before create the scopeIdentity. The ScopeIdentity created on the client is used to\r\n            // compare the ScopeIdentity came from the server. But server doesn't have the entity variable concept, so we will\r\n            // need to drop it in order to use JsonComparer.\r\n            this.fieldExprs = [];\r\n            for (let field of fieldSQExprs) {\r\n                this.fieldExprs.push(SQExprBuilder.removeEntityVariables(field));\r\n            }\r\n        }\r\n\r\n        public getResult(): FilterValueScopeIdsContainer {\r\n            debug.assert(this.fieldExprs.length > 0, 'fieldExprs has at least one fieldExpr');            \r\n\r\n            let valueExprs = this.valueExprs,\r\n                scopeIds: DataViewScopeIdentity[] = [];\r\n            let valueCount: number = this.keyExprsCount || 1;\r\n\r\n            for (let startIndex = 0, endIndex = valueCount, len = valueExprs.length; startIndex < len && endIndex <= len;) {\r\n                let values = valueExprs.slice(startIndex, endIndex);\r\n                let scopeId = FilterScopeIdsCollectorVisitor.getScopeIdentity(this.fieldExprs, values);\r\n\r\n                if (!jsCommon.ArrayExtensions.isInArray(scopeIds, scopeId, DataViewScopeIdentity.equals))\r\n                    scopeIds.push(scopeId);\r\n\r\n                startIndex += valueCount;\r\n                endIndex += valueCount;\r\n            }\r\n\r\n            return {\r\n                isNot: this.isNot,\r\n                scopeIds: scopeIds,\r\n            };\r\n        }\r\n\r\n        private static getScopeIdentity(fieldExprs: SQExpr[], valueExprs: SQExpr[]): DataViewScopeIdentity {\r\n            debug.assert(valueExprs.length > 0, 'valueExprs has at least one valueExpr');\r\n            debug.assert(valueExprs.length === fieldExprs.length, 'fieldExpr and valueExpr count should match');\r\n\r\n            let compoundSQExpr: SQExpr;\r\n            for (let i = 0, len = fieldExprs.length; i < len; i++) {\r\n                let equalsExpr = SQExprBuilder.equal(fieldExprs[i], valueExprs[i]);\r\n                if (!compoundSQExpr)\r\n                    compoundSQExpr = equalsExpr;\r\n                else\r\n                    compoundSQExpr = SQExprBuilder.and(compoundSQExpr, equalsExpr);\r\n            }\r\n\r\n            return createDataViewScopeIdentity(compoundSQExpr);\r\n        }\r\n\r\n        public visitOr(expr: SQOrExpr): boolean {\r\n            if (this.keyExprsCount !== null)\r\n                return this.unsupportedSQExpr();\r\n\r\n            this.isRoot = false;\r\n            return expr.left.accept(this) && expr.right.accept(this);\r\n        }\r\n\r\n        public visitNot(expr: SQNotExpr): boolean {\r\n            if (!this.isRoot)\r\n                return this.unsupportedSQExpr();\r\n\r\n            this.isNot = true;\r\n            return expr.arg.accept(this);\r\n        }\r\n\r\n        public visitConstant(expr: SQConstantExpr): boolean {\r\n            if (this.isRoot && expr.type.primitiveType === PrimitiveType.Null)\r\n                return this.unsupportedSQExpr();\r\n\r\n            this.valueExprs.push(expr);            \r\n            return true;\r\n        }\r\n\r\n        public visitCompare(expr: SQCompareExpr): boolean {\r\n            if (this.keyExprsCount !== null)\r\n                return this.unsupportedSQExpr();\r\n\r\n            this.isRoot = false;\r\n\r\n            if (expr.comparison !== QueryComparisonKind.Equal)\r\n                return this.unsupportedSQExpr();\r\n\r\n            return expr.left.accept(this) && expr.right.accept(this);\r\n        }\r\n\r\n        public visitIn(expr: SQInExpr): boolean {\r\n            this.keyExprsCount = 0;\r\n            let result: boolean;\r\n            this.isRoot = false;\r\n            for (let arg of expr.args) {\r\n                result = arg.accept(this);\r\n                if (!result)\r\n                    return this.unsupportedSQExpr();\r\n\r\n                this.keyExprsCount++;\r\n            }\r\n\r\n            if (this.keyExprsCount !== this.fieldExprs.length)\r\n                return this.unsupportedSQExpr();\r\n\r\n            let values = expr.values;\r\n            for (let valueTuple of values) {\r\n                let jlen = valueTuple.length;\r\n                debug.assert(jlen === this.keyExprsCount, \"keys count and values count should match\");\r\n\r\n                for (let value of valueTuple) {\r\n                    result = value.accept(this);\r\n                    if (!result)\r\n                        return this.unsupportedSQExpr();\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr): boolean {\r\n            if (this.isRoot)\r\n                return this.unsupportedSQExpr();\r\n\r\n            let fixedExpr = SQExprBuilder.removeEntityVariables(expr);\r\n            if (this.keyExprsCount !== null)\r\n                return SQExpr.equals(this.fieldExprs[this.keyExprsCount], fixedExpr);\r\n\r\n            return SQExpr.equals(this.fieldExprs[0], fixedExpr);\r\n        }\r\n\r\n        public visitDefaultValue(expr: SQDefaultValueExpr): boolean {\r\n            if (this.isRoot || this.keyExprsCount !== null)\r\n                return this.unsupportedSQExpr();\r\n\r\n            this.valueExprs.push(expr);\r\n            return true;\r\n        }\r\n\r\n        public visitAnyValue(expr: SQAnyValueExpr): boolean {\r\n            if (this.isRoot || this.keyExprsCount !== null)\r\n                return this.unsupportedSQExpr();\r\n\r\n            this.valueExprs.push(expr);\r\n            return true;\r\n        }\r\n\r\n        public visitDefault(expr: SQExpr): boolean {\r\n            return this.unsupportedSQExpr();\r\n        }\r\n\r\n        private unsupportedSQExpr(): boolean {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    class FindComparandVisitor extends DefaultSQExprVisitor<SQConstantExpr> {\r\n        public visitAnd(expr: SQAndExpr): SQConstantExpr {\r\n            return expr.left.accept(this) || expr.right.accept(this);\r\n        }\r\n\r\n        public visitCompare(expr: SQCompareExpr): SQConstantExpr {\r\n            if (expr.comparison === QueryComparisonKind.Equal) {\r\n                if (expr.right instanceof SQConstantExpr)\r\n                    return <SQConstantExpr>expr.right;\r\n                if (expr.left instanceof SQConstantExpr)\r\n                    return <SQConstantExpr>expr.left;\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import ArrayExtensions = jsCommon.ArrayExtensions;\r\n\r\n    /** Recognizes DataViewScopeIdentity expression trees to extract comparison keys. */\r\n    export module ScopeIdentityExtractor {\r\n        export function getKeys(expr: SQExpr): SQExpr[] {\r\n            let extractor = new ScopeIdExtractorImpl();\r\n            expr.accept(extractor);\r\n\r\n            if (extractor.malformed)\r\n                return null;\r\n\r\n            return ArrayExtensions.emptyToNull(extractor.keys);\r\n        }\r\n\r\n        export function getInExpr(expr: SQExpr): SQInExpr{\r\n            let extractor = new ScopeIdExtractorImpl();\r\n            expr.accept(extractor);\r\n\r\n            if (extractor.malformed)\r\n                return;\r\n            \r\n            let keys = ArrayExtensions.emptyToNull(extractor.keys);\r\n            let keyValues = ArrayExtensions.emptyToNull(extractor.values);\r\n\r\n            if (keys && keyValues)\r\n                return data.SQExprBuilder.inExpr(keys, [keyValues]);\r\n        }\r\n\r\n        /**\r\n         * Recognizes expressions of the form:\r\n         * 1) Equals(ColRef, Constant)\r\n         * 2) And(Equals(ColRef1, Constant1), Equals(ColRef2, Constant2))\r\n         * or And(And(Equals(ColRef1, Constant1), Equals(ColRef2, Constant2)), Equals(ColRef3, Constant3)) etc..\r\n         */\r\n        class ScopeIdExtractorImpl extends DefaultSQExprVisitor<void> {\r\n            public keys: SQExpr[] = [];\r\n            public values: SQConstantExpr[] = [];\r\n            public malformed: boolean;\r\n\r\n            public visitAnd(expr: SQAndExpr): void {\r\n                expr.left.accept(this);\r\n                expr.right.accept(this);\r\n            }\r\n\r\n            public visitCompare(expr: SQCompareExpr): void {\r\n                if (expr.comparison !== QueryComparisonKind.Equal) {\r\n                    this.visitDefault(expr);\r\n                    return;\r\n                }\r\n                debug.assert(expr.left instanceof SQExpr && expr.right instanceof SQConstantExpr, 'invalid compare expr operands');\r\n                expr.left.accept(this);\r\n                expr.right.accept(this);\r\n            }\r\n\r\n            public visitColumnRef(expr: SQColumnRefExpr): void {\r\n                this.keys.push(expr);\r\n            }\r\n\r\n            public visitHierarchyLevel(expr: SQHierarchyLevelExpr): void {\r\n                this.keys.push(expr);\r\n            }\r\n\r\n            public visitConstant(expr: SQConstantExpr): void {\r\n                this.values.push(expr);\r\n            }\r\n\r\n            public visitArithmetic(expr: SQArithmeticExpr): void {\r\n                this.keys.push(expr);\r\n            }\r\n\r\n            public visitDefault(expr: SQExpr): void {\r\n                this.malformed = true;\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export module PrimitiveValueEncoding {\r\n        const SingleQuoteRegex = /'/g;\r\n\r\n        export function decimal(value: number): string {\r\n            debug.assertValue(value, 'value');\r\n\r\n            return value + 'M';\r\n        }\r\n\r\n        export function double(value: number): string {\r\n            debug.assertValue(value, 'value');\r\n\r\n            return value + 'D';\r\n        }\r\n\r\n        export function integer(value: number): string {\r\n            debug.assertValue(value, 'value');\r\n\r\n            return value + 'L';\r\n        }\r\n\r\n        export function dateTime(value: Date): string {\r\n            debug.assertValue(value, 'value');\r\n\r\n            // Currently, server doesn't support timezone. All date time data on the server don't have time zone information.\r\n            // So, when we construct a dateTime object on the client, we will need to ignor user's time zone and force it to be UTC time.\r\n            // When we subtract the timeZone offset, the date time object will remain the same value as you entered but dropped the local timeZone.\r\n            let date = new Date(value.getTime() - (value.getTimezoneOffset() * 60000));\r\n            let dateTimeString = date.toISOString();\r\n\r\n            // If it ends with Z, we want to get rid of it, because with trailing Z, it will assume the dateTime is UTC, but we don't want any timeZone information, so\r\n            // we will drop it.\r\n            // Also, we need to add Prefix and Suffix to match the dsr value format for dateTime object.\r\n            if (jsCommon.StringExtensions.endsWith(dateTimeString, 'Z'))\r\n                dateTimeString = dateTimeString.substr(0, dateTimeString.length - 1);\r\n            return \"datetime'\" + dateTimeString + \"'\";\r\n        }\r\n\r\n        export function text(value: string): string {\r\n            debug.assertValue(value, 'value');\r\n\r\n            return \"'\" + value.replace(SingleQuoteRegex, \"''\") + \"'\";\r\n        }\r\n\r\n        export function nullEncoding(): string {\r\n            return 'null';\r\n        }\r\n\r\n        export function boolean(value: boolean): string {\r\n            return value ? 'true' : 'false';\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import Agg = powerbi.data.QueryAggregateFunction;\r\n\r\n    export interface ISQAggregationOperations {\r\n        /** Returns an array of supported aggregates for a given expr and role type. */\r\n        getSupportedAggregates(\r\n            expr: SQExpr,\r\n            schema: FederatedConceptualSchema,\r\n            targetTypes: ValueTypeDescriptor[]): QueryAggregateFunction[];\r\n\r\n        isSupportedAggregate(\r\n            expr: SQExpr,\r\n            schema: FederatedConceptualSchema,\r\n            aggregate: QueryAggregateFunction,\r\n            targetTypes: ValueTypeDescriptor[]): boolean;\r\n\r\n        createExprWithAggregate(\r\n            expr: SQExpr,\r\n            schema: FederatedConceptualSchema,\r\n            aggregateNonNumericFields: boolean,\r\n            targetTypes: ValueTypeDescriptor[],\r\n            preferredAggregate?: QueryAggregateFunction): SQExpr;\r\n    }\r\n\r\n    export function createSQAggregationOperations(datetimeMinMaxSupported: boolean): ISQAggregationOperations {\r\n        return new SQAggregationOperations(datetimeMinMaxSupported);\r\n    }\r\n\r\n    class SQAggregationOperations implements ISQAggregationOperations {\r\n        constructor(private datetimeMinMaxSupported: boolean) {\r\n        }\r\n\r\n        public getSupportedAggregates(\r\n            expr: SQExpr,\r\n            schema: FederatedConceptualSchema,\r\n            targetTypes: ValueTypeDescriptor[]): QueryAggregateFunction[] {\r\n\r\n            debug.assertValue(expr, 'expr');\r\n            debug.assertValue(schema, 'schema');\r\n            debug.assertAnyValue(targetTypes, 'targetTypes');\r\n\r\n            let metadata = getMetadataForUnderlyingType(expr, schema);\r\n\r\n            // don't use expr.validate as validate will be using this function and we end up in a recursive loop\r\n            if (!metadata)\r\n                return [];\r\n\r\n            let valueType = metadata.type,\r\n                fieldKind = metadata.kind,\r\n                isPropertyIdentity = metadata.idOnEntityKey;\r\n\r\n            if (!valueType)\r\n                return [];\r\n\r\n            // Cannot aggregate on model measures\r\n            if (fieldKind === FieldKind.Measure)\r\n                return [];\r\n\r\n            if (valueType.numeric || valueType.integer) {\r\n                let aggregates = [Agg.Sum, Agg.Avg, Agg.Min, Agg.Max, Agg.Count, Agg.CountNonNull, Agg.StandardDeviation, Agg.Variance];\r\n                let fieldExpr = SQExprConverter.asFieldPattern(expr);\r\n                let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\r\n\r\n                let currentSchema = schema.schema(fieldExprItem.schema);\r\n                if (currentSchema.capabilities.supportsMedian)\r\n                    aggregates.push(Agg.Median);\r\n\r\n                return aggregates;\r\n            }\r\n\r\n            let aggregates: QueryAggregateFunction[] = [];\r\n\r\n            // Min/Max of DateTime\r\n            if (this.datetimeMinMaxSupported &&\r\n                valueType.dateTime &&\r\n                (_.isEmpty(targetTypes) || ValueType.isCompatibleTo(valueType, targetTypes))) {\r\n                aggregates.push(Agg.Min);\r\n                aggregates.push(Agg.Max);\r\n            }\r\n\r\n            // The supported aggregation types for an identity field are restricted to 'Count Non-Null' (e.g. for the field well aggregation options)\r\n            // but a valid semantic query can return a less-restricted aggregation option which we should honor. (e.g. this results from Q&A)\r\n            let distinctCountAggExists = SQExprInfo.getAggregate(expr) === Agg.Count;\r\n            if (!(isPropertyIdentity && !distinctCountAggExists))\r\n                aggregates.push(Agg.Count);\r\n\r\n            aggregates.push(Agg.CountNonNull);\r\n\r\n            return aggregates;\r\n        }\r\n\r\n        public isSupportedAggregate(\r\n            expr: SQExpr,\r\n            schema: FederatedConceptualSchema,\r\n            aggregate: QueryAggregateFunction,\r\n            targetTypes: ValueTypeDescriptor[]): boolean {\r\n\r\n            debug.assertValue(expr, 'expr');\r\n            debug.assertValue(schema, 'schema');\r\n\r\n            let supportedAggregates = this.getSupportedAggregates(expr, schema, targetTypes);\r\n            return _.contains(supportedAggregates, aggregate);\r\n        }\r\n\r\n        public createExprWithAggregate(\r\n            expr: SQExpr,\r\n            schema: FederatedConceptualSchema,\r\n            aggregateNonNumericFields: boolean,\r\n            targetTypes: ValueTypeDescriptor[],\r\n            preferredAggregate?: QueryAggregateFunction): SQExpr {\r\n\r\n            debug.assertValue(expr, 'expr');\r\n            debug.assertValue(schema, 'schema');\r\n\r\n            let aggregate: QueryAggregateFunction;\r\n            if (preferredAggregate != null && this.isSupportedAggregate(expr, schema, preferredAggregate, targetTypes)) {\r\n                aggregate = preferredAggregate;\r\n            }\r\n            else {\r\n                aggregate = expr.getDefaultAggregate(schema, aggregateNonNumericFields);\r\n            }\r\n            if (aggregate !== undefined)\r\n                expr = SQExprBuilder.aggregate(expr, aggregate);\r\n\r\n            return expr;\r\n        }\r\n    }\r\n\r\n    function getMetadataForUnderlyingType(expr: SQExpr, schema: FederatedConceptualSchema): SQExprMetadata {\r\n        // Unwrap the aggregate (if the expr has one), and look at the underlying type.\r\n        let metadata = SQExprBuilder.removeAggregate(expr).getMetadata(schema);\r\n\r\n        if (!metadata)\r\n            metadata = expr.getMetadata(schema);\r\n\r\n        return metadata;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n\r\n    export module SQHierarchyExprUtils {\r\n        export function getConceptualHierarchyLevelFromExpr(\r\n            conceptualSchema: FederatedConceptualSchema,\r\n            fieldExpr: FieldExprPattern): ConceptualHierarchyLevel {\r\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\r\n            let hierarchyLevel = fieldExpr.hierarchyLevel || fieldExpr.hierarchyLevelAggr;\r\n            if (hierarchyLevel)\r\n                return SQHierarchyExprUtils.getConceptualHierarchyLevel(\r\n                    conceptualSchema,\r\n                    fieldExprItem.schema,\r\n                    fieldExprItem.entity,\r\n                    hierarchyLevel.name,\r\n                    hierarchyLevel.level);\r\n        }\r\n\r\n        export function getConceptualHierarchyLevel(\r\n            conceptualSchema: FederatedConceptualSchema,\r\n            schemaName: string,\r\n            entity: string,\r\n            hierarchy: string,\r\n            hierarchyLevel: string): ConceptualHierarchyLevel {\r\n\r\n            let schema = conceptualSchema.schema(schemaName);\r\n            let conceptualHierarchy = schema.findHierarchy(entity, hierarchy);\r\n            if (conceptualHierarchy) {\r\n                return conceptualHierarchy.levels.withName(hierarchyLevel);\r\n            }\r\n        }\r\n\r\n        export function getConceptualHierarchy(sqExpr: SQExpr, federatedSchema: FederatedConceptualSchema): ConceptualHierarchy {\r\n            if (sqExpr instanceof SQHierarchyExpr) {\r\n                let hierarchy = <SQHierarchyExpr>sqExpr;\r\n\r\n                if (sqExpr.arg instanceof SQEntityExpr) {\r\n                    let entityExpr = <SQEntityExpr>sqExpr.arg;\r\n                    return federatedSchema\r\n                        .schema(entityExpr.schema)\r\n                        .findHierarchy(entityExpr.entity, hierarchy.hierarchy);\r\n                } else if (sqExpr.arg instanceof SQPropertyVariationSourceExpr) {\r\n                    let variationExpr = <SQPropertyVariationSourceExpr>sqExpr.arg;\r\n                    let sourceEntityExpr = <SQEntityExpr>variationExpr.arg;\r\n                    return federatedSchema\r\n                        .schema(sourceEntityExpr.schema)\r\n                        .findHierarchyByVariation(sourceEntityExpr.entity, variationExpr.property, variationExpr.name, hierarchy.hierarchy);\r\n                }\r\n            }\r\n        }\r\n\r\n        export function expandExpr(schema: FederatedConceptualSchema, expr: SQExpr, suppressHierarchyLevelExpansion?: boolean): SQExpr | SQExpr[] {\r\n            return SQExprHierarchyToHierarchyLevelConverter.convert(expr, schema) ||\r\n                SQExprVariationConverter.expand(expr, schema) ||\r\n                // If we are calling expandExpr from suppressHierarchyLevelExpansion, we should not expand the hierarchylevels\r\n                (!suppressHierarchyLevelExpansion && SQExprHierarchyLevelConverter.expand(expr, schema)) ||\r\n                expr;\r\n        }\r\n\r\n        export function isHierarchyOrVariation(schema: FederatedConceptualSchema, expr: SQExpr): boolean {\r\n            if (expr instanceof SQHierarchyExpr || expr instanceof SQHierarchyLevelExpr)\r\n                return true;\r\n\r\n            let conceptualProperty = expr.getConceptualProperty(schema);\r\n            if (conceptualProperty) {\r\n                let column = conceptualProperty.column;\r\n                if (column && column.variations && column.variations.length > 0)\r\n                    return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        // Return column reference expression for hierarchy level expression.\r\n        export function getSourceVariationExpr(hierarchyLevelExpr: data.SQHierarchyLevelExpr): SQColumnRefExpr {\r\n            let fieldExprPattern: data.FieldExprPattern = data.SQExprConverter.asFieldPattern(hierarchyLevelExpr);\r\n            if (fieldExprPattern.columnHierarchyLevelVariation) {\r\n                let entity: data.SQExpr = SQExprBuilder.entity(fieldExprPattern.columnHierarchyLevelVariation.source.schema, fieldExprPattern.columnHierarchyLevelVariation.source.entity);\r\n\r\n                return SQExprBuilder.columnRef(entity, fieldExprPattern.columnHierarchyLevelVariation.source.name);\r\n            }\r\n        }\r\n\r\n        // Return hierarchy expression for hierarchy level expression.\r\n        export function getSourceHierarchy(hierarchyLevelExpr: data.SQHierarchyLevelExpr): SQHierarchyExpr {\r\n            let fieldExprPattern: data.FieldExprPattern = data.SQExprConverter.asFieldPattern(hierarchyLevelExpr);\r\n            let hierarchyLevel = fieldExprPattern.hierarchyLevel;\r\n            if (hierarchyLevel) {\r\n                let entity: data.SQExpr = SQExprBuilder.entity(hierarchyLevel.schema, hierarchyLevel.entity, hierarchyLevel.entityVar);\r\n                return SQExprBuilder.hierarchy(entity, hierarchyLevel.name);\r\n            }\r\n        }\r\n\r\n        export function getHierarchySourceAsVariationSource(hierarchyLevelExpr: SQHierarchyLevelExpr): SQPropertyVariationSourceExpr {\r\n\r\n            // Make sure the hierarchy level source is a hierarchy\r\n            if (!(hierarchyLevelExpr.arg instanceof SQHierarchyExpr))\r\n                return;\r\n                        \r\n            // Check if the hierarchy source if a variation\r\n            let hierarchyRef = <SQHierarchyExpr>hierarchyLevelExpr.arg;\r\n            if (hierarchyRef.arg instanceof SQPropertyVariationSourceExpr)\r\n                return <SQPropertyVariationSourceExpr>hierarchyRef.arg;\r\n        }\r\n\r\n        /**\r\n        * Returns true if firstExpr and secondExpr are levels in the same hierarchy and firstExpr is before secondExpr in allLevels.\r\n        */\r\n        export function areHierarchyLevelsOrdered(allLevels: SQHierarchyLevelExpr[], firstExpr: SQExpr, secondExpr: SQExpr): boolean {\r\n\r\n            // Validate that both items hierarchy levels\r\n            if (!(firstExpr instanceof SQHierarchyLevelExpr) || !(secondExpr instanceof SQHierarchyLevelExpr))\r\n                return false;\r\n\r\n            let firstLevel = <SQHierarchyLevelExpr>firstExpr;\r\n            let secondLevel = <SQHierarchyLevelExpr>secondExpr;\r\n\r\n            // Validate that both items belong to the same hierarchy\r\n            if (!SQExpr.equals(firstLevel.arg, secondLevel.arg))\r\n                return false;\r\n\r\n            // Determine the order\r\n            let firstIndex = SQExprUtils.indexOfExpr(allLevels, firstLevel);\r\n            let secondIndex = SQExprUtils.indexOfExpr(allLevels, secondLevel);\r\n\r\n            return firstIndex !== -1 && secondIndex !== -1 && firstIndex < secondIndex;\r\n        }\r\n\r\n        /**\r\n         * Given an ordered set of levels and an ordered subset of those levels, returns the index where\r\n         * expr should be inserted into the subset to maintain the correct order.\r\n         */\r\n        export function getInsertionIndex(allLevels: SQHierarchyLevelExpr[], orderedSubsetOfLevels: SQHierarchyLevelExpr[], expr: SQHierarchyLevelExpr): number {\r\n\r\n            let insertIndex = 0;\r\n\r\n            // Loop through the supplied levels until the insertion would no longer be in the correct order\r\n            while (insertIndex < orderedSubsetOfLevels.length &&\r\n                areHierarchyLevelsOrdered(allLevels, orderedSubsetOfLevels[insertIndex], expr)) {\r\n                insertIndex++;\r\n            }\r\n\r\n            return insertIndex;\r\n        }\r\n    }\r\n\r\n    export module SQExprHierarchyToHierarchyLevelConverter {\r\n        export function convert(sqExpr: SQExpr, federatedSchema: FederatedConceptualSchema): SQExpr[] {\r\n            debug.assertValue(sqExpr, 'sqExpr');\r\n            debug.assertValue(federatedSchema, 'federatedSchema');\r\n\r\n            if (sqExpr instanceof SQHierarchyExpr) {\r\n                let hierarchyExpr = <SQHierarchyExpr>sqExpr;\r\n\r\n                let conceptualHierarchy = SQHierarchyExprUtils.getConceptualHierarchy(hierarchyExpr, federatedSchema);\r\n                if (conceptualHierarchy)\r\n                    return _.map(conceptualHierarchy.levels, hierarchyLevel => SQExprBuilder.hierarchyLevel(sqExpr, hierarchyLevel.name));\r\n            }\r\n        }\r\n    }\r\n\r\n    module SQExprHierarchyLevelConverter {\r\n        export function expand(expr: SQExpr, schema: FederatedConceptualSchema): SQExpr[] {\r\n            debug.assertValue(expr, 'sqExpr');\r\n            debug.assertValue(schema, 'federatedSchema');\r\n            let exprs: SQExpr[] = [];\r\n\r\n            if (expr instanceof SQHierarchyLevelExpr) {\r\n                let fieldExpr = SQExprConverter.asFieldPattern(expr);\r\n                if (fieldExpr.hierarchyLevel) {\r\n                    let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\r\n                    let hierarchy = schema\r\n                        .schema(fieldExprItem.schema)\r\n                        .findHierarchy(fieldExprItem.entity, fieldExpr.hierarchyLevel.name);\r\n\r\n                    if (hierarchy) {\r\n                        let hierarchyLevels = hierarchy.levels;\r\n                        for (let hierarchyLevel of hierarchyLevels) {\r\n                            if (hierarchyLevel.name === fieldExpr.hierarchyLevel.level) {\r\n                                exprs.push(expr);\r\n                                break;\r\n                            }\r\n                            else\r\n                                exprs.push(\r\n                                    SQExprBuilder.hierarchyLevel(\r\n                                        SQExprBuilder.hierarchy(\r\n                                            SQExprBuilder.entity(fieldExprItem.schema, fieldExprItem.entity, fieldExprItem.entityVar),\r\n                                            hierarchy.name),\r\n                                        hierarchyLevel.name)\r\n                                );\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!_.isEmpty(exprs))\r\n                return exprs;\r\n        }\r\n    }\r\n\r\n    module SQExprVariationConverter {\r\n        export function expand(expr: SQExpr, schema: FederatedConceptualSchema): SQExpr[] {\r\n            debug.assertValue(expr, 'sqExpr');\r\n            debug.assertValue(schema, 'federatedSchema');\r\n\r\n            let exprs: SQExpr[];\r\n            let conceptualProperty = expr.getConceptualProperty(schema);\r\n\r\n            if (conceptualProperty) {\r\n                let column = conceptualProperty.column;\r\n                if (column && column.variations && column.variations.length > 0) {\r\n                    let variations = column.variations;\r\n\r\n                    // for SU11, we support only one variation\r\n                    debug.assert(variations.length === 1, \"variations.length\");\r\n                    let variation = variations[0];\r\n\r\n                    let fieldExpr = SQExprConverter.asFieldPattern(expr);\r\n                    let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\r\n\r\n                    exprs = [];\r\n                    if (variation.defaultHierarchy) {\r\n                        let hierarchyExpr = SQExprBuilder.hierarchy(\r\n                            SQExprBuilder.propertyVariationSource(\r\n                                SQExprBuilder.entity(fieldExprItem.schema, fieldExprItem.entity, fieldExprItem.entityVar),\r\n                                variation.name, conceptualProperty.name),\r\n                            variation.defaultHierarchy.name);\r\n\r\n                        for (let level of variation.defaultHierarchy.levels)\r\n                            exprs.push(SQExprBuilder.hierarchyLevel(hierarchyExpr, level.name));\r\n                    }\r\n                }\r\n            }\r\n\r\n            return exprs;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    // A group can consist of either a single expression, or a collection of hierarchy expressions\r\n    export interface SQExprGroup {\r\n        expr: SQExpr;\r\n        children: SQHierarchyLevelExpr[];\r\n\r\n        /** Index of expression in the query. */\r\n        selectQueryIndex: number;\r\n    };\r\n\r\n    export module SQExprGroupUtils {\r\n        /** Group all projections. Eacch group can consist of either a single property, or a collection of hierarchy items. */\r\n        export function groupExprs(schema: FederatedConceptualSchema, exprs: SQExpr[]): SQExprGroup[] {\r\n            let groups: SQExprGroup[] = [];\r\n            for (let i = 0, len = exprs.length; i < len; i++) {\r\n                let expr = exprs[i];\r\n                debug.assertValue(expr, \"Expression not found\");\r\n\r\n                if (!(expr instanceof SQHierarchyLevelExpr)) {\r\n                    groups.push({ expr: expr, children: null, selectQueryIndex: i });\r\n                }\r\n                else {\r\n                    addChildToGroup(schema, groups, expr, i);\r\n                }\r\n            }\r\n\r\n            return groups;\r\n        }\r\n\r\n        function addChildToGroup(\r\n            schema: FederatedConceptualSchema,\r\n            groups: SQExprGroup[],\r\n            expr: SQHierarchyLevelExpr,\r\n            selectQueryIndex: number): void {\r\n\r\n            // shouldAddExpressionToNewGroup is used to control whether we should add the passed expr to \r\n            // a new Group or to the last Group\r\n            let shouldAddExpressionToNewGroup = true;\r\n            let exprSource = SQHierarchyExprUtils.getSourceVariationExpr(expr) || SQHierarchyExprUtils.getSourceHierarchy(expr);\r\n            let lastGroup = _.last(groups);\r\n\r\n            // The relevant group is always the last added. If it has the same source hierarchy,\r\n            // and is properly ordered within that hierarchy, we will need to add to this group.\r\n            if (lastGroup && lastGroup.children && SQExpr.equals(lastGroup.expr, exprSource)) {\r\n                let expandedExpr = SQHierarchyExprUtils.expandExpr(schema, expr.arg);\r\n                if (expandedExpr instanceof Array) {\r\n                    let allHierarchyLevels = <SQHierarchyLevelExpr[]>expandedExpr;\r\n                    shouldAddExpressionToNewGroup = !SQHierarchyExprUtils.areHierarchyLevelsOrdered(allHierarchyLevels, _.last(lastGroup.children), expr);\r\n                }\r\n            }\r\n\r\n            if (shouldAddExpressionToNewGroup)\r\n                // Use the Sourcevariation as the expression for the group.\r\n                groups.push({ expr: exprSource, children: [expr], selectQueryIndex: selectQueryIndex });\r\n            else {\r\n                debug.assertValue(lastGroup, 'There should be a group to add the variation to');\r\n                debug.assertValue(lastGroup.children, 'The group should have children to add the variation to');\r\n                lastGroup.children.push(expr);\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import StringExtensions = jsCommon.StringExtensions;\r\n\r\n    /** Represents an immutable expression within a SemanticQuery. */\r\n    export abstract class SQExpr implements ISQExpr {\r\n        private _kind: SQExprKind;\r\n\r\n        constructor(kind: SQExprKind) {\r\n            debug.assertValue(kind, 'kind');\r\n\r\n            this._kind = kind;\r\n        }\r\n\r\n        public static equals(x: SQExpr, y: SQExpr, ignoreCase?: boolean): boolean {\r\n            return SQExprEqualityVisitor.run(x, y, ignoreCase);\r\n        }\r\n\r\n        public validate(schema: FederatedConceptualSchema, aggrUtils: ISQAggregationOperations, errors?: SQExprValidationError[]): SQExprValidationError[] {\r\n            let validator = new SQExprValidationVisitor(schema, aggrUtils, errors);\r\n            this.accept(validator);\r\n            return validator.errors;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            debug.assertFail('abstract method');\r\n            return;\r\n        }\r\n\r\n        public get kind(): SQExprKind {\r\n            return this._kind;\r\n        }\r\n\r\n        public static isColumn(expr: SQExpr): expr is SQColumnRefExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.kind === SQExprKind.ColumnRef;\r\n        }\r\n\r\n        public static isConstant(expr: SQExpr): expr is SQConstantExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.kind === SQExprKind.Constant;\r\n        }\r\n\r\n        public static isEntity(expr: SQExpr): expr is SQEntityExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.kind === SQExprKind.Entity;\r\n        }\r\n\r\n        public static isHierarchy(expr: SQExpr): expr is SQHierarchyExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.kind === SQExprKind.Hierarchy;\r\n        }\r\n\r\n        public static isHierarchyLevel(expr: SQExpr): expr is SQHierarchyLevelExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.kind === SQExprKind.HierarchyLevel;\r\n        }\r\n\r\n        public static isAggregation(expr: SQExpr): expr is SQAggregationExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.kind === SQExprKind.Aggregation;\r\n        }\r\n\r\n        public static isMeasure(expr: SQExpr): expr is SQMeasureRefExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.kind === SQExprKind.MeasureRef;\r\n        }\r\n\r\n        public static isResourcePackageItem(expr: SQExpr): expr is SQResourcePackageItemExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.kind === SQExprKind.ResourcePackageItem;\r\n        }\r\n\r\n        public getMetadata(federatedSchema: FederatedConceptualSchema): SQExprMetadata {\r\n            debug.assertValue(federatedSchema, 'federatedSchema');\r\n\r\n            let field = SQExprConverter.asFieldPattern(this);\r\n            if (!field)\r\n                return;\r\n\r\n            if (field.column || field.columnAggr || field.measure)\r\n                return this.getMetadataForProperty(field, federatedSchema);\r\n\r\n            if (field.hierarchyLevel || field.hierarchyLevelAggr)\r\n                return this.getMetadataForHierarchyLevel(field, federatedSchema);\r\n\r\n            if (field.columnHierarchyLevelVariation)\r\n                return this.getMetadataForVariation(field, federatedSchema);\r\n\r\n            return SQExpr.getMetadataForEntity(field, federatedSchema);\r\n        }\r\n\r\n        public getDefaultAggregate(federatedSchema: FederatedConceptualSchema, forceAggregation: boolean = false): QueryAggregateFunction {\r\n            debug.assertValue(federatedSchema, 'federatedSchema');\r\n\r\n            let property = this.getConceptualProperty(federatedSchema) || this.getHierarchyLevelConceptualProperty(federatedSchema);\r\n            if (!property)\r\n                return;\r\n\r\n            let aggregate: QueryAggregateFunction;\r\n\r\n            if (property && property.kind === ConceptualPropertyKind.Column) {\r\n                let propertyDefaultAggregate = property.column ? property.column.defaultAggregate : null;\r\n\r\n                if ((property.type.integer || property.type.numeric) &&\r\n                    propertyDefaultAggregate !== ConceptualDefaultAggregate.None) {\r\n                    aggregate = defaultAggregateToQueryAggregateFunction(propertyDefaultAggregate);\r\n                    if (aggregate === undefined)\r\n                        aggregate = defaultAggregateForDataType(property.type);\r\n                }\r\n\r\n                // If we haven't found an appropriate aggregate, and want to force aggregation anyway, \r\n                // aggregate on CountNonNull.\r\n                if (aggregate === undefined && forceAggregation) {\r\n                    aggregate = QueryAggregateFunction.CountNonNull;\r\n                }\r\n            }\r\n\r\n            return aggregate;\r\n        }\r\n\r\n        /** Return the SQExpr[] of group on columns if it has group on keys otherwise return the SQExpr of the column.*/\r\n        public getKeyColumns(schema: FederatedConceptualSchema): SQExpr[] {\r\n            let columnRefExpr = SQExprColumnRefInfoVisitor.getColumnRefSQExpr(schema, this);\r\n            if (!columnRefExpr)\r\n                return;\r\n\r\n            let keySQExprs: SQExpr[] = [];\r\n            let keys = this.getPropertyKeys(schema);\r\n            if (keys && keys.length > 0) {\r\n                for (let i = 0, len = keys.length; i < len; i++) {\r\n                    keySQExprs.push(SQExprBuilder.columnRef(columnRefExpr.source, keys[i].name));\r\n                }\r\n            }\r\n            else\r\n                keySQExprs.push(columnRefExpr);\r\n\r\n            return keySQExprs;\r\n        }\r\n\r\n        /** Returns a value indicating whether the expression would group on keys other than itself.*/\r\n        public hasGroupOnKeys(schema: FederatedConceptualSchema): boolean {\r\n            let columnRefExpr = SQExprColumnRefInfoVisitor.getColumnRefSQExpr(schema, this);\r\n            if (!columnRefExpr)\r\n                return;\r\n            let keys = this.getPropertyKeys(schema);\r\n\r\n            if (!keys || keys.length < 1)\r\n                return false;\r\n\r\n            if (keys.length > 1)\r\n                return true;\r\n\r\n            let keySqExpr = SQExprBuilder.columnRef(columnRefExpr.source, keys[0].name);\r\n            return !SQExpr.equals(keySqExpr, this);\r\n        }\r\n\r\n        private getPropertyKeys(schema: FederatedConceptualSchema): jsCommon.ArrayNamedItems<ConceptualProperty> {\r\n            let property = this.getConceptualProperty(schema) || this.getHierarchyLevelConceptualProperty(schema);\r\n            if (!property)\r\n                return;\r\n\r\n            return property.column ? property.column.keys : undefined;\r\n        }\r\n\r\n        public getConceptualProperty(federatedSchema: FederatedConceptualSchema): ConceptualProperty {\r\n            let field = SQExprConverter.asFieldPattern(this);\r\n            if (!field)\r\n                return;\r\n\r\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(field);\r\n            let propertyName = FieldExprPattern.getPropertyName(field);\r\n\r\n            if (propertyName)\r\n                return federatedSchema\r\n                    .schema(fieldExprItem.schema)\r\n                    .findProperty(fieldExprItem.entity, propertyName);\r\n        }\r\n\r\n        public getTargetEntityForVariation(federatedSchema: FederatedConceptualSchema, variationName: string): string {\r\n            let property = this.getConceptualProperty(federatedSchema);\r\n            if (property && property.column && !_.isEmpty(property.column.variations)) {\r\n                let variations = property.column.variations;\r\n                for (let variation of variations)\r\n                    if (variation.name === variationName)\r\n                        return variation.navigationProperty.targetEntity.name;\r\n            }\r\n        }\r\n\r\n        public getTargetEntity(federatedSchema: FederatedConceptualSchema): SQEntityExpr {\r\n            return SQEntityExprInfoVisitor.getEntityExpr(federatedSchema, this);\r\n        }\r\n\r\n        private getHierarchyLevelConceptualProperty(federatedSchema: FederatedConceptualSchema): ConceptualProperty {\r\n            let field = SQExprConverter.asFieldPattern(this);\r\n            if (!field)\r\n                return;\r\n\r\n            let fieldExprHierachyLevel = field.hierarchyLevel || field.hierarchyLevelAggr;\r\n            if (fieldExprHierachyLevel) {\r\n                let fieldExprEntity = FieldExprPattern.toFieldExprEntityItemPattern(field);\r\n\r\n                let hierarchy = federatedSchema\r\n                    .schema(fieldExprEntity.schema)\r\n                    .findHierarchy(fieldExprEntity.entity, fieldExprHierachyLevel.name);\r\n\r\n                if (hierarchy) {\r\n                    let hierarchyLevel = hierarchy.levels.withName(fieldExprHierachyLevel.level);\r\n                    if (hierarchyLevel)\r\n                        return hierarchyLevel.column;\r\n                }\r\n            }\r\n        }\r\n\r\n        private getMetadataForVariation(field: data.FieldExprPattern, federatedSchema: FederatedConceptualSchema): SQExprMetadata {\r\n            debug.assertValue(field, 'field');\r\n            debug.assertValue(federatedSchema, 'federatedSchema');\r\n\r\n            let columnHierarchyLevelVariation = field.columnHierarchyLevelVariation;\r\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(field);\r\n            let sourceProperty = federatedSchema\r\n                .schema(fieldExprItem.schema)\r\n                .findProperty(fieldExprItem.entity, columnHierarchyLevelVariation.source.name);\r\n\r\n            if (sourceProperty && sourceProperty.column && sourceProperty.column.variations) {\r\n                for (let variation of sourceProperty.column.variations) {\r\n                    if (variation.defaultHierarchy && variation.defaultHierarchy.levels) {\r\n                        for (let level of variation.defaultHierarchy.levels) {\r\n                            if (level.name === columnHierarchyLevelVariation.level.level) {\r\n                                let property = level.column;\r\n                                return {\r\n                                    kind: (property.kind === ConceptualPropertyKind.Measure) ? FieldKind.Measure : FieldKind.Column,\r\n                                    type: property.type,\r\n                                    format: property.format,\r\n                                    idOnEntityKey: property.column ? property.column.idOnEntityKey : false,\r\n                                    defaultAggregate: property.column ? property.column.defaultAggregate : null\r\n                                };\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        private getMetadataForHierarchyLevel(field: FieldExprPattern, federatedSchema: FederatedConceptualSchema): SQExprMetadata {\r\n            debug.assertValue(field, 'field');\r\n            debug.assertValue(federatedSchema, 'federatedSchema');\r\n\r\n            let property = this.getHierarchyLevelConceptualProperty(federatedSchema);\r\n            if (!property)\r\n                return;\r\n\r\n            return this.getPropertyMetadata(field, property);\r\n        }\r\n\r\n        private getPropertyMetadata(field: FieldExprPattern, property: ConceptualProperty): SQExprMetadata {\r\n            let format = property.format;\r\n            let type = property.type;\r\n            let columnAggregate = field.columnAggr || field.hierarchyLevelAggr;\r\n\r\n            if (columnAggregate) {\r\n                switch (columnAggregate.aggregate) {\r\n                    case QueryAggregateFunction.Count:\r\n                    case QueryAggregateFunction.CountNonNull:\r\n                        type = ValueType.fromExtendedType(ExtendedType.Integer);\r\n                        format = undefined;\r\n                        break;\r\n                    case QueryAggregateFunction.Avg:\r\n                        if (type.integer)\r\n                            type = ValueType.fromExtendedType(ExtendedType.Double);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            return {\r\n                kind: (property.kind === ConceptualPropertyKind.Measure || (columnAggregate && columnAggregate.aggregate !== undefined)) ? FieldKind.Measure : FieldKind.Column,\r\n                type: type,\r\n                format: format,\r\n                idOnEntityKey: property.column ? property.column.idOnEntityKey : false,\r\n                aggregate: columnAggregate ? columnAggregate.aggregate : undefined,\r\n                defaultAggregate: property.column ? property.column.defaultAggregate : null\r\n            };\r\n        }\r\n\r\n        private getMetadataForProperty(field: FieldExprPattern, federatedSchema: FederatedConceptualSchema): SQExprMetadata {\r\n            debug.assertValue(field, 'field');\r\n            debug.assertValue(federatedSchema, 'federatedSchema');\r\n\r\n            let property = this.getConceptualProperty(federatedSchema);\r\n            if (!property)\r\n                return;\r\n\r\n            return this.getPropertyMetadata(field, property);\r\n        }\r\n\r\n        private static getMetadataForEntity(field: FieldExprPattern, federatedSchema: FederatedConceptualSchema): SQExprMetadata {\r\n            debug.assertValue(field, 'field');\r\n            debug.assertValue(federatedSchema, 'federatedSchema');\r\n\r\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(field);\r\n            let entity = federatedSchema\r\n                .schema(fieldExprItem.schema)\r\n                .entities\r\n                .withName(fieldExprItem.entity);\r\n\r\n            if (!entity)\r\n                return;\r\n\r\n            // We only support count and countnonnull for entity.\r\n            if (field.entityAggr) {\r\n                switch (field.entityAggr.aggregate) {\r\n                    case QueryAggregateFunction.Count:\r\n                    case QueryAggregateFunction.CountNonNull:\r\n                        return {\r\n                            kind: FieldKind.Measure,\r\n                            type: ValueType.fromExtendedType(ExtendedType.Integer),\r\n                            format: undefined,\r\n                            idOnEntityKey: false,\r\n                            aggregate: field.entityAggr.aggregate\r\n                        };\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    export const enum SQExprKind {\r\n        Entity,\r\n        ColumnRef,\r\n        MeasureRef,\r\n        Aggregation,\r\n        PropertyVariationSource,\r\n        Hierarchy,\r\n        HierarchyLevel,\r\n        And,\r\n        Between,\r\n        In,\r\n        Or,\r\n        Contains,\r\n        Compare,\r\n        StartsWith,\r\n        Exists,\r\n        Not,\r\n        Constant,\r\n        DateSpan,\r\n        DateAdd,\r\n        Now,\r\n        AnyValue,\r\n        DefaultValue,\r\n        Arithmetic,\r\n        FillRule,\r\n        ResourcePackageItem,\r\n        ScopedEval,\r\n        Scope,\r\n    }\r\n\r\n    export interface SQExprMetadata {\r\n        kind: FieldKind;\r\n        type: ValueType;\r\n        format?: string;\r\n        idOnEntityKey?: boolean;\r\n        aggregate?: QueryAggregateFunction;\r\n        defaultAggregate?: ConceptualDefaultAggregate;\r\n    }\r\n\r\n    export const enum FieldKind {\r\n        /** Indicates the field references a column, which evaluates to a distinct set of values (e.g., Year, Name, SalesQuantity, etc.). */\r\n        Column,\r\n\r\n        /** Indicates the field references a measure, which evaluates to a single value (e.g., SalesYTD, Sum(Sales), etc.). */\r\n        Measure,\r\n    }\r\n\r\n    /** Note: Exported for testability */\r\n    export function defaultAggregateForDataType(type: ValueType): QueryAggregateFunction {\r\n        if (type.integer || type.numeric)\r\n            return QueryAggregateFunction.Sum;\r\n\r\n        return QueryAggregateFunction.Count;\r\n    }\r\n\r\n    /** Note: Exported for testability */\r\n    export function defaultAggregateToQueryAggregateFunction(aggregate: ConceptualDefaultAggregate): QueryAggregateFunction {\r\n        switch (aggregate) {\r\n            case ConceptualDefaultAggregate.Average:\r\n                return QueryAggregateFunction.Avg;\r\n            case ConceptualDefaultAggregate.Count:\r\n                return QueryAggregateFunction.CountNonNull;\r\n            case ConceptualDefaultAggregate.DistinctCount:\r\n                return QueryAggregateFunction.Count;\r\n            case ConceptualDefaultAggregate.Max:\r\n                return QueryAggregateFunction.Max;\r\n            case ConceptualDefaultAggregate.Min:\r\n                return QueryAggregateFunction.Min;\r\n            case ConceptualDefaultAggregate.Sum:\r\n                return QueryAggregateFunction.Sum;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n\r\n    export class SQEntityExpr extends SQExpr {\r\n        public schema: string;\r\n        public entity: string;\r\n        public variable: string;\r\n\r\n        constructor(schema: string, entity: string, variable?: string) {\r\n            debug.assertValue(entity, 'entity');\r\n\r\n            super(SQExprKind.Entity);\r\n            this.schema = schema;\r\n            this.entity = entity;\r\n            if (variable)\r\n                this.variable = variable;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitEntity(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQArithmeticExpr extends SQExpr {\r\n        public left: SQExpr;\r\n        public right: SQExpr;\r\n        public operator: ArithmeticOperatorKind;\r\n\r\n        constructor(left: SQExpr, right: SQExpr, operator: ArithmeticOperatorKind) {\r\n            debug.assertValue(left, 'left');\r\n            debug.assertValue(right, 'right');\r\n            debug.assertValue(operator, 'operator');\r\n\r\n            super(SQExprKind.Arithmetic);\r\n            this.left = left;\r\n            this.right = right;\r\n            this.operator = operator;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitArithmetic(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQScopedEvalExpr extends SQExpr {\r\n        public expression: SQExpr;\r\n        public scope: SQExpr[];\r\n\r\n        constructor(expression: SQExpr, scope: SQExpr[]) {\r\n            debug.assertValue(expression, 'expression');\r\n            debug.assertValue(scope, 'scope');\r\n\r\n            super(SQExprKind.ScopedEval);\r\n            this.expression = expression;\r\n            this.scope = scope;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitScopedEval(this, arg);\r\n        }\r\n    }\r\n\r\n    export abstract class SQPropRefExpr extends SQExpr {\r\n        public ref: string;\r\n        public source: SQExpr;\r\n\r\n        constructor(kind: SQExprKind, source: SQExpr, ref: string) {\r\n            debug.assertValue(kind, 'kind');\r\n            debug.assertValue(source, 'source');\r\n            debug.assertValue(ref, 'ref');\r\n\r\n            super(kind);\r\n            this.source = source;\r\n            this.ref = ref;\r\n        }\r\n    }\r\n\r\n    export class SQColumnRefExpr extends SQPropRefExpr {\r\n        constructor(source: SQExpr, ref: string) {\r\n            super(SQExprKind.ColumnRef, source, ref);\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitColumnRef(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQMeasureRefExpr extends SQPropRefExpr {\r\n        constructor(source: SQExpr, ref: string) {\r\n            super(SQExprKind.MeasureRef, source, ref);\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitMeasureRef(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQAggregationExpr extends SQExpr {\r\n        public arg: SQExpr;\r\n        public func: QueryAggregateFunction;\r\n\r\n        constructor(arg: SQExpr, func: QueryAggregateFunction) {\r\n            debug.assertValue(arg, 'arg');\r\n            debug.assertValue(func, 'func');\r\n\r\n            super(SQExprKind.Aggregation);\r\n            this.arg = arg;\r\n            this.func = func;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitAggr(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQPropertyVariationSourceExpr extends SQExpr {\r\n        public arg: SQExpr;\r\n        public name: string;\r\n        public property: string;\r\n\r\n        constructor(arg: SQExpr, name: string, property: string) {\r\n            debug.assertValue(arg, 'arg');\r\n            debug.assertValue(name, 'name');\r\n            debug.assertValue(property, 'property');\r\n\r\n            super(SQExprKind.PropertyVariationSource);\r\n            this.arg = arg;\r\n            this.name = name;\r\n            this.property = property;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitPropertyVariationSource(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQHierarchyExpr extends SQExpr {\r\n        public arg: SQExpr;\r\n        public hierarchy: string;\r\n\r\n        constructor(arg: SQExpr, hierarchy: string) {\r\n            debug.assertValue(arg, 'arg');\r\n            debug.assertValue(hierarchy, 'hierarchy');\r\n\r\n            super(SQExprKind.Hierarchy);\r\n            this.arg = arg;\r\n            this.hierarchy = hierarchy;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitHierarchy(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQHierarchyLevelExpr extends SQExpr {\r\n        public arg: SQExpr;\r\n        public level: string;\r\n\r\n        constructor(arg: SQExpr, level: string) {\r\n            debug.assertValue(arg, 'arg');\r\n            debug.assertValue(level, 'level');\r\n\r\n            super(SQExprKind.HierarchyLevel);\r\n            this.arg = arg;\r\n            this.level = level;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitHierarchyLevel(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQAndExpr extends SQExpr {\r\n        left: SQExpr;\r\n        right: SQExpr;\r\n\r\n        constructor(left: SQExpr, right: SQExpr) {\r\n            debug.assertValue(left, 'left');\r\n            debug.assertValue(right, 'right');\r\n\r\n            super(SQExprKind.And);\r\n            this.left = left;\r\n            this.right = right;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitAnd(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQBetweenExpr extends SQExpr {\r\n        arg: SQExpr;\r\n        lower: SQExpr;\r\n        upper: SQExpr;\r\n\r\n        constructor(arg: SQExpr, lower: SQExpr, upper: SQExpr) {\r\n            debug.assertValue(arg, 'arg');\r\n            debug.assertValue(lower, 'lower');\r\n            debug.assertValue(upper, 'upper');\r\n\r\n            super(SQExprKind.Between);\r\n            this.arg = arg;\r\n            this.lower = lower;\r\n            this.upper = upper;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitBetween(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQInExpr extends SQExpr {\r\n        args: SQExpr[];\r\n        values: SQExpr[][];\r\n\r\n        constructor(args: SQExpr[], values: SQExpr[][]) {\r\n            debug.assertValue(args, 'args');\r\n            debug.assertValue(values, 'values');\r\n\r\n            super(SQExprKind.In);\r\n            this.args = args;\r\n            this.values = values;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitIn(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQOrExpr extends SQExpr {\r\n        left: SQExpr;\r\n        right: SQExpr;\r\n\r\n        constructor(left: SQExpr, right: SQExpr) {\r\n            debug.assertValue(left, 'left');\r\n            debug.assertValue(right, 'right');\r\n\r\n            super(SQExprKind.Or);\r\n            this.left = left;\r\n            this.right = right;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitOr(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQCompareExpr extends SQExpr {\r\n        comparison: QueryComparisonKind;\r\n        left: SQExpr;\r\n        right: SQExpr;\r\n\r\n        constructor(comparison: QueryComparisonKind, left: SQExpr, right: SQExpr) {\r\n            debug.assertValue(comparison, 'kind');\r\n            debug.assertValue(left, 'left');\r\n            debug.assertValue(right, 'right');\r\n\r\n            super(SQExprKind.Compare);\r\n            this.comparison = comparison;\r\n            this.left = left;\r\n            this.right = right;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitCompare(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQContainsExpr extends SQExpr {\r\n        left: SQExpr;\r\n        right: SQExpr;\r\n\r\n        constructor(left: SQExpr, right: SQExpr) {\r\n            debug.assertValue(left, 'left');\r\n            debug.assertValue(right, 'right');\r\n\r\n            super(SQExprKind.Contains);\r\n            this.left = left;\r\n            this.right = right;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitContains(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQStartsWithExpr extends SQExpr {\r\n        left: SQExpr;\r\n        right: SQExpr;\r\n\r\n        constructor(left: SQExpr, right: SQExpr) {\r\n            debug.assertValue(left, 'left');\r\n            debug.assertValue(right, 'right');\r\n\r\n            super(SQExprKind.StartsWith);\r\n            this.left = left;\r\n            this.right = right;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitStartsWith(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQExistsExpr extends SQExpr {\r\n        arg: SQExpr;\r\n\r\n        constructor(arg: SQExpr) {\r\n            debug.assertValue(arg, 'arg');\r\n\r\n            super(SQExprKind.Exists);\r\n            this.arg = arg;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitExists(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQNotExpr extends SQExpr {\r\n        arg: SQExpr;\r\n\r\n        constructor(arg: SQExpr) {\r\n            debug.assertValue(arg, 'arg');\r\n\r\n            super(SQExprKind.Not);\r\n            this.arg = arg;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitNot(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQConstantExpr extends SQExpr implements ISQConstantExpr {\r\n        public type: ValueType;\r\n\r\n        /** The native JavaScript representation of the value. */\r\n        public value: any;\r\n\r\n        /** The string encoded, lossless representation of the value. */\r\n        public valueEncoded: string;\r\n\r\n        constructor(type: ValueType, value: any, valueEncoded: string) {\r\n            debug.assertValue(type, 'type');\r\n\r\n            super(SQExprKind.Constant);\r\n            this.type = type;\r\n            this.value = value;\r\n            this.valueEncoded = valueEncoded;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitConstant(this, arg);\r\n        }\r\n\r\n        public getMetadata(federatedSchema: FederatedConceptualSchema): SQExprMetadata {\r\n            debug.assertValue(federatedSchema, 'federatedSchema');\r\n\r\n            return {\r\n                // Returning Measure as the kind for a SQConstantExpr is slightly ambiguous allowing the return object to conform to SQEXprMetadata.\r\n                // A getType or similiar function in the future would be more appropriate. \r\n                kind: FieldKind.Measure,\r\n                type: this.type,\r\n            };\r\n        }\r\n    }\r\n\r\n    export class SQDateSpanExpr extends SQExpr {\r\n        public unit: TimeUnit;\r\n        public arg: SQExpr;\r\n\r\n        constructor(unit: TimeUnit, arg: SQExpr) {\r\n            debug.assertValue(unit, 'unit');\r\n            debug.assertValue(arg, 'arg');\r\n\r\n            super(SQExprKind.DateSpan);\r\n            this.unit = unit;\r\n            this.arg = arg;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitDateSpan(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQDateAddExpr extends SQExpr {\r\n        public unit: TimeUnit;\r\n        public amount: number;\r\n        public arg: SQExpr;\r\n\r\n        constructor(unit: TimeUnit, amount: number, arg: SQExpr) {\r\n            debug.assertValue(unit, 'unit');\r\n            debug.assertValue(amount, 'amount');\r\n            debug.assertValue(arg, 'arg');\r\n\r\n            super(SQExprKind.DateAdd);\r\n            this.unit = unit;\r\n            this.arg = arg;\r\n            this.amount = amount;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitDateAdd(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQNowExpr extends SQExpr {\r\n        constructor() {\r\n            super(SQExprKind.Now);\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitNow(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQDefaultValueExpr extends SQExpr {\r\n        constructor() {\r\n            super(SQExprKind.DefaultValue);\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitDefaultValue(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQAnyValueExpr extends SQExpr {\r\n        constructor() {\r\n            super(SQExprKind.AnyValue);\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitAnyValue(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQFillRuleExpr extends SQExpr {\r\n        public input: SQExpr;\r\n        public rule: FillRuleDefinition;\r\n\r\n        constructor(\r\n            input: SQExpr,\r\n            fillRule: FillRuleDefinition) {\r\n            debug.assertValue(input, 'input');\r\n            debug.assertValue(fillRule, 'fillRule');\r\n\r\n            super(SQExprKind.FillRule);\r\n            this.input = input;\r\n            this.rule = fillRule;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitFillRule(this, arg);\r\n        }\r\n    }\r\n\r\n    export class SQResourcePackageItemExpr extends SQExpr {\r\n        public packageName: string;\r\n        public packageType: number;\r\n        public itemName: string;\r\n\r\n        constructor(packageName: string, packageType: number, itemName: string) {\r\n            debug.assertValue(packageName, 'packageName');\r\n            debug.assertValue(itemName, 'itemName');\r\n\r\n            super(SQExprKind.ResourcePackageItem);\r\n            this.packageName = packageName;\r\n            this.packageType = packageType;\r\n            this.itemName = itemName;\r\n        }\r\n\r\n        public accept<T, TArg>(visitor: ISQExprVisitorWithArg<T, TArg>, arg?: TArg): T {\r\n            return visitor.visitResourcePackageItem(this, arg);\r\n        }\r\n    }\r\n\r\n    /** Provides utilities for creating & manipulating expressions. */\r\n    export module SQExprBuilder {\r\n        export function entity(schema: string, entity: string, variable?: string): SQEntityExpr {\r\n            return new SQEntityExpr(schema, entity, variable);\r\n        }\r\n\r\n        export function columnRef(source: SQExpr, prop: string): SQColumnRefExpr {\r\n            return new SQColumnRefExpr(source, prop);\r\n        }\r\n\r\n        export function measureRef(source: SQExpr, prop: string): SQMeasureRefExpr {\r\n            return new SQMeasureRefExpr(source, prop);\r\n        }\r\n\r\n        export function aggregate(source: SQExpr, aggregate: QueryAggregateFunction): SQAggregationExpr {\r\n            return new SQAggregationExpr(source, aggregate);\r\n        }\r\n\r\n        export function hierarchy(source: SQExpr, hierarchy: string): SQHierarchyExpr {\r\n            return new SQHierarchyExpr(source, hierarchy);\r\n        }\r\n\r\n        export function propertyVariationSource(source: SQExpr, name: string, property: string): SQPropertyVariationSourceExpr {\r\n            return new SQPropertyVariationSourceExpr(source, name, property);\r\n        }\r\n\r\n        export function hierarchyLevel(source: SQExpr, level: string): SQHierarchyLevelExpr {\r\n            return new SQHierarchyLevelExpr(source, level);\r\n        }\r\n\r\n        export function and(left: SQExpr, right: SQExpr): SQExpr {\r\n            if (!left)\r\n                return right;\r\n            if (!right)\r\n                return left;\r\n\r\n            return new SQAndExpr(left, right);\r\n        }\r\n\r\n        export function between(arg: SQExpr, lower: SQExpr, upper: SQExpr): SQBetweenExpr {\r\n            return new SQBetweenExpr(arg, lower, upper);\r\n        }\r\n\r\n        export function inExpr(args: SQExpr[], values: SQExpr[][]): SQInExpr {\r\n            return new SQInExpr(args, values);\r\n        }\r\n\r\n        export function or(left: SQExpr, right: SQExpr): SQExpr {\r\n            if (!left)\r\n                return right;\r\n            if (!right)\r\n                return left;\r\n            if (left instanceof SQInExpr && right instanceof SQInExpr) {\r\n                let inExpr = tryUseInExprs(<SQInExpr>left, <SQInExpr>right);\r\n                if (inExpr)\r\n                    return inExpr;\r\n            }\r\n\r\n            return new SQOrExpr(left, right);\r\n        }\r\n\r\n        function tryUseInExprs(left: SQInExpr, right: SQInExpr): SQInExpr {\r\n            if (!left.args || !right.args)\r\n                return;\r\n\r\n            let leftArgLen = left.args.length;\r\n            let rightArgLen = right.args.length;\r\n            if (leftArgLen !== rightArgLen)\r\n                return;\r\n\r\n            for (let i = 0; i < leftArgLen; ++i) {\r\n                if (!SQExpr.equals(left.args[i], right.args[i]))\r\n                    return;\r\n            }\r\n\r\n            let combinedValues = left.values.concat(right.values);\r\n            return SQExprBuilder.inExpr(left.args, combinedValues);\r\n        }\r\n\r\n        export function compare(kind: QueryComparisonKind, left: SQExpr, right: SQExpr): SQCompareExpr {\r\n            return new SQCompareExpr(kind, left, right);\r\n        }\r\n\r\n        export function contains(left: SQExpr, right: SQExpr): SQContainsExpr {\r\n            return new SQContainsExpr(left, right);\r\n        }\r\n\r\n        export function exists(arg: SQExpr): SQExistsExpr {\r\n            return new SQExistsExpr(arg);\r\n        }\r\n\r\n        export function equal(left: SQExpr, right: SQExpr): SQCompareExpr {\r\n            return compare(QueryComparisonKind.Equal, left, right);\r\n        }\r\n\r\n        export function not(arg: SQExpr): SQNotExpr {\r\n            return new SQNotExpr(arg);\r\n        }\r\n\r\n        export function startsWith(left: SQExpr, right: SQExpr): SQStartsWithExpr {\r\n            return new SQStartsWithExpr(left, right);\r\n        }\r\n\r\n        export function nullConstant(): SQConstantExpr {\r\n            return new SQConstantExpr(\r\n                ValueType.fromExtendedType(ExtendedType.Null),\r\n                null,\r\n                PrimitiveValueEncoding.nullEncoding());\r\n        }\r\n\r\n        export function now(): SQNowExpr {\r\n            return new SQNowExpr();\r\n        }\r\n\r\n        export function defaultValue(): SQDefaultValueExpr {\r\n            return new SQDefaultValueExpr();\r\n        }\r\n\r\n        export function anyValue(): SQAnyValueExpr {\r\n            return new SQAnyValueExpr();\r\n        }\r\n\r\n        export function boolean(value: boolean): SQConstantExpr {\r\n            return new SQConstantExpr(\r\n                ValueType.fromExtendedType(ExtendedType.Boolean),\r\n                value,\r\n                PrimitiveValueEncoding.boolean(value));\r\n        }\r\n\r\n        export function dateAdd(unit: TimeUnit, amount: number, arg: SQExpr): SQDateAddExpr {\r\n            return new SQDateAddExpr(unit, amount, arg);\r\n        }\r\n\r\n        export function dateTime(value: Date, valueEncoded?: string): SQConstantExpr {\r\n            if (valueEncoded === undefined)\r\n                valueEncoded = PrimitiveValueEncoding.dateTime(value);\r\n\r\n            return new SQConstantExpr(ValueType.fromExtendedType(ExtendedType.DateTime), value, valueEncoded);\r\n        }\r\n\r\n        export function dateSpan(unit: TimeUnit, arg: SQExpr): SQDateSpanExpr {\r\n            return new SQDateSpanExpr(unit, arg);\r\n        }\r\n\r\n        export function decimal(value: number, valueEncoded?: string): SQConstantExpr {\r\n            if (valueEncoded === undefined)\r\n                valueEncoded = PrimitiveValueEncoding.decimal(value);\r\n\r\n            return new SQConstantExpr(ValueType.fromExtendedType(ExtendedType.Decimal), value, valueEncoded);\r\n        }\r\n\r\n        export function double(value: number, valueEncoded?: string): SQConstantExpr {\r\n            if (valueEncoded === undefined)\r\n                valueEncoded = PrimitiveValueEncoding.double(value);\r\n\r\n            return new SQConstantExpr(ValueType.fromExtendedType(ExtendedType.Double), value, valueEncoded);\r\n        }\r\n\r\n        export function integer(value: number, valueEncoded?: string): SQConstantExpr {\r\n            if (valueEncoded === undefined)\r\n                valueEncoded = PrimitiveValueEncoding.integer(value);\r\n\r\n            return new SQConstantExpr(ValueType.fromExtendedType(ExtendedType.Integer), value, valueEncoded);\r\n        }\r\n\r\n        export function text(value: string, valueEncoded?: string): SQConstantExpr {\r\n            debug.assert(!valueEncoded || valueEncoded === PrimitiveValueEncoding.text(value), 'Incorrect encoded value specified.');\r\n\r\n            return new SQConstantExpr(\r\n                ValueType.fromExtendedType(ExtendedType.Text),\r\n                value,\r\n                valueEncoded || PrimitiveValueEncoding.text(value));\r\n        }\r\n\r\n        /** Returns an SQExpr that evaluates to the constant value. */\r\n        export function typedConstant(value: PrimitiveValue, type: ValueTypeDescriptor): SQConstantExpr {\r\n            if (value == null)\r\n                return nullConstant();\r\n\r\n            if (_.isBoolean(value)) {\r\n                return boolean(<boolean>value);\r\n            }\r\n\r\n            if (_.isString(value)) {\r\n                return text(<string>value);\r\n            }\r\n\r\n            if (_.isNumber(value)) {\r\n                if (type.integer && Double.isInteger(<number>value))\r\n                    return integer(<number>value);\r\n\r\n                return double(<number>value);\r\n            }\r\n\r\n            if (value instanceof Date) {\r\n                return dateTime(value);\r\n            }\r\n        }\r\n\r\n        export function arithmetic(left: SQExpr, right: SQExpr, operator: ArithmeticOperatorKind): SQArithmeticExpr {\r\n            return new SQArithmeticExpr(left, right, operator);\r\n        }\r\n\r\n        export function scopedEval(expression: SQExpr, scope: SQExpr[]): SQScopedEvalExpr {\r\n            return new SQScopedEvalExpr(expression, scope);\r\n        }\r\n\r\n        export function setAggregate(expr: SQExpr, aggregate: QueryAggregateFunction): SQExpr {\r\n            return SQExprChangeAggregateRewriter.rewrite(expr, aggregate);\r\n        }\r\n\r\n        export function removeAggregate(expr: SQExpr): SQExpr {\r\n            return SQExprRemoveAggregateRewriter.rewrite(expr);\r\n        }\r\n\r\n        export function removeEntityVariables(expr: SQExpr): SQExpr {\r\n            return SQExprRemoveEntityVariablesRewriter.rewrite(expr);\r\n        }\r\n\r\n        export function fillRule(expr: SQExpr, rule: FillRuleDefinition): SQFillRuleExpr {\r\n            debug.assertValue(expr, 'expr');\r\n            debug.assertValue(rule, 'rule');\r\n\r\n            return new SQFillRuleExpr(expr, rule);\r\n        }\r\n\r\n        export function resourcePackageItem(packageName: string, packageType: number, itemName: string): SQResourcePackageItemExpr {\r\n            return new SQResourcePackageItemExpr(packageName, packageType, itemName);\r\n        }\r\n    }\r\n\r\n    /** Provides utilities for obtaining information about expressions. */\r\n    export module SQExprInfo {\r\n        export function getAggregate(expr: SQExpr): QueryAggregateFunction {\r\n            return SQExprAggregateInfoVisitor.getAggregate(expr);\r\n        }\r\n    }\r\n\r\n    class SQExprEqualityVisitor implements ISQExprVisitorWithArg<boolean, SQExpr>, IFillRuleDefinitionVisitor<boolean, boolean> {\r\n        private static instance: SQExprEqualityVisitor = new SQExprEqualityVisitor(/* ignoreCase */ false);\r\n        private static ignoreCaseInstance: SQExprEqualityVisitor = new SQExprEqualityVisitor(true);\r\n        private ignoreCase: boolean;\r\n\r\n        public static run(x: SQExpr, y: SQExpr, ignoreCase?: boolean): boolean {\r\n            // Normalize falsy to null\r\n            x = x || null;\r\n            y = y || null;\r\n\r\n            if (x === y)\r\n                return true;\r\n\r\n            if (!x !== !y)\r\n                return false;\r\n\r\n            debug.assertValue(x, 'x');\r\n            debug.assertValue(y, 'y');\r\n            if (ignoreCase)\r\n                return x.accept(SQExprEqualityVisitor.ignoreCaseInstance, y);\r\n\r\n            return x.accept(SQExprEqualityVisitor.instance, y);\r\n        }\r\n\r\n        constructor(ignoreCase: boolean) {\r\n            this.ignoreCase = ignoreCase;\r\n        }\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr, comparand: SQColumnRefExpr): boolean {\r\n            return comparand instanceof SQColumnRefExpr &&\r\n                expr.ref === (<SQColumnRefExpr>comparand).ref &&\r\n                this.equals(expr.source, (<SQColumnRefExpr>comparand).source);\r\n        }\r\n\r\n        public visitMeasureRef(expr: SQMeasureRefExpr, comparand: SQMeasureRefExpr): boolean {\r\n            return comparand instanceof SQMeasureRefExpr &&\r\n                expr.ref === (<SQMeasureRefExpr>comparand).ref &&\r\n                this.equals(expr.source, (<SQMeasureRefExpr>comparand).source);\r\n        }\r\n\r\n        public visitAggr(expr: SQAggregationExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQAggregationExpr &&\r\n                expr.func === (<SQAggregationExpr>comparand).func &&\r\n                this.equals(expr.arg, (<SQAggregationExpr>comparand).arg);\r\n        }\r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr, comparand: SQHierarchyExpr): boolean {\r\n            return comparand instanceof SQHierarchyExpr &&\r\n                expr.hierarchy === comparand.hierarchy &&\r\n                this.equals(expr.arg, comparand.arg);\r\n        }\r\n\r\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr, comparand: SQHierarchyLevelExpr): boolean {\r\n            return comparand instanceof SQHierarchyLevelExpr &&\r\n                expr.level === comparand.level &&\r\n                this.equals(expr.arg, comparand.arg);\r\n        }\r\n\r\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr, comparand: SQPropertyVariationSourceExpr): boolean {\r\n            return comparand instanceof SQPropertyVariationSourceExpr &&\r\n                expr.name === comparand.name &&\r\n                expr.property === comparand.property &&\r\n                this.equals(expr.arg, comparand.arg);\r\n        }\r\n\r\n        public visitBetween(expr: SQBetweenExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQBetweenExpr &&\r\n                this.equals(expr.arg, (<SQBetweenExpr>comparand).arg) &&\r\n                this.equals(expr.lower, (<SQBetweenExpr>comparand).lower) &&\r\n                this.equals(expr.upper, (<SQBetweenExpr>comparand).upper);\r\n        }\r\n\r\n        public visitIn(expr: SQInExpr, comparand: SQExpr): boolean {\r\n            if (!(comparand instanceof SQInExpr) || !this.equalsAll(expr.args, (<SQInExpr>comparand).args))\r\n                return false;\r\n\r\n            let values = expr.values,\r\n                compareValues = (<SQInExpr>comparand).values;\r\n            if (values.length !== compareValues.length)\r\n                return false;\r\n\r\n            for (let i = 0, len = values.length; i < len; i++) {\r\n                if (!this.equalsAll(values[i], compareValues[i]))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        public visitEntity(expr: SQEntityExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQEntityExpr &&\r\n                expr.schema === (<SQEntityExpr>comparand).schema &&\r\n                expr.entity === (<SQEntityExpr>comparand).entity &&\r\n                this.optionalEqual(expr.variable, (<SQEntityExpr>comparand).variable);\r\n        }\r\n\r\n        public visitAnd(expr: SQAndExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQAndExpr &&\r\n                this.equals(expr.left, (<SQAndExpr>comparand).left) &&\r\n                this.equals(expr.right, (<SQAndExpr>comparand).right);\r\n        }\r\n\r\n        public visitOr(expr: SQOrExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQOrExpr &&\r\n                this.equals(expr.left, (<SQOrExpr>comparand).left) &&\r\n                this.equals(expr.right, (<SQOrExpr>comparand).right);\r\n        }\r\n\r\n        public visitCompare(expr: SQCompareExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQCompareExpr &&\r\n                expr.comparison === (<SQCompareExpr>comparand).comparison &&\r\n                this.equals(expr.left, (<SQCompareExpr>comparand).left) &&\r\n                this.equals(expr.right, (<SQCompareExpr>comparand).right);\r\n        }\r\n\r\n        public visitContains(expr: SQContainsExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQContainsExpr &&\r\n                this.equals(expr.left, (<SQContainsExpr>comparand).left) &&\r\n                this.equals(expr.right, (<SQContainsExpr>comparand).right);\r\n        }\r\n\r\n        public visitDateSpan(expr: SQDateSpanExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQDateSpanExpr &&\r\n                expr.unit === (<SQDateSpanExpr>comparand).unit &&\r\n                this.equals(expr.arg, (<SQDateSpanExpr>comparand).arg);\r\n        }\r\n\r\n        public visitDateAdd(expr: SQDateAddExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQDateAddExpr &&\r\n                expr.unit === (<SQDateAddExpr>comparand).unit &&\r\n                expr.amount === (<SQDateAddExpr>comparand).amount &&\r\n                this.equals(expr.arg, (<SQDateAddExpr>comparand).arg);\r\n        }\r\n\r\n        public visitExists(expr: SQExistsExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQExistsExpr &&\r\n                this.equals(expr.arg, (<SQExistsExpr>comparand).arg);\r\n        }\r\n\r\n        public visitNot(expr: SQNotExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQNotExpr &&\r\n                this.equals(expr.arg, (<SQNotExpr>comparand).arg);\r\n        }\r\n\r\n        public visitNow(expr: SQNowExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQNowExpr;\r\n        }\r\n\r\n        public visitDefaultValue(expr: SQDefaultValueExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQDefaultValueExpr;\r\n        }\r\n\r\n        public visitAnyValue(expr: SQAnyValueExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQAnyValueExpr;\r\n        }\r\n\r\n        public visitResourcePackageItem(expr: SQResourcePackageItemExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQResourcePackageItemExpr &&\r\n                expr.packageName === comparand.packageName &&\r\n                expr.packageType === comparand.packageType &&\r\n                expr.itemName === comparand.itemName;\r\n        }\r\n\r\n        public visitStartsWith(expr: SQStartsWithExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQStartsWithExpr &&\r\n                this.equals(expr.left, (<SQStartsWithExpr>comparand).left) &&\r\n                this.equals(expr.right, (<SQStartsWithExpr>comparand).right);\r\n        }\r\n\r\n        public visitConstant(expr: SQConstantExpr, comparand: SQExpr): boolean {\r\n            if (comparand instanceof SQConstantExpr && expr.type === (<SQConstantExpr>comparand).type)\r\n                return expr.type.text && this.ignoreCase ?\r\n                    StringExtensions.equalIgnoreCase(expr.valueEncoded, (<SQConstantExpr>comparand).valueEncoded) :\r\n                    expr.valueEncoded === (<SQConstantExpr>comparand).valueEncoded;\r\n\r\n            return false;\r\n        }\r\n\r\n        public visitFillRule(expr: SQFillRuleExpr, comparand: SQExpr): boolean {\r\n            if (comparand instanceof SQFillRuleExpr && this.equals(expr.input, comparand.input)) {\r\n                let leftRule = expr.rule,\r\n                    rightRule = comparand.rule;\r\n\r\n                if (leftRule === rightRule)\r\n                    return true;\r\n\r\n                let leftLinearGradient2 = leftRule.linearGradient2,\r\n                    rightLinearGradient2 = rightRule.linearGradient2;\r\n                if (leftLinearGradient2 && rightLinearGradient2) {\r\n                    return this.visitLinearGradient2(leftLinearGradient2, rightLinearGradient2);\r\n                }\r\n\r\n                let leftLinearGradient3 = leftRule.linearGradient3,\r\n                    rightLinearGradient3 = rightRule.linearGradient3;\r\n                if (leftLinearGradient3 && rightLinearGradient3) {\r\n                    return this.visitLinearGradient3(leftLinearGradient3, rightLinearGradient3);\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        public visitLinearGradient2(left2: LinearGradient2Definition, right2: LinearGradient2Definition): boolean {\r\n            debug.assertValue(left2, 'left2');\r\n            debug.assertValue(right2, 'right2');\r\n\r\n            return this.equalsFillRuleStop(left2.min, right2.min) &&\r\n                this.equalsFillRuleStop(left2.max, right2.max);\r\n        }\r\n\r\n        public visitLinearGradient3(left3: LinearGradient3Definition, right3: LinearGradient3Definition): boolean {\r\n            debug.assertValue(left3, 'left3');\r\n            debug.assertValue(right3, 'right3');\r\n\r\n            return this.equalsFillRuleStop(left3.min, right3.min) &&\r\n                this.equalsFillRuleStop(left3.mid, right3.mid) &&\r\n                this.equalsFillRuleStop(left3.max, right3.max);\r\n        }\r\n\r\n        private equalsFillRuleStop(stop1: RuleColorStopDefinition, stop2: RuleColorStopDefinition): boolean {\r\n            debug.assertValue(stop1, 'stop1');\r\n            debug.assertValue(stop2, 'stop2');\r\n\r\n            if (!this.equals(stop1.color, stop2.color))\r\n                return false;\r\n\r\n            if (!stop1.value)\r\n                return stop1.value === stop2.value;\r\n\r\n            return this.equals(stop1.value, stop2.value);\r\n        }\r\n\r\n        public visitArithmetic(expr: SQArithmeticExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQArithmeticExpr &&\r\n                expr.operator === (<SQArithmeticExpr>comparand).operator &&\r\n                this.equals(expr.left, (<SQArithmeticExpr>comparand).left) &&\r\n                this.equals(expr.right, (<SQArithmeticExpr>comparand).right);\r\n        }\r\n\r\n        public visitScopedEval(expr: SQScopedEvalExpr, comparand: SQExpr): boolean {\r\n            return comparand instanceof SQScopedEvalExpr &&\r\n                this.equals(expr.expression, comparand.expression) &&\r\n                this.equalsAll(expr.scope, comparand.scope);\r\n        }\r\n\r\n        private optionalEqual(x: string, y: string) {\r\n            // Only check equality if both values are specified.\r\n            if (x && y)\r\n                return x === y;\r\n\r\n            return true;\r\n        }\r\n\r\n        private equals(x: SQExpr, y: SQExpr): boolean {\r\n            return x.accept(this, y);\r\n        }\r\n\r\n        private equalsAll(x: SQExpr[], y: SQExpr[]): boolean {\r\n            let len = x.length;\r\n            if (len !== y.length)\r\n                return false;\r\n\r\n            for (let i = 0; i < len; i++) {\r\n                if (!this.equals(x[i], y[i]))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /** Rewrites a root-level expression. */\r\n    class SQExprRootRewriter extends DefaultSQExprVisitor<SQExpr> {\r\n        public visitDefault(expr: SQExpr): SQExpr {\r\n            return expr;\r\n        }\r\n    }\r\n\r\n    export const enum SQExprValidationError {\r\n        invalidAggregateFunction,\r\n        invalidSchemaReference,\r\n        invalidEntityReference,\r\n        invalidColumnReference,\r\n        invalidMeasureReference,\r\n        invalidHierarchyReference,\r\n        invalidHierarchyLevelReference,\r\n        invalidLeftOperandType,\r\n        invalidRightOperandType,\r\n        invalidValueType,\r\n    }\r\n\r\n    export class SQExprValidationVisitor extends SQExprRewriter {\r\n        public errors: SQExprValidationError[];\r\n        private schema: FederatedConceptualSchema;\r\n        private aggrUtils: ISQAggregationOperations;\r\n\r\n        constructor(schema: FederatedConceptualSchema, aggrUtils: ISQAggregationOperations, errors?: SQExprValidationError[]) {\r\n            debug.assertValue(schema, 'schema');\r\n            debug.assertValue(aggrUtils, 'aggrUtils');\r\n\r\n            super();\r\n            this.schema = schema;\r\n            this.aggrUtils = aggrUtils;\r\n            if (errors)\r\n                this.errors = errors;\r\n        }\r\n\r\n        public visitIn(expr: SQInExpr): SQExpr {\r\n            let inExpr = <SQInExpr>super.visitIn(expr);\r\n            let args = inExpr.args;\r\n            let values = inExpr.values;\r\n            for (let valueTuple of values) {\r\n                debug.assert(valueTuple.length === args.length, 'args and value tuple are not the same length');\r\n                for (let i = 0, len = valueTuple.length; i < len; ++i)\r\n                    this.validateCompatibleType(args[i], valueTuple[i]);\r\n            }\r\n\r\n            return inExpr;\r\n        }\r\n\r\n        public visitCompare(expr: SQCompareExpr): SQExpr {\r\n            let compareExpr = <SQCompareExpr>super.visitCompare(expr);\r\n            this.validateCompatibleType(compareExpr.left, compareExpr.right);\r\n\r\n            return compareExpr;\r\n        }\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr): SQExpr {\r\n            let fieldExpr = SQExprConverter.asFieldPattern(expr);\r\n            if (fieldExpr) {\r\n                let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\r\n                let entity = this.validateEntity(fieldExprItem.schema, fieldExprItem.entity);\r\n                if (entity) {\r\n                    let prop = entity.properties.withName(fieldExpr.column.name);\r\n                    if (!prop ||\r\n                        prop.kind !== ConceptualPropertyKind.Column ||\r\n                        !this.isQueryable(fieldExpr))\r\n                        this.register(SQExprValidationError.invalidColumnReference);\r\n                }\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        public visitMeasureRef(expr: SQMeasureRefExpr): SQExpr {\r\n            let fieldExpr = SQExprConverter.asFieldPattern(expr);\r\n            if (fieldExpr) {\r\n                let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\r\n                let entity = this.validateEntity(fieldExprItem.schema, fieldExprItem.entity);\r\n                if (entity) {\r\n                    let prop = entity.properties.withName(fieldExpr.measure.name);\r\n                    if (!prop ||\r\n                        prop.kind !== ConceptualPropertyKind.Measure ||\r\n                        !this.isQueryable(fieldExpr))\r\n                        this.register(SQExprValidationError.invalidMeasureReference);\r\n                }\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        public visitAggr(expr: SQAggregationExpr): SQExpr {\r\n            let aggregateExpr = <SQAggregationExpr>super.visitAggr(expr);\r\n\r\n            let columnRefExpr = SQExprColumnRefInfoVisitor.getColumnRefSQExpr(this.schema, aggregateExpr.arg);\r\n            if (columnRefExpr) {\r\n                if (!this.aggrUtils.isSupportedAggregate(expr, this.schema, expr.func, /*targetTypes*/null))\r\n                    this.register(SQExprValidationError.invalidAggregateFunction);\r\n            }\r\n\r\n            return aggregateExpr;\r\n        }\r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr): SQExpr {\r\n            let fieldExpr = SQExprConverter.asFieldPattern(expr);\r\n            if (fieldExpr) {\r\n                let fieldExprItem: FieldExprHierarchyPattern = <FieldExprHierarchyPattern>fieldExpr.hierarchy;\r\n                if (fieldExprItem) {\r\n                    this.validateHierarchy(fieldExprItem.schema, fieldExprItem.entity, fieldExprItem.name);\r\n                } else {\r\n                    this.register(SQExprValidationError.invalidHierarchyReference);\r\n                }\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr): SQExpr {\r\n            let fieldExpr = SQExprConverter.asFieldPattern(expr);\r\n            if (fieldExpr) {\r\n                let hierarchyLevelFieldExprItem: FieldExprHierarchyLevelPattern = <FieldExprHierarchyLevelPattern>fieldExpr.hierarchyLevel;\r\n                if (hierarchyLevelFieldExprItem) {\r\n                    this.validateHierarchyLevel(hierarchyLevelFieldExprItem.schema, hierarchyLevelFieldExprItem.entity, hierarchyLevelFieldExprItem.name, hierarchyLevelFieldExprItem.level);\r\n                } else if (!fieldExpr.columnHierarchyLevelVariation) {\r\n                    this.register(SQExprValidationError.invalidHierarchyLevelReference);\r\n                }\r\n            }\r\n            return expr;\r\n        }\r\n\r\n        public visitEntity(expr: SQEntityExpr): SQExpr {\r\n            this.validateEntity(expr.schema, expr.entity);\r\n            return expr;\r\n        }\r\n\r\n        public visitContains(expr: SQContainsExpr): SQExpr {\r\n            this.validateOperandsAndTypeForStartOrContains(expr.left, expr.right);\r\n            return expr;\r\n        }\r\n\r\n        public visitStartsWith(expr: SQContainsExpr): SQExpr {\r\n            this.validateOperandsAndTypeForStartOrContains(expr.left, expr.right);\r\n            return expr;\r\n        }\r\n\r\n        public visitArithmetic(expr: SQArithmeticExpr): SQExpr {\r\n            this.validateArithmeticTypes(expr.left, expr.right);\r\n            return expr;\r\n        }\r\n\r\n        public visitScopedEval(expr: SQScopedEvalExpr): SQExpr {\r\n            // No validation necessary\r\n            return expr;\r\n        }\r\n\r\n        private validateOperandsAndTypeForStartOrContains(left: SQExpr, right: SQExpr): void {\r\n            if (left instanceof SQColumnRefExpr) {\r\n                this.visitColumnRef(<SQColumnRefExpr>left);\r\n            } else if (left instanceof SQHierarchyLevelExpr) {\r\n                this.visitHierarchyLevel(<SQHierarchyLevelExpr>left);\r\n            } else {\r\n                this.register(SQExprValidationError.invalidLeftOperandType);\r\n            }\r\n\r\n            if (!(right instanceof SQConstantExpr) || !(<SQConstantExpr>right).type.text)\r\n                this.register(SQExprValidationError.invalidRightOperandType);\r\n            else\r\n                this.validateCompatibleType(left, right);\r\n        }\r\n\r\n        private validateArithmeticTypes(left: SQExpr, right: SQExpr): void {\r\n            if (!SQExprUtils.supportsArithmetic(left, this.schema))\r\n                this.register(SQExprValidationError.invalidLeftOperandType);\r\n            if (!SQExprUtils.supportsArithmetic(right, this.schema))\r\n                this.register(SQExprValidationError.invalidRightOperandType);\r\n        }\r\n\r\n        private validateCompatibleType(left: SQExpr, right: SQExpr): void {\r\n            let leftMetadata = left.getMetadata(this.schema),\r\n                leftType = leftMetadata && leftMetadata.type,\r\n                rightMetadata = right.getMetadata(this.schema),\r\n                rightType = rightMetadata && rightMetadata.type;\r\n\r\n            if (leftType && rightType && !leftType.isCompatibleFrom(rightType))\r\n                this.register(SQExprValidationError.invalidValueType);\r\n        }\r\n\r\n        private validateEntity(schemaName: string, entityName: string): ConceptualEntity {\r\n            let schema = this.schema.schema(schemaName);\r\n            if (schema) {\r\n                let entity = schema.entities.withName(entityName);\r\n                if (entity)\r\n                    return entity;\r\n\r\n                this.register(SQExprValidationError.invalidEntityReference);\r\n            }\r\n            else {\r\n                this.register(SQExprValidationError.invalidSchemaReference);\r\n            }\r\n        }\r\n\r\n        private validateHierarchy(schemaName: string, entityName: string, hierarchyName: string): ConceptualHierarchy {\r\n            let entity = this.validateEntity(schemaName, entityName);\r\n            if (entity) {\r\n                let hierarchy = entity.hierarchies.withName(hierarchyName);\r\n                if (hierarchy)\r\n                    return hierarchy;\r\n\r\n                this.register(SQExprValidationError.invalidHierarchyReference);\r\n            }\r\n        }\r\n\r\n        private validateHierarchyLevel(schemaName: string, entityName: string, hierarchyName: string, levelName: string): ConceptualHierarchyLevel {\r\n            let hierarchy = this.validateHierarchy(schemaName, entityName, hierarchyName);\r\n            if (hierarchy) {\r\n                let hierarchyLevel = hierarchy.levels.withName(levelName);\r\n                if (hierarchyLevel)\r\n                    return hierarchyLevel;\r\n\r\n                this.register(SQExprValidationError.invalidHierarchyLevelReference);\r\n            }\r\n        }\r\n\r\n        private register(error: SQExprValidationError) {\r\n            if (!this.errors)\r\n                this.errors = [];\r\n            this.errors.push(error);\r\n        }\r\n\r\n        private isQueryable(fieldExpr: FieldExprPattern): boolean {\r\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(fieldExpr);\r\n            if (fieldExpr.hierarchyLevel || fieldExpr.hierarchyLevelAggr) {\r\n                let hierarchyLevelConceptualProperty = SQHierarchyExprUtils.getConceptualHierarchyLevelFromExpr(this.schema, fieldExpr);\r\n                return hierarchyLevelConceptualProperty && hierarchyLevelConceptualProperty.column.queryable !== ConceptualQueryableState.Error;\r\n            }\r\n\r\n            return this.schema.schema(fieldExprItem.schema).findProperty(fieldExprItem.entity, FieldExprPattern.getPropertyName(fieldExpr)).queryable !== ConceptualQueryableState.Error;\r\n        }\r\n    }\r\n\r\n    /** Returns an expression's aggregate function, or undefined if it doesn't have one. */\r\n    class SQExprAggregateInfoVisitor extends DefaultSQExprVisitor<QueryAggregateFunction> {\r\n        public visitAggr(expr: SQAggregationExpr): QueryAggregateFunction {\r\n            return expr.func;\r\n        }\r\n\r\n        public visitDefault(expr: SQExpr): QueryAggregateFunction {\r\n            return;\r\n        }\r\n\r\n        public static getAggregate(expr: SQExpr): QueryAggregateFunction {\r\n            let visitor = new SQExprAggregateInfoVisitor();\r\n            return expr.accept(visitor);\r\n        }\r\n    }\r\n\r\n    /** Returns a SQExprColumnRef expression or undefined.*/\r\n    class SQExprColumnRefInfoVisitor extends DefaultSQExprVisitor<SQColumnRefExpr> {\r\n        private schema: FederatedConceptualSchema;\r\n\r\n        constructor(schema: FederatedConceptualSchema) {\r\n            super();\r\n            this.schema = schema;\r\n        }\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr): SQColumnRefExpr {\r\n            return expr;\r\n        }\r\n\r\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr): SQColumnRefExpr {\r\n            let ref: string = expr.level;\r\n            let hierarchy = <SQHierarchyExpr>(expr.arg);\r\n            let sourceExpr: SQColumnRefExpr = hierarchy.accept(this);\r\n\r\n            if (hierarchy && hierarchy.arg instanceof SQPropertyVariationSourceExpr) {\r\n                let propertyVariationSource = <SQPropertyVariationSourceExpr>hierarchy.arg;\r\n                let targetEntity = sourceExpr.getTargetEntityForVariation(this.schema, propertyVariationSource.name);\r\n\r\n                if (sourceExpr && targetEntity) {\r\n                    let schemaName = (<SQEntityExpr>(sourceExpr.source)).schema;\r\n                    let targetEntityExpr = SQExprBuilder.entity(schemaName, targetEntity);\r\n                    let schemaHierarchy = this.schema.schema(schemaName).findHierarchy(targetEntity, hierarchy.hierarchy);\r\n\r\n                    if (schemaHierarchy) {\r\n                        for (let level of schemaHierarchy.levels)\r\n                            if (level.name === ref)\r\n                                return new SQColumnRefExpr(targetEntityExpr, level.column.name);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                let entityExpr = <SQEntityExpr>(hierarchy.arg);\r\n                let hierarchyLevelRef = SQHierarchyExprUtils.getConceptualHierarchyLevel(this.schema,\r\n                    entityExpr.schema,\r\n                    entityExpr.entity,\r\n                    hierarchy.hierarchy,\r\n                    expr.level);\r\n\r\n                if (hierarchyLevelRef)\r\n                    return new SQColumnRefExpr(hierarchy.arg, hierarchyLevelRef.column.name);\r\n            }\r\n        }\r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr): SQColumnRefExpr {\r\n            return expr.arg.accept(this);\r\n        }\r\n\r\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr): SQColumnRefExpr {\r\n            let propertyName = expr.property;\r\n            return new SQColumnRefExpr(expr.arg, propertyName);\r\n        }\r\n\r\n        public visitAggr(expr: SQAggregationExpr): SQColumnRefExpr {\r\n            return expr.arg.accept(this);\r\n        }\r\n\r\n        public visitDefault(expr: SQExpr): SQColumnRefExpr {\r\n            return;\r\n        }\r\n\r\n        public static getColumnRefSQExpr(schema: FederatedConceptualSchema, expr: SQExpr): SQColumnRefExpr {\r\n            let visitor = new SQExprColumnRefInfoVisitor(schema);\r\n            return expr.accept(visitor);\r\n        }\r\n    }\r\n\r\n    /** Returns a SQEntityExpr expression or undefined.*/\r\n    class SQEntityExprInfoVisitor extends DefaultSQExprVisitor<SQEntityExpr> {\r\n        private schema: FederatedConceptualSchema;\r\n\r\n        constructor(schema: FederatedConceptualSchema) {\r\n            super();\r\n            this.schema = schema;\r\n        }\r\n\r\n        public visitEntity(expr: SQEntityExpr): SQEntityExpr {\r\n            return expr;\r\n        }\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr): SQEntityExpr {\r\n            return SQEntityExprInfoVisitor.getEntity(expr);\r\n        }\r\n\r\n        public visitHierarchyLevel(expr: SQHierarchyLevelExpr): SQEntityExpr {\r\n            let columnRef = SQEntityExprInfoVisitor.getColumnRefSQExpr(this.schema, expr);\r\n            return SQEntityExprInfoVisitor.getEntity(columnRef);\r\n        }\r\n\r\n        public visitHierarchy(expr: SQHierarchyExpr): SQEntityExpr {\r\n            return expr.arg.accept(this);\r\n        }\r\n\r\n        public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr): SQEntityExpr {\r\n            let columnRef = SQEntityExprInfoVisitor.getColumnRefSQExpr(this.schema, expr);\r\n            return SQEntityExprInfoVisitor.getEntity(columnRef);\r\n        }\r\n\r\n        public visitAggr(expr: SQAggregationExpr): SQEntityExpr {\r\n            let columnRef = SQEntityExprInfoVisitor.getColumnRefSQExpr(this.schema, expr);\r\n            return SQEntityExprInfoVisitor.getEntity(columnRef);\r\n        }\r\n\r\n        public visitMeasureRef(expr: SQMeasureRefExpr): SQEntityExpr {\r\n            return expr.source.accept(this);\r\n        }\r\n\r\n        public static getColumnRefSQExpr(schema: FederatedConceptualSchema, expr: SQExpr): SQColumnRefExpr {\r\n            let visitor = new SQExprColumnRefInfoVisitor(schema);\r\n            return expr.accept(visitor);\r\n        }\r\n\r\n        public static getEntity(columnRef: SQColumnRefExpr): SQEntityExpr {\r\n            let field = SQExprConverter.asFieldPattern(columnRef);\r\n            let column = field.column;\r\n            return SQExprBuilder.entity(column.schema, column.entity, column.entityVar);\r\n        }\r\n\r\n        public static getEntityExpr(schema: FederatedConceptualSchema, expr: SQExpr): SQEntityExpr {\r\n            let visitor = new SQEntityExprInfoVisitor(schema);\r\n            return expr.accept(visitor);\r\n        }\r\n    }\r\n\r\n    class SQExprChangeAggregateRewriter extends SQExprRootRewriter {\r\n        private func: QueryAggregateFunction;\r\n\r\n        constructor(func: QueryAggregateFunction) {\r\n            debug.assertValue(func, 'func');\r\n\r\n            super();\r\n            this.func = func;\r\n        }\r\n\r\n        public visitAggr(expr: SQAggregationExpr): SQExpr {\r\n            if (expr.func === this.func)\r\n                return expr;\r\n\r\n            return new SQAggregationExpr(expr.arg, this.func);\r\n        }\r\n\r\n        public visitColumnRef(expr: SQColumnRefExpr): SQExpr {\r\n            return new SQAggregationExpr(expr, this.func);\r\n        }\r\n\r\n        public static rewrite(expr: SQExpr, func: QueryAggregateFunction): SQExpr {\r\n            debug.assertValue(expr, 'expr');\r\n            debug.assertValue(func, 'func');\r\n\r\n            let rewriter = new SQExprChangeAggregateRewriter(func);\r\n            return expr.accept(rewriter);\r\n        }\r\n    }\r\n\r\n    class SQExprRemoveAggregateRewriter extends SQExprRootRewriter {\r\n        private static instance: SQExprRemoveAggregateRewriter = new SQExprRemoveAggregateRewriter();\r\n\r\n        public visitAggr(expr: SQAggregationExpr): SQExpr {\r\n            return expr.arg;\r\n        }\r\n\r\n        public static rewrite(expr: SQExpr): SQExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.accept(SQExprRemoveAggregateRewriter.instance);\r\n        }\r\n    }\r\n\r\n    class SQExprRemoveEntityVariablesRewriter extends SQExprRewriter {\r\n        private static instance: SQExprRemoveEntityVariablesRewriter = new SQExprRemoveEntityVariablesRewriter();\r\n\r\n        public visitEntity(expr: SQEntityExpr): SQExpr {\r\n            if (expr.variable)\r\n                return SQExprBuilder.entity(expr.schema, expr.entity);\r\n\r\n            return expr;\r\n        }\r\n\r\n        public static rewrite(expr: SQExpr): SQExpr {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.accept(SQExprRemoveEntityVariablesRewriter.instance);\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import ArrayExtensions = jsCommon.ArrayExtensions;\r\n    import ArrayNamedItems = jsCommon.ArrayNamedItems;\r\n    import ConceptualEntity = powerbi.data.ConceptualEntity;\r\n    import ConceptualMultiplicity = powerbi.data.ConceptualMultiplicity;\r\n    import SQEntityExpr = powerbi.data.SQEntityExpr;\r\n    import StringExtensions = jsCommon.StringExtensions;\r\n\r\n    export module SQExprUtils {\r\n        export function supportsArithmetic(expr: SQExpr, schema: FederatedConceptualSchema): boolean {\r\n            let metadata = expr.getMetadata(schema),\r\n                type = metadata && metadata.type;\r\n\r\n            if (!metadata || !type) {\r\n                return false;\r\n            }\r\n            \r\n            return type.numeric || type.dateTime || type.duration;\r\n        }\r\n\r\n        export function indexOfExpr(items: SQExpr[], searchElement: SQExpr): number {\r\n            debug.assertValue(items, 'items');\r\n            debug.assertValue(searchElement, 'searchElement');\r\n\r\n            for (let i = 0, len = items.length; i < len; i++) {\r\n                if (SQExpr.equals(items[i], searchElement))\r\n                    return i;\r\n            }\r\n            return -1;\r\n        }\r\n\r\n        export function sequenceEqual(x: SQExpr[], y: SQExpr[]): boolean {\r\n            debug.assertValue(x, 'x');\r\n            debug.assertValue(y, 'y');\r\n\r\n            let len = x.length;\r\n            if (len !== y.length)\r\n                return false;\r\n\r\n            for (let i = 0; i < len; i++) {\r\n                if (!SQExpr.equals(x[i], y[i]))\r\n                    return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n        \r\n        export function uniqueName(namedItems: NamedSQExpr[], expr: SQExpr, exprDefaultName?: string): string {\r\n            debug.assertValue(namedItems, 'namedItems');\r\n\r\n            // Determine all names\r\n            let names: { [name: string]: boolean } = {};\r\n            for (let i = 0, len = namedItems.length; i < len; i++)\r\n                names[namedItems[i].name] = true;\r\n\r\n            return StringExtensions.findUniqueName(names, exprDefaultName || defaultName(expr));\r\n        }\r\n\r\n        /** Generates a default expression name  */\r\n        export function defaultName(expr: SQExpr, fallback: string = 'select'): string {\r\n            if (!expr)\r\n                return fallback;\r\n\r\n            return expr.accept(SQExprDefaultNameGenerator.instance, fallback);\r\n        }\r\n\r\n        /** Gets a value indicating whether the expr is a model measure or an aggregate. */\r\n        export function isMeasure(expr: SQExpr): boolean {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.accept(IsMeasureVisitor.instance);\r\n        }\r\n\r\n        /** Gets a value indicating whether the expr is an AnyValue or equals comparison to AnyValue*/\r\n        export function isAnyValue(expr: SQExpr): boolean {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.accept(IsAnyValueVisitor.instance);\r\n        }\r\n\r\n        /** Gets a value indicating whether the expr is a DefaultValue or equals comparison to DefaultValue*/\r\n        export function isDefaultValue(expr: SQExpr): boolean {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            return expr.accept(IsDefaultValueVisitor.instance);\r\n        }\r\n\r\n        export function discourageAggregation(expr: SQExpr, schema: FederatedConceptualSchema): boolean {\r\n            let capabilities = getSchemaCapabilities(expr, schema);\r\n            return capabilities && capabilities.discourageQueryAggregateUsage;\r\n        }\r\n\r\n        export function getAggregateBehavior(expr: SQExpr, schema: FederatedConceptualSchema): ConceptualAggregateBehavior {\r\n            debug.assertValue(expr, 'expr');\r\n            debug.assertValue(schema, 'schema');\r\n\r\n            let column = getConceptualColumn(expr, schema);\r\n            if (column)\r\n                return column.aggregateBehavior;\r\n        }\r\n\r\n        export function getSchemaCapabilities(expr: SQExpr, schema: FederatedConceptualSchema): ConceptualCapabilities {\r\n            debug.assertValue(expr, 'expr');\r\n            debug.assertValue(schema, 'schema');\r\n\r\n            let field = SQExprConverter.asFieldPattern(expr);\r\n            if (!field)\r\n                return;\r\n\r\n            let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(field);\r\n            let conceptualSchema = schema.schema(fieldExprItem.schema);\r\n            if (conceptualSchema)\r\n                return conceptualSchema.capabilities;\r\n        }\r\n\r\n        export function getKpiMetadata(expr: SQExpr, schema: FederatedConceptualSchema): DataViewKpiColumnMetadata {\r\n            let kpiStatusProperty = getKpiStatusProperty(expr, schema);\r\n            if (kpiStatusProperty)\r\n                return kpiStatusProperty.kpiValue.measure.kpi.statusMetadata;\r\n\r\n            let kpiTrendProperty = getKpiTrendProperty(expr, schema);\r\n            if (kpiTrendProperty)\r\n                return kpiTrendProperty.kpiValue.measure.kpi.trendMetadata;\r\n        }\r\n\r\n        export function getConceptualEntity(entityExpr: SQEntityExpr, schema: FederatedConceptualSchema): ConceptualEntity {\r\n            debug.assertValue(entityExpr, 'entityExpr');\r\n\r\n            let conceptualEntity = schema\r\n                .schema(entityExpr.schema)\r\n                .entities\r\n                .withName(entityExpr.entity);\r\n            return conceptualEntity;\r\n        }\r\n\r\n        function getKpiStatusProperty(expr: SQExpr, schema: FederatedConceptualSchema): ConceptualProperty {\r\n            let property = expr.getConceptualProperty(schema);\r\n            if (!property)\r\n                return;\r\n\r\n            let kpiValue = property.kpiValue;\r\n            if (kpiValue && kpiValue.measure.kpi.status === property)\r\n                return property;\r\n        }\r\n\r\n        function getKpiTrendProperty(expr: SQExpr, schema: FederatedConceptualSchema): ConceptualProperty {\r\n            let property = expr.getConceptualProperty(schema);\r\n            if (!property)\r\n                return;\r\n\r\n            let kpiValue = property.kpiValue;\r\n            if (kpiValue && kpiValue.measure.kpi.trend === property)\r\n                return property;\r\n        }\r\n\r\n        export function getDefaultValue(fieldSQExpr: SQExpr, schema: FederatedConceptualSchema): SQConstantExpr {\r\n            let column = getConceptualColumn(fieldSQExpr, schema);\r\n            if (column)\r\n                return column.defaultValue;\r\n        }\r\n\r\n        function getConceptualColumn(fieldSQExpr: SQExpr, schema: FederatedConceptualSchema): ConceptualColumn {\r\n            if (!fieldSQExpr || !schema)\r\n                return;\r\n\r\n            let sqField = SQExprConverter.asFieldPattern(fieldSQExpr);\r\n            if (!sqField)\r\n                return;\r\n\r\n            let column: FieldExprPropertyPattern = sqField.column;\r\n\r\n            if (column) {\r\n                if (schema.schema(column.schema) && sqField.column.name) {\r\n                    let property = schema.schema(column.schema).findProperty(column.entity, sqField.column.name);\r\n\r\n                    if (property)\r\n                        return property.column;\r\n                }\r\n            }\r\n            else {\r\n                let hierarchyLevelField: FieldExprHierarchyLevelPattern = sqField.hierarchyLevel;\r\n                if (hierarchyLevelField) {\r\n                    let fieldExprItem = FieldExprPattern.toFieldExprEntityItemPattern(sqField);\r\n                    let schemaName = fieldExprItem.schema;\r\n                    if (schema.schema(schemaName)) {\r\n                        let hierarchy = schema.schema(schemaName)\r\n                            .findHierarchy(fieldExprItem.entity, hierarchyLevelField.name);\r\n\r\n                        if (hierarchy) {\r\n                            let hierarchyLevel: ConceptualHierarchyLevel = hierarchy.levels.withName(hierarchyLevelField.level);\r\n                            if (hierarchyLevel && hierarchyLevel.column)\r\n                                return hierarchyLevel.column.column;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        export function getDefaultValues(fieldSQExprs: SQExpr[], schema: FederatedConceptualSchema): SQConstantExpr[] {\r\n            if (_.isEmpty(fieldSQExprs) || !schema)\r\n                return;\r\n            let result: SQConstantExpr[] = [];\r\n            for (let sqExpr of fieldSQExprs) {\r\n                let defaultValue = getDefaultValue(sqExpr, schema);\r\n                if (defaultValue)\r\n                    result.push(defaultValue);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        /** Return compare or and expression for key value pairs. */\r\n        export function getDataViewScopeIdentityComparisonExpr(fieldsExpr: SQExpr[], values: SQConstantExpr[]): SQExpr {\r\n            debug.assert(fieldsExpr.length === values.length, \"fileds and values need to be the same size\");\r\n\r\n            let compareExprs: SQCompareExpr[] = [];\r\n            for (let i = 0; i < fieldsExpr.length; i++) {\r\n                compareExprs.push(SQExprBuilder.compare(QueryComparisonKind.Equal, fieldsExpr[i], values[i]));\r\n            }\r\n\r\n            if (_.isEmpty(compareExprs))\r\n                return;\r\n\r\n            let resultExpr: SQExpr;\r\n            for (let compareExpr of compareExprs) {\r\n                resultExpr = SQExprBuilder.and(resultExpr, compareExpr);\r\n            }\r\n\r\n            return resultExpr;\r\n        }\r\n\r\n        export function getActiveTablesNames(queryDefn: data.SemanticQuery): string[] {\r\n            let tables: string[] = [];\r\n            if (queryDefn) {\r\n                let selectedItems = queryDefn.from();\r\n                if (selectedItems !== undefined) {\r\n                    for (let key of selectedItems.keys()) {\r\n                        let entityObj = selectedItems.entity(key);\r\n                        if (tables.indexOf(entityObj.entity) < 0)\r\n                            tables.push(entityObj.entity);\r\n                    }\r\n                }\r\n            }\r\n            return tables;\r\n        }\r\n\r\n        export function isRelatedToMany(\r\n            schema: FederatedConceptualSchema,\r\n            sourceExpr: SQEntityExpr,\r\n            targetExpr: SQEntityExpr): boolean {\r\n\r\n            return isRelated(schema, sourceExpr, targetExpr, ConceptualMultiplicity.ZeroOrOne, ConceptualMultiplicity.Many) ||\r\n                isRelated(schema, targetExpr, sourceExpr, ConceptualMultiplicity.Many, ConceptualMultiplicity.ZeroOrOne);\r\n        }\r\n\r\n        export function isRelatedToOne(\r\n            schema: FederatedConceptualSchema,\r\n            sourceExpr: SQEntityExpr,\r\n            targetExpr: SQEntityExpr): boolean {\r\n\r\n            return isRelated(schema, sourceExpr, targetExpr, ConceptualMultiplicity.Many, ConceptualMultiplicity.ZeroOrOne) ||\r\n                isRelated(schema, targetExpr, sourceExpr, ConceptualMultiplicity.ZeroOrOne, ConceptualMultiplicity.Many);\r\n        }\r\n\r\n        function isRelated(\r\n            schema: FederatedConceptualSchema,\r\n            sourceExpr: SQEntityExpr,\r\n            targetExpr: SQEntityExpr,\r\n            sourceMultiplicity: ConceptualMultiplicity,\r\n            targetMultiplicity: ConceptualMultiplicity): boolean {\r\n\r\n            let source = SQExprUtils.getConceptualEntity(sourceExpr, schema);\r\n            debug.assertValue(source, \"could not resolve conceptual entity form sourceExpr.\");\r\n\r\n            if (_.isEmpty(source.navigationProperties))\r\n                return false;\r\n\r\n            let target = SQExprUtils.getConceptualEntity(targetExpr, schema);\r\n            debug.assertValue(target, \"could not resolve conceptual entity form targetExpr.\");\r\n\r\n            let queue: ConceptualEntity[] = [];\r\n            queue.push(source);\r\n\r\n            // walk the relationship path from source.\r\n            while (!_.isEmpty(queue)) {\r\n                let current = queue.shift();\r\n\r\n                let navProperties = current.navigationProperties;\r\n                if (_.isEmpty(navProperties))\r\n                    continue;\r\n\r\n                for (let navProperty of navProperties) {\r\n                    if (!navProperty.isActive)\r\n                        continue;\r\n\r\n                    if (navProperty.targetMultiplicity === targetMultiplicity && navProperty.sourceMultiplicity === sourceMultiplicity) {\r\n                        if (navProperty.targetEntity === target)\r\n                            return true;\r\n                        queue.push(navProperty.targetEntity);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        export function isRelatedOneToOne(\r\n            schema: FederatedConceptualSchema,\r\n            sourceExpr: SQEntityExpr,\r\n            targetExpr: SQEntityExpr): boolean {\r\n\r\n            let source = SQExprUtils.getConceptualEntity(sourceExpr, schema);\r\n            debug.assertValue(source, \"could not resolve conceptual entity form sourceExpr.\");\r\n            let target = SQExprUtils.getConceptualEntity(targetExpr, schema);\r\n            debug.assertValue(target, \"could not resolve conceptual entity form targetExpr.\");\r\n\r\n            let sourceNavigations = source.navigationProperties;\r\n            let targetNavigations = target.navigationProperties;\r\n\r\n            if (_.isEmpty(sourceNavigations) && _.isEmpty(targetNavigations))\r\n                return false;\r\n\r\n            return hasOneToOneNavigation(sourceNavigations, target) || hasOneToOneNavigation(targetNavigations, source);\r\n        }\r\n\r\n        function hasOneToOneNavigation(navigationProperties: ArrayNamedItems<ConceptualNavigationProperty>, targetEntity: ConceptualEntity): boolean {\r\n            if (_.isEmpty(navigationProperties))\r\n                return false;\r\n\r\n            for (let navigationProperty of navigationProperties) {\r\n                if (!navigationProperty.isActive)\r\n                    continue;\r\n\r\n                if (navigationProperty.targetEntity !== targetEntity)\r\n                    continue;\r\n\r\n                if (navigationProperty.sourceMultiplicity === ConceptualMultiplicity.ZeroOrOne &&\r\n                    navigationProperty.targetMultiplicity === ConceptualMultiplicity.ZeroOrOne) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        /** Performs a union of the 2 arrays with SQExpr.equals as comparator to skip duplicate items,\r\n            and returns a new array. When available, we should use _.unionWith from lodash. */\r\n        export function concatUnique(leftExprs: SQExpr[], rightExprs: SQExpr[]): SQExpr[] {\r\n            debug.assertValue(leftExprs, 'leftExprs');\r\n            debug.assertValue(rightExprs, 'rightExprs');\r\n\r\n            let concatExprs = ArrayExtensions.copy(leftExprs);\r\n            for (let expr of rightExprs) {\r\n                if (indexOfExpr(concatExprs, expr) === -1) {\r\n                    concatExprs.push(expr);\r\n                }\r\n            }\r\n\r\n            return concatExprs;\r\n        }\r\n\r\n        class SQExprDefaultNameGenerator extends DefaultSQExprVisitorWithArg<string, string> {\r\n            public static instance: SQExprDefaultNameGenerator = new SQExprDefaultNameGenerator();\r\n\r\n            public visitEntity(expr: SQEntityExpr): string {\r\n                return expr.entity;\r\n            }\r\n\r\n            public visitColumnRef(expr: SQColumnRefExpr): string {\r\n                return expr.source.accept(this) + '.' + expr.ref;\r\n            }\r\n\r\n            public visitMeasureRef(expr: SQMeasureRefExpr, fallback: string): string {\r\n                return expr.source.accept(this) + '.' + expr.ref;\r\n            }\r\n\r\n            public visitAggr(expr: SQAggregationExpr, fallback: string): string {\r\n                return QueryAggregateFunction[expr.func] + '(' + expr.arg.accept(this) + ')';\r\n            }\r\n\r\n            public visitArithmetic(expr: SQArithmeticExpr, fallback: string): string {\r\n                return powerbi.data.getArithmeticOperatorName(expr.operator) + '(' + expr.left.accept(this) + ', ' + expr.right.accept(this) + ')';\r\n            }\r\n\r\n            public visitConstant(expr: SQConstantExpr): string {\r\n                return 'const';\r\n            }\r\n\r\n            public visitDefault(expr: SQExpr, fallback: string): string {\r\n                return fallback || 'expr';\r\n            }\r\n        }\r\n\r\n        class IsMeasureVisitor extends DefaultSQExprVisitor<boolean> {\r\n            public static instance: IsMeasureVisitor = new IsMeasureVisitor();\r\n\r\n            public visitMeasureRef(expr: SQMeasureRefExpr): boolean {\r\n                return true;\r\n            }\r\n\r\n            public visitAggr(expr: SQAggregationExpr): boolean {\r\n                return true;\r\n            }\r\n\r\n            public visitArithmetic(expr: SQArithmeticExpr): boolean {\r\n                return true;\r\n            }\r\n\r\n            public visitDefault(expr: SQExpr): boolean {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        class IsDefaultValueVisitor extends DefaultSQExprVisitor<boolean> {\r\n            public static instance: IsDefaultValueVisitor = new IsDefaultValueVisitor();\r\n\r\n            public visitCompare(expr: SQCompareExpr): boolean {\r\n                if (expr.comparison !== QueryComparisonKind.Equal)\r\n                    return false;\r\n\r\n                return expr.right.accept(this);\r\n            }\r\n\r\n            public visitAnd(expr: SQAndExpr): boolean {\r\n                return expr.left.accept(this) && expr.right.accept(this);\r\n            }\r\n\r\n            public visitDefaultValue(expr: SQDefaultValueExpr): boolean {\r\n                return true;\r\n            }\r\n\r\n            public visitDefault(expr: SQExpr): boolean {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        class IsAnyValueVisitor extends DefaultSQExprVisitor<boolean> {\r\n            public static instance: IsAnyValueVisitor = new IsAnyValueVisitor();\r\n\r\n            public visitCompare(expr: SQCompareExpr): boolean {\r\n                if (expr.comparison !== QueryComparisonKind.Equal)\r\n                    return false;\r\n\r\n                return expr.right.accept(this);\r\n            }\r\n\r\n            public visitAnd(expr: SQAndExpr): boolean {\r\n                return expr.left.accept(this) && expr.right.accept(this);\r\n            }\r\n\r\n            public visitAnyValue(expr: SQAnyValueExpr): boolean {\r\n                return true;\r\n            }\r\n\r\n            public visitDefault(expr: SQExpr): boolean {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n\r\n    export class SemanticQueryRewriter {\r\n        private exprRewriter: ISQExprVisitor<SQExpr>;\r\n\r\n        constructor(exprRewriter: ISQExprVisitor<SQExpr>) {\r\n            this.exprRewriter = exprRewriter;\r\n        }\r\n\r\n        public rewriteFrom(fromValue: SQFrom): SQFrom {\r\n            let fromContents: { [name: string]: SQFromEntitySource } = {};\r\n            let originalFrom = fromValue,\r\n                originalFromKeys = originalFrom.keys();\r\n            for (let i = 0, len = originalFromKeys.length; i < len; i++) {\r\n                let keyName = originalFromKeys[i],\r\n                    originalEntityRef = originalFrom.entity(keyName),\r\n                    originalEntityExpr = SQExprBuilder.entity(originalEntityRef.schema, originalEntityRef.entity, keyName),\r\n                    updatedEntityExpr = <SQEntityExpr>originalEntityExpr.accept(this.exprRewriter);\r\n                \r\n                fromContents[keyName] = {\r\n                    schema: updatedEntityExpr.schema,\r\n                    entity: updatedEntityExpr.entity,\r\n                };\r\n            }\r\n            return new SQFrom(fromContents);\r\n        }\r\n\r\n        public rewriteSelect(selectItems: NamedSQExpr[], from: SQFrom): NamedSQExpr[]{\r\n            debug.assertValue(selectItems, 'selectItems');\r\n            debug.assertValue(from, 'from');\r\n\r\n            return this.rewriteNamedSQExpressions(selectItems, from);\r\n        }\r\n\r\n        public rewriteGroupBy(groupByitems: NamedSQExpr[], from: SQFrom): NamedSQExpr[] {\r\n            debug.assertAnyValue(groupByitems, 'groupByitems');\r\n            debug.assertValue(from, 'from');\r\n\r\n            if (_.isEmpty(groupByitems))\r\n                return;\r\n\r\n            return this.rewriteNamedSQExpressions(groupByitems, from);\r\n        }\r\n\r\n        private rewriteNamedSQExpressions(expressions: NamedSQExpr[], from: SQFrom): NamedSQExpr[] {\r\n            debug.assertValue(expressions, 'expressions');\r\n\r\n            return _.map(expressions, item => {\r\n                return {\r\n                    name: item.name,\r\n                    expr: SQExprRewriterWithSourceRenames.rewrite(item.expr.accept(this.exprRewriter), from)\r\n                };\r\n            });\r\n        }\r\n\r\n        public rewriteOrderBy(orderByItems: SQSortDefinition[], from: SQFrom): SQSortDefinition[]{\r\n            debug.assertAnyValue(orderByItems, 'orderByItems');\r\n            debug.assertValue(from, 'from');\r\n\r\n            if (_.isEmpty(orderByItems))\r\n                return;\r\n\r\n            let orderBy: SQSortDefinition[] = [];\r\n            for (let i = 0, len = orderByItems.length; i < len; i++) {\r\n                let item = orderByItems[i],\r\n                    updatedExpr = SQExprRewriterWithSourceRenames.rewrite(item.expr.accept(this.exprRewriter), from);\r\n                orderBy.push({\r\n                        direction: item.direction,\r\n                        expr: updatedExpr,\r\n                    });\r\n            }\r\n\r\n            return orderBy;\r\n        }\r\n\r\n        public rewriteWhere(whereItems: SQFilter[], from: SQFrom): SQFilter[]{\r\n            debug.assertAnyValue(whereItems, 'whereItems');\r\n            debug.assertValue(from, 'from');\r\n\r\n            if (_.isEmpty(whereItems))\r\n                return;\r\n\r\n            let where: SQFilter[] = [];\r\n            for (let i = 0, len = whereItems.length; i < len; i++) {\r\n                let originalWhere = whereItems[i];\r\n\r\n                let updatedWhere: SQFilter = {\r\n                    condition: SQExprRewriterWithSourceRenames.rewrite(originalWhere.condition.accept(this.exprRewriter), from),\r\n                };\r\n\r\n                if (originalWhere.target)\r\n                    updatedWhere.target = _.map(originalWhere.target, e => SQExprRewriterWithSourceRenames.rewrite(e.accept(this.exprRewriter), from));\r\n\r\n                where.push(updatedWhere);\r\n            }\r\n\r\n            return where;\r\n        }\r\n    }\r\n} ","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import ArrayExtensions = jsCommon.ArrayExtensions;\r\n    import ArrayNamedItems = jsCommon.ArrayNamedItems;\r\n\r\n    export interface NamedSQExpr {\r\n        name: string;\r\n        expr: SQExpr;\r\n    }\r\n\r\n    export interface SQFilter {\r\n        target?: SQExpr[];\r\n        condition: SQExpr;\r\n    }\r\n\r\n    /** Represents an entity reference in SemanticQuery from. */\r\n    export interface SQFromEntitySource {\r\n        entity: string;\r\n        schema: string;\r\n    }\r\n\r\n    /** Represents a sort over an expression. */\r\n    export interface SQSortDefinition {\r\n        expr: SQExpr;\r\n        direction: SortDirection;\r\n    }\r\n\r\n    export interface QueryFromEnsureEntityResult {\r\n        name: string;\r\n        new?: boolean;\r\n    }\r\n\r\n    export interface SQSourceRenames {\r\n        [from: string]: string;\r\n    }\r\n\r\n    /**\r\n     * Represents a semantic query that is:\r\n     * 1) Round-trippable with a JSON QueryDefinition.\r\n     * 2) Immutable\r\n     * 3) Long-lived and does not have strong references to a conceptual model (only names).\r\n     */\r\n    export class SemanticQuery {\r\n        private static empty: SemanticQuery;\r\n        private fromValue: SQFrom;\r\n        private whereItems: SQFilter[];\r\n        private orderByItems: SQSortDefinition[];\r\n        private selectItems: NamedSQExpr[];\r\n        private groupByItems: NamedSQExpr[];\r\n\r\n        constructor(from: SQFrom, where: SQFilter[], orderBy: SQSortDefinition[], select: NamedSQExpr[], groupBy: NamedSQExpr[]) {\r\n            debug.assertValue(from, 'from');\r\n            debug.assertValue(select, 'select');\r\n\r\n            this.fromValue = from;\r\n            this.whereItems = where;\r\n            this.orderByItems = orderBy;\r\n            this.selectItems = select;\r\n            this.groupByItems = groupBy;\r\n        }\r\n\r\n        public static create(): SemanticQuery {\r\n            if (!SemanticQuery.empty)\r\n                SemanticQuery.empty = new SemanticQuery(new SQFrom(), null, null, [], null);\r\n\r\n            return SemanticQuery.empty;\r\n        }\r\n\r\n        private static createWithTrimmedFrom(\r\n            from: SQFrom,\r\n            where: SQFilter[],\r\n            orderBy: SQSortDefinition[],\r\n            select: NamedSQExpr[],\r\n            groupBy: NamedSQExpr[]): SemanticQuery {\r\n\r\n            let unreferencedKeyFinder = new UnreferencedKeyFinder(from.keys());\r\n\r\n            // Where\r\n            if (where) {\r\n                for (let i = 0, len = where.length; i < len; i++) {\r\n                    let filter = where[i];\r\n\r\n                    filter.condition.accept(unreferencedKeyFinder);\r\n\r\n                    let filterTarget = filter.target;\r\n                    if (filterTarget) {\r\n                        for (let j = 0, jlen = filterTarget.length; j < jlen; j++)\r\n                            if (filterTarget[j])\r\n                                filterTarget[j].accept(unreferencedKeyFinder);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // OrderBy\r\n            if (orderBy) {\r\n                for (let i = 0, len = orderBy.length; i < len; i++)\r\n                    orderBy[i].expr.accept(unreferencedKeyFinder);\r\n            }\r\n\r\n            // Select\r\n            for (let i = 0, len = select.length; i < len; i++)\r\n                select[i].expr.accept(unreferencedKeyFinder);\r\n\r\n            // GroupBy\r\n            if (groupBy) {\r\n                for (let i = 0, len = groupBy.length; i < len; i++)\r\n                    groupBy[i].expr.accept(unreferencedKeyFinder);\r\n            }\r\n\r\n            let unreferencedKeys = unreferencedKeyFinder.result();\r\n            for (let i = 0, len = unreferencedKeys.length; i < len; i++)\r\n                from.remove(unreferencedKeys[i]);\r\n\r\n            return new SemanticQuery(from, where, orderBy, select, groupBy);\r\n        }\r\n\r\n        public from(): SQFrom {\r\n            return this.fromValue.clone();\r\n        }\r\n\r\n        /** Returns a query equivalent to this, with the specified selected items. */\r\n        select(values: NamedSQExpr[]): SemanticQuery;\r\n        /** Gets the items being selected in this query. */\r\n        select(): ArrayNamedItems<NamedSQExpr>;\r\n        public select(values?: NamedSQExpr[]): any {\r\n            if (_.isEmpty(arguments))\r\n                return this.getSelect();\r\n\r\n            return this.setSelect(values);\r\n        }\r\n\r\n        private getSelect(): ArrayNamedItems<NamedSQExpr> {\r\n            return SemanticQuery.createNamedExpressionArray(this.selectItems);\r\n        }\r\n\r\n        private static createNamedExpressionArray(items: NamedSQExpr[]): ArrayNamedItems<NamedSQExpr> {\r\n            return ArrayExtensions.extendWithName<NamedSQExpr>(_.map(items, s => {\r\n                return {\r\n                    name: s.name,\r\n                    expr: s.expr,\r\n                };\r\n            }));\r\n        }\r\n\r\n        private setSelect(values: NamedSQExpr[]): SemanticQuery {\r\n            let from = this.fromValue.clone();\r\n            let selectItems = SemanticQuery.rewriteExpressionsWithSourceRenames(values, from);\r\n            return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, selectItems, this.groupByItems);\r\n        }\r\n\r\n        private static rewriteExpressionsWithSourceRenames(values: NamedSQExpr[], from: SQFrom): NamedSQExpr[] {\r\n            let items: NamedSQExpr[] = [];\r\n\r\n            for (let i = 0, len = values.length; i < len; i++) {\r\n                let value = values[i];\r\n                items.push({\r\n                    name: value.name,\r\n                    expr: SQExprRewriterWithSourceRenames.rewrite(value.expr, from)\r\n                });\r\n            }\r\n\r\n            return items;\r\n        } \r\n\r\n        /** Removes the given expression from the select. */\r\n        public removeSelect(expr: SQExpr): SemanticQuery {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            let originalItems = this.selectItems,\r\n                selectItems: NamedSQExpr[] = [];\r\n            for (let i = 0, len = originalItems.length; i < len; i++) {\r\n                let originalExpr = originalItems[i];\r\n                if (SQExpr.equals(originalExpr.expr, expr))\r\n                    continue;\r\n\r\n                selectItems.push(originalExpr);\r\n            }\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(this.fromValue.clone(), this.whereItems, this.orderByItems, selectItems, this.groupByItems);\r\n        }\r\n\r\n        /** Removes the given expression from order by. */\r\n        public removeOrderBy(expr: SQExpr): SemanticQuery {\r\n            let sorts = this.orderBy();\r\n            for (let i = sorts.length - 1; i >= 0; i--) {\r\n                if (SQExpr.equals(sorts[i].expr, expr))\r\n                    sorts.splice(i, 1);\r\n            }\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(this.fromValue.clone(), this.whereItems, sorts, this.selectItems, this.groupByItems);\r\n        }\r\n\r\n        public selectNameOf(expr: SQExpr): string {\r\n            let index = SQExprUtils.indexOfExpr(_.map(this.selectItems, s => s.expr), expr);\r\n            if (index >= 0)\r\n                return this.selectItems[index].name;\r\n        }\r\n\r\n        public setSelectAt(index: number, expr: SQExpr): SemanticQuery {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            if (index >= this.selectItems.length)\r\n                return;\r\n\r\n            let select = this.select(),\r\n                from = this.fromValue.clone(),\r\n                originalName = select[index].name;\r\n            select[index] = {\r\n                name: originalName,\r\n                expr: SQExprRewriterWithSourceRenames.rewrite(expr, from)\r\n            };\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, select, this.groupByItems);\r\n        }\r\n\r\n        /** Adds a the expression to the select clause. */\r\n        public addSelect(expr: SQExpr, exprName?: string): SemanticQuery {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            let selectItems = this.select(),\r\n                from = this.fromValue.clone();\r\n            selectItems.push(this.createNamedExpr(selectItems, from, expr, exprName));\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, selectItems, this.groupByItems);\r\n        }\r\n\r\n        private createNamedExpr(currentNames: ArrayNamedItems<NamedSQExpr>, from: SQFrom, expr: SQExpr, exprName?: string): NamedSQExpr{\r\n            return {\r\n                name: SQExprUtils.uniqueName(currentNames, expr, exprName),\r\n                expr: SQExprRewriterWithSourceRenames.rewrite(expr, from)\r\n            };\r\n        } \r\n\r\n        /** Returns a query equivalent to this, with the specified groupBy items. */\r\n        groupBy(values: NamedSQExpr[]): SemanticQuery;\r\n        /** Gets the groupby items in this query. */\r\n        groupBy(): ArrayNamedItems<NamedSQExpr>;\r\n        public groupBy(values?: NamedSQExpr[]): any {\r\n            if (_.isEmpty(arguments))\r\n                return this.getGroupBy();\r\n\r\n            return this.setGroupBy(values);\r\n        }\r\n\r\n        private getGroupBy(): ArrayNamedItems<NamedSQExpr> {\r\n            return SemanticQuery.createNamedExpressionArray(this.groupByItems);\r\n        }\r\n\r\n        private setGroupBy(values: NamedSQExpr[]): SemanticQuery {\r\n            let from = this.fromValue.clone();\r\n            let groupByItems = SemanticQuery.rewriteExpressionsWithSourceRenames(values, from);\r\n            return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, this.selectItems, groupByItems);\r\n        }\r\n\r\n        public addGroupBy(expr: SQExpr): SemanticQuery {\r\n            debug.assertValue(expr, 'expr');\r\n\r\n            let groupByItems = this.groupBy(),\r\n                from = this.fromValue.clone();\r\n            groupByItems.push(this.createNamedExpr(groupByItems, from, expr));\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, this.orderByItems, this.selectItems, groupByItems);\r\n        }\r\n\r\n        /** Gets or sets the sorting for this query. */\r\n        orderBy(values: SQSortDefinition[]): SemanticQuery;\r\n        orderBy(): SQSortDefinition[];\r\n\r\n        public orderBy(values?: SQSortDefinition[]): any {\r\n            if (_.isEmpty(arguments))\r\n                return this.getOrderBy();\r\n\r\n            return this.setOrderBy(values);\r\n        }\r\n\r\n        private getOrderBy(): SQSortDefinition[] {\r\n            let result: SQSortDefinition[] = [];\r\n\r\n            let orderBy = this.orderByItems;\r\n            if (orderBy) {\r\n                for (let i = 0, len = orderBy.length; i < len; i++) {\r\n                    let clause = orderBy[i];\r\n\r\n                    result.push({\r\n                        expr: clause.expr,\r\n                        direction: clause.direction,\r\n                    });\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        private setOrderBy(values: SQSortDefinition[]): SemanticQuery {\r\n            debug.assertValue(values, 'values');\r\n\r\n            let updatedOrderBy: SQSortDefinition[] = [],\r\n                from = this.fromValue.clone();\r\n            for (let i = 0, len = values.length; i < len; i++) {\r\n                let clause = values[i];\r\n                updatedOrderBy.push({\r\n                    expr: SQExprRewriterWithSourceRenames.rewrite(clause.expr, from),\r\n                    direction: clause.direction,\r\n                });\r\n            }\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(from, this.whereItems, updatedOrderBy, this.selectItems, this.groupByItems);\r\n        }\r\n\r\n        /** Gets or sets the filters for this query. */\r\n        where(values: SQFilter[]): SemanticQuery;\r\n        where(): SQFilter[];\r\n\r\n        public where(values?: SQFilter[]): any {\r\n            if (_.isEmpty(arguments))\r\n                return this.getWhere();\r\n\r\n            return this.setWhere(values);\r\n        }\r\n\r\n        private getWhere(): SQFilter[] {\r\n            let result: SQFilter[] = [];\r\n\r\n            let whereItems = this.whereItems;\r\n            if (whereItems) {\r\n                for (let i = 0, len = whereItems.length; i < len; i++)\r\n                    result.push(whereItems[i]);\r\n            }\r\n\r\n            return result;\r\n        }\r\n\r\n        private setWhere(values: SQFilter[]): SemanticQuery {\r\n            debug.assertValue(values, 'values');\r\n\r\n            let updatedWhere: SQFilter[] = [],\r\n                from = this.fromValue.clone();\r\n            for (let i = 0, len = values.length; i < len; i++) {\r\n                let filter = values[i];\r\n                let updatedFilter: SQFilter = {\r\n                    condition: SQExprRewriterWithSourceRenames.rewrite(filter.condition, from),\r\n                };\r\n\r\n                let filterTarget = filter.target;\r\n                if (filterTarget) {\r\n                    updatedFilter.target = [];\r\n                    for (let j = 0, jlen = filterTarget.length; j < jlen; j++)\r\n                        if (filterTarget[j]) {\r\n                            let updatedTarget = SQExprRewriterWithSourceRenames.rewrite(filterTarget[j], from);\r\n                            updatedFilter.target.push(updatedTarget);\r\n                        }\r\n                }\r\n\r\n                updatedWhere.push(updatedFilter);\r\n            }\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(from, updatedWhere, this.orderByItems, this.selectItems, this.groupByItems);\r\n        }\r\n\r\n        public addWhere(filter: SemanticFilter): SemanticQuery {\r\n            debug.assertValue(filter, 'filter');\r\n\r\n            let updatedWhere: SQFilter[] = this.where(),\r\n                incomingWhere: SQFilter[] = filter.where(),\r\n                from = this.fromValue.clone();\r\n\r\n            for (let i = 0, len = incomingWhere.length; i < len; i++) {\r\n                let clause = incomingWhere[i];\r\n\r\n                let updatedClause: SQFilter = {\r\n                    condition: SQExprRewriterWithSourceRenames.rewrite(clause.condition, from),\r\n                };\r\n\r\n                if (clause.target)\r\n                    updatedClause.target = _.map(clause.target, t => SQExprRewriterWithSourceRenames.rewrite(t, from));\r\n\r\n                updatedWhere.push(updatedClause);\r\n            }\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(from, updatedWhere, this.orderByItems, this.selectItems, this.groupByItems);\r\n        }\r\n\r\n        public rewrite(exprRewriter: ISQExprVisitor<SQExpr>): SemanticQuery {\r\n            let rewriter = new SemanticQueryRewriter(exprRewriter);\r\n            let from = rewriter.rewriteFrom(this.fromValue);\r\n            let where = rewriter.rewriteWhere(this.whereItems, from);\r\n            let orderBy = rewriter.rewriteOrderBy(this.orderByItems, from);\r\n            let select = rewriter.rewriteSelect(this.selectItems, from);\r\n            let groupBy = rewriter.rewriteGroupBy(this.groupByItems, from);\r\n\r\n            return SemanticQuery.createWithTrimmedFrom(from, where, orderBy, select, groupBy);\r\n        }\r\n    }\r\n\r\n    /** Represents a semantic filter condition.  Round-trippable with a JSON FilterDefinition.  Instances of this class are immutable. */\r\n    export class SemanticFilter implements ISemanticFilter {\r\n        private fromValue: SQFrom;\r\n        private whereItems: SQFilter[];\r\n\r\n        constructor(from: SQFrom, where: SQFilter[]) {\r\n            debug.assertValue(from, 'from');\r\n            debug.assertValue(where, 'where');\r\n\r\n            this.fromValue = from;\r\n            this.whereItems = where;\r\n        }\r\n\r\n        public static fromSQExpr(contract: SQExpr): SemanticFilter {\r\n            debug.assertValue(contract, 'contract');\r\n\r\n            let from = new SQFrom();\r\n\r\n            let rewrittenContract = SQExprRewriterWithSourceRenames.rewrite(contract, from);\r\n            // DEVNOTE targets of some filters are visual specific and will get resolved only during query generation.\r\n            //         Thus not setting a target here.\r\n            let where: SQFilter[] = [{\r\n                condition: rewrittenContract\r\n            }];\r\n\r\n            return new SemanticFilter(from, where);\r\n        }\r\n\r\n        public static getDefaultValueFilter(fieldSQExprs: SQExpr | SQExpr[]): SemanticFilter {\r\n            return SemanticFilter.getDataViewScopeIdentityComparisonFilters(fieldSQExprs, SQExprBuilder.defaultValue());\r\n        }\r\n\r\n        public static getAnyValueFilter(fieldSQExprs: SQExpr | SQExpr[]): SemanticFilter {\r\n            return SemanticFilter.getDataViewScopeIdentityComparisonFilters(fieldSQExprs, SQExprBuilder.anyValue());\r\n        }\r\n\r\n        private static getDataViewScopeIdentityComparisonFilters(fieldSQExprs: SQExpr | SQExpr[], value: SQExpr): SemanticFilter {\r\n            debug.assertValue(fieldSQExprs, 'fieldSQExprs');\r\n            debug.assertValue(value, 'value');\r\n\r\n            if (fieldSQExprs instanceof Array) {\r\n                let values: SQConstantExpr[] = Array.apply(null, Array(fieldSQExprs.length)).map(() => { return value; });\r\n                return SemanticFilter.fromSQExpr(SQExprUtils.getDataViewScopeIdentityComparisonExpr(<SQExpr[]>fieldSQExprs, values));\r\n            }\r\n\r\n            return SemanticFilter.fromSQExpr(SQExprBuilder.equal(<SQExpr>fieldSQExprs, value));\r\n        }\r\n\r\n        public from(): SQFrom {\r\n            return this.fromValue.clone();\r\n        }\r\n\r\n        public conditions(): SQExpr[] {\r\n            let expressions: SQExpr[] = [];\r\n\r\n            let where = this.whereItems;\r\n            for (let i = 0, len = where.length; i < len; i++) {\r\n                let filter = where[i];\r\n                expressions.push(filter.condition);\r\n            }\r\n            return expressions;\r\n        }\r\n\r\n        public where(): SQFilter[] {\r\n            let result: SQFilter[] = [];\r\n\r\n            let whereItems = this.whereItems;\r\n            for (let i = 0, len = whereItems.length; i < len; i++)\r\n                result.push(whereItems[i]);\r\n\r\n            return result;\r\n        }\r\n\r\n        public rewrite(exprRewriter: ISQExprVisitor<SQExpr>): SemanticFilter {\r\n            let rewriter = new SemanticQueryRewriter(exprRewriter);\r\n            let from = rewriter.rewriteFrom(this.fromValue);\r\n            let where = rewriter.rewriteWhere(this.whereItems, from);\r\n\r\n            return new SemanticFilter(from, where);\r\n        }\r\n\r\n        public validate(schema: FederatedConceptualSchema, aggrUtils: ISQAggregationOperations, errors?: SQExprValidationError[]): SQExprValidationError[] {\r\n            let validator = new SQExprValidationVisitor(schema, aggrUtils, errors);\r\n            this.rewrite(validator);\r\n            return validator.errors;\r\n        }\r\n\r\n        /** Merges a list of SemanticFilters into one. */\r\n        public static merge(filters: SemanticFilter[]): SemanticFilter {\r\n            if (_.isEmpty(filters))\r\n                return null;\r\n\r\n            if (filters.length === 1)\r\n                return filters[0];\r\n\r\n            let firstFilter = filters[0];\r\n            let from = firstFilter.from(),\r\n                where: SQFilter[] = ArrayExtensions.take(firstFilter.whereItems, firstFilter.whereItems.length);\r\n\r\n            for (let i = 1, len = filters.length; i < len; i++)\r\n                SemanticFilter.applyFilter(filters[i], from, where);\r\n\r\n            return new SemanticFilter(from, where);\r\n        }\r\n\r\n        public static isDefaultFilter(filter: SemanticFilter): boolean {\r\n            if (!filter || filter.where().length !== 1)\r\n                return false;\r\n\r\n            return SQExprUtils.isDefaultValue(filter.where()[0].condition);\r\n        }\r\n\r\n        public static isAnyFilter(filter: SemanticFilter): boolean {\r\n            if (!filter || filter.where().length !== 1)\r\n                return false;\r\n\r\n            return SQExprUtils.isAnyValue(filter.where()[0].condition);\r\n        }\r\n\r\n        public static isSameFilter(leftFilter: SemanticFilter, rightFilter: SemanticFilter): boolean {\r\n            if (jsCommon.JsonComparer.equals<SemanticFilter>(leftFilter, rightFilter)) {\r\n                return !((SemanticFilter.isDefaultFilter(leftFilter) && SemanticFilter.isAnyFilter(rightFilter))\r\n                    || (SemanticFilter.isAnyFilter(leftFilter) && SemanticFilter.isDefaultFilter(rightFilter)));\r\n            }\r\n            return false;\r\n        }\r\n\r\n        private static applyFilter(filter: SemanticFilter, from: SQFrom, where: SQFilter[]): void {\r\n            debug.assertValue(filter, 'filter');\r\n            debug.assertValue(from, 'from');\r\n            debug.assertValue(where, 'where');\r\n\r\n            // Where\r\n            let filterWhereItems = filter.whereItems;\r\n            for (let i = 0; i < filterWhereItems.length; i++) {\r\n                let filterWhereItem = filterWhereItems[i];\r\n\r\n                let updatedWhereItem: SQFilter = {\r\n                    condition: SQExprRewriterWithSourceRenames.rewrite(filterWhereItem.condition, from),\r\n                };\r\n\r\n                if (filterWhereItem.target)\r\n                    updatedWhereItem.target = _.map(filterWhereItem.target, e => SQExprRewriterWithSourceRenames.rewrite(e, from));\r\n\r\n                where.push(updatedWhereItem);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** Represents a SemanticQuery/SemanticFilter from clause. */\r\n    export class SQFrom {\r\n        private items: { [name: string]: SQFromEntitySource };\r\n\r\n        constructor(items?: { [name: string]: SQFromEntitySource }) {\r\n            this.items = items || {};\r\n        }\r\n\r\n        public keys(): string[] {\r\n            return Object.keys(this.items);\r\n        }\r\n\r\n        public entity(key: string): SQFromEntitySource {\r\n            return this.items[key];\r\n        }\r\n\r\n        public ensureEntity(entity: SQFromEntitySource, desiredVariableName?: string): QueryFromEnsureEntityResult {\r\n            debug.assertValue(entity, 'entity');\r\n\r\n            // 1) Reuse a reference to the entity among the already referenced\r\n            let keys = this.keys();\r\n            for (let i = 0, len = keys.length; i < len; i++) {\r\n                let key = keys[i],\r\n                    item = this.items[key];\r\n                if (item && entity.entity === item.entity && entity.schema === item.schema)\r\n                    return { name: key };\r\n            }\r\n\r\n            // 2) Add a reference to the entity\r\n            let candidateName = desiredVariableName || this.candidateName(entity.entity),\r\n                uniqueName: string = candidateName,\r\n                i = 2;\r\n            while (this.items[uniqueName]) {\r\n                uniqueName = candidateName + i++;\r\n            }\r\n\r\n            this.items[uniqueName] = entity;\r\n            return { name: uniqueName, new: true };\r\n        }\r\n\r\n        public remove(key: string): void {\r\n            delete this.items[key];\r\n        }\r\n\r\n        /** Converts the entity name into a short reference name.  Follows the Semantic Query convention of a short name. */\r\n        private candidateName(ref: string): string {\r\n            debug.assertValue(ref, 'ref');\r\n\r\n            let idx = ref.lastIndexOf('.');\r\n            if (idx >= 0 && (idx !== ref.length - 1))\r\n                ref = ref.substr(idx + 1);\r\n\r\n            return ref.substring(0, 1).toLowerCase();\r\n        }\r\n\r\n        public clone(): SQFrom {\r\n            // NOTE: consider deprecating this method and instead making QueryFrom be CopyOnWrite (currently we proactively clone).\r\n            let cloned = new SQFrom();\r\n\r\n            // NOTE: we use extend rather than prototypical inheritance on items because we use Object.keys.\r\n            $.extend(cloned.items, this.items);\r\n\r\n            return cloned;\r\n        }\r\n    }\r\n\r\n    export class SQExprRewriterWithSourceRenames extends SQExprRewriter {\r\n        private renames: SQSourceRenames;\r\n\r\n        constructor(renames: SQSourceRenames) {\r\n            debug.assertValue(renames, 'renames');\r\n\r\n            super();\r\n            this.renames = renames;\r\n        }\r\n\r\n        public visitEntity(expr: SQEntityExpr): SQExpr {\r\n            let updatedName = this.renames[expr.entity];\r\n\r\n            if (updatedName)\r\n                return new SQEntityExpr(expr.schema, expr.entity, updatedName);\r\n\r\n            return super.visitEntity(expr);\r\n        }\r\n\r\n        public rewriteFilter(filter: SQFilter): SQFilter {\r\n            debug.assertValue(filter, 'filter');\r\n\r\n            let updatedTargets = undefined;\r\n            if (filter.target)\r\n                updatedTargets = this.rewriteArray(filter.target);\r\n\r\n            let updatedCondition = filter.condition.accept(this);\r\n\r\n            if (filter.condition === updatedCondition && filter.target === updatedTargets)\r\n                return filter;\r\n\r\n            let updatedFilter: SQFilter = {\r\n                condition: updatedCondition,\r\n            };\r\n\r\n            if (updatedTargets)\r\n                updatedFilter.target = updatedTargets;\r\n\r\n            return updatedFilter;\r\n        }\r\n\r\n        public rewriteArray(exprs: SQExpr[]): SQExpr[] {\r\n            debug.assertValue(exprs, 'exprs');\r\n\r\n            let updatedExprs: SQExpr[];\r\n\r\n            for (let i = 0, len = exprs.length; i < len; i++) {\r\n                let expr = exprs[i],\r\n                    rewrittenExpr = expr.accept(this);\r\n\r\n                if (expr !== rewrittenExpr && !updatedExprs)\r\n                    updatedExprs = ArrayExtensions.take(exprs, i);\r\n\r\n                if (updatedExprs)\r\n                    updatedExprs.push(rewrittenExpr);\r\n            }\r\n\r\n            return updatedExprs || exprs;\r\n        }\r\n\r\n        public static rewrite(expr: SQExpr, from: SQFrom): SQExpr {\r\n            debug.assertValue(expr, 'expr');\r\n            debug.assertValue(from, 'from');\r\n\r\n            let renames = QuerySourceRenameDetector.run(expr, from);\r\n            let rewriter = new SQExprRewriterWithSourceRenames(renames);\r\n            return expr.accept(rewriter);\r\n        }\r\n    }\r\n\r\n    /** Responsible for updating a QueryFrom based on SQExpr references. */\r\n    class QuerySourceRenameDetector extends DefaultSQExprVisitorWithTraversal {\r\n        private from: SQFrom;\r\n        private renames: SQSourceRenames;\r\n\r\n        public static run(expr: SQExpr, from: SQFrom): SQSourceRenames {\r\n            let detector = new QuerySourceRenameDetector(from);\r\n            expr.accept(detector);\r\n\r\n            return detector.renames;\r\n        }\r\n\r\n        constructor(from: SQFrom) {\r\n            debug.assertValue(from, 'from');\r\n            super();\r\n\r\n            this.from = from;\r\n            this.renames = {};\r\n        }\r\n\r\n        public visitEntity(expr: SQEntityExpr): void {\r\n            // TODO: Renames must take the schema into account, not just entity set name.\r\n            let existingEntity = this.from.entity(expr.variable);\r\n            if (existingEntity && existingEntity.schema === expr.schema && existingEntity.entity === expr.entity)\r\n                return;\r\n\r\n            let actualEntity = this.from.ensureEntity(\r\n                {\r\n                    schema: expr.schema,\r\n                    entity: expr.entity,\r\n                },\r\n                expr.variable);\r\n\r\n            this.renames[expr.entity] = actualEntity.name;\r\n        }\r\n    }\r\n\r\n    /** Visitor for finding unreferenced sources. */\r\n    class UnreferencedKeyFinder extends DefaultSQExprVisitorWithTraversal {\r\n        private keys: string[];\r\n\r\n        constructor(keys: string[]) {\r\n            debug.assertValue(keys, 'keys');\r\n\r\n            super();\r\n            this.keys = keys;\r\n        }\r\n\r\n        public visitEntity(expr: SQEntityExpr): void {\r\n            let index = this.keys.indexOf(expr.variable);\r\n            if (index >= 0)\r\n                this.keys.splice(index, 1);\r\n        }\r\n\r\n        public result(): string[] {\r\n            return this.keys;\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import DataViewTransform = powerbi.data.DataViewTransform;\r\n    import SQExprBuilder = powerbi.data.SQExprBuilder;\r\n\r\n    /** Utility for creating a DataView from columns of data. */\r\n    export interface IDataViewBuilderCategorical {\r\n        withCategory(options: DataViewBuilderCategoryColumnOptions): IDataViewBuilderCategorical;\r\n        withCategories(categories: DataViewCategoryColumn[]): IDataViewBuilderCategorical;\r\n        withValues(options: DataViewBuilderValuesOptions): IDataViewBuilderCategorical;\r\n        withGroupedValues(options: DataViewBuilderGroupedValuesOptions): IDataViewBuilderCategorical;\r\n\r\n        build(): DataView;\r\n    }\r\n\r\n    export interface DataViewBuilderColumnOptions {\r\n        source: DataViewMetadataColumn;\r\n    }\r\n\r\n    export interface DataViewBuilderCategoryColumnOptions extends DataViewBuilderColumnOptions {\r\n        values: PrimitiveValue[];\r\n        identityFrom: DataViewBuilderColumnIdentitySource;\r\n    }\r\n\r\n    export interface DataViewBuilderValuesOptions {\r\n        columns: DataViewBuilderValuesColumnOptions[];\r\n    }\r\n\r\n    export interface DataViewBuilderGroupedValuesOptions {\r\n        groupColumn: DataViewBuilderCategoryColumnOptions;\r\n        valueColumns: DataViewBuilderColumnOptions[];\r\n        data: DataViewBuilderSeriesData[][];\r\n    }\r\n\r\n    /** Indicates the source set of identities. */\r\n    export interface DataViewBuilderColumnIdentitySource {\r\n        fields: SQExpr[];\r\n        identities?: DataViewScopeIdentity[];\r\n    }\r\n\r\n    export interface DataViewBuilderValuesColumnOptions extends DataViewBuilderColumnOptions, DataViewBuilderSeriesData {\r\n    }\r\n\r\n    export interface DataViewBuilderSeriesData {\r\n        values: PrimitiveValue[];\r\n        highlights?: PrimitiveValue[];\r\n\r\n        /** Client-computed maximum value for a column. */\r\n        maxLocal?: any;\r\n\r\n        /** Client-computed maximum value for a column. */\r\n        minLocal?: any;\r\n    }\r\n\r\n    export function createCategoricalDataViewBuilder(): IDataViewBuilderCategorical {\r\n        return new CategoricalDataViewBuilder();\r\n    }\r\n\r\n    interface ColumnMetadata {\r\n        column: DataViewMetadataColumn;\r\n        identityFrom: DataViewBuilderColumnIdentitySource;\r\n        values: PrimitiveValue[];\r\n    }\r\n\r\n    class CategoricalDataViewBuilder implements IDataViewBuilderCategorical {\r\n        private categories: DataViewCategoryColumn[];\r\n        private measureColumns: DataViewMetadataColumn[];\r\n        private hasDynamicSeries: boolean;\r\n        private dynamicSeriesMetadata: ColumnMetadata;\r\n        private columnIndex: number;\r\n        private data: DataViewBuilderValuesColumnOptions[]| DataViewBuilderSeriesData[][];\r\n\r\n        constructor() {\r\n            this.categories = [];\r\n            this.measureColumns = [];\r\n            this.columnIndex = 0;\r\n        }\r\n\r\n        public withCategory(options: DataViewBuilderCategoryColumnOptions): IDataViewBuilderCategorical {\r\n            let categoryValues = options.values,\r\n                identityFrom = options.identityFrom,\r\n                type = options.source.type;\r\n\r\n            let categoryColumn: DataViewCategoryColumn = {\r\n                source: options.source,\r\n                identityFields: options.identityFrom.fields,\r\n                identity: options.identityFrom.identities || [],\r\n                values: categoryValues,\r\n            };\r\n\r\n            if (!options.identityFrom.identities) {\r\n                for (let categoryIndex = 0, categoryLength = categoryValues.length; categoryIndex < categoryLength; categoryIndex++) {\r\n                    categoryColumn.identity.push(\r\n                        getScopeIdentity(identityFrom, categoryIndex, categoryValues[categoryIndex], type));\r\n                }\r\n            }\r\n\r\n            if (!this.categories)\r\n                this.categories = [];\r\n\r\n            this.categories.push(categoryColumn);\r\n\r\n            return this;\r\n        }\r\n\r\n        public withCategories(categories: DataViewCategoryColumn[]): IDataViewBuilderCategorical {\r\n            if (_.isEmpty(this.categories))\r\n                this.categories = categories;\r\n            else\r\n                Array.prototype.push.apply(this.categories, categories);\r\n\r\n            return this;\r\n        }\r\n\r\n        public withValues(options: DataViewBuilderValuesOptions): IDataViewBuilderCategorical {\r\n            debug.assertValue(options, 'options');\r\n\r\n            let columns = options.columns;\r\n            debug.assertValue(columns, 'columns');\r\n\r\n            for (let column of columns) {\r\n                this.measureColumns.push(column.source);\r\n            }\r\n\r\n            this.data = columns;\r\n\r\n            return this;\r\n        }\r\n\r\n        public withGroupedValues(options: DataViewBuilderGroupedValuesOptions): IDataViewBuilderCategorical {\r\n            debug.assertValue(options, 'options');\r\n\r\n            this.hasDynamicSeries = true;\r\n\r\n            let groupColumn = options.groupColumn;\r\n            debug.assertValue(groupColumn, 'groupColumn');\r\n\r\n            this.dynamicSeriesMetadata = {\r\n                column: groupColumn.source,\r\n                identityFrom: groupColumn.identityFrom,\r\n                values: groupColumn.values,\r\n            };\r\n\r\n            let valueColumns = options.valueColumns;\r\n            for (let valueColumn of valueColumns) {\r\n                this.measureColumns.push(valueColumn.source);\r\n            }\r\n\r\n            this.data = options.data;\r\n\r\n            return this;\r\n        }\r\n\r\n        private fillData(dataViewValues: DataViewValueColumns, groups: DataViewMetadataColumn[]) {\r\n            let categoryColumn = _.first(this.categories);\r\n            let categoryLength = (categoryColumn && categoryColumn.values) ? categoryColumn.values.length : 1;\r\n\r\n            if (this.hasDynamicSeries) {\r\n                // Dynamic series\r\n                let data = <DataViewBuilderSeriesData[][]>this.data;\r\n                for (let seriesIndex = 0; seriesIndex < this.dynamicSeriesMetadata.values.length; seriesIndex++) {\r\n                    let seriesMeasures = data[seriesIndex];\r\n                    debug.assert(seriesMeasures.length === this.measureColumns.length, 'seriesMeasures.length === this.measureColumns.length');\r\n\r\n                    for (let measureIndex = 0, measuresLen = this.measureColumns.length; measureIndex < measuresLen; measureIndex++) {\r\n                        let groupIndex = seriesIndex * measuresLen + measureIndex;\r\n\r\n                        applySeriesData(dataViewValues[groupIndex], seriesMeasures[measureIndex], categoryLength);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Static series\r\n                let data = <DataViewBuilderValuesColumnOptions[]>this.data;\r\n                for (let measureIndex = 0, measuresLen = this.measureColumns.length; measureIndex < measuresLen; measureIndex++) {\r\n                    applySeriesData(dataViewValues[measureIndex], data[measureIndex], categoryLength);\r\n                }\r\n            }\r\n        }\r\n\r\n        public build(): DataView {\r\n            let metadataColumns: DataViewMetadataColumn[] = [];\r\n            let categorical: DataViewCategorical = {};\r\n            let groups: DataViewMetadataColumn[];\r\n\r\n            let categoryMetadata = this.categories;\r\n            let dynamicSeriesMetadata = this.dynamicSeriesMetadata;\r\n\r\n            // --- Build metadata columns and value groups ---\r\n            for (let columnMetadata of categoryMetadata) {\r\n                pushIfNotExists(metadataColumns, columnMetadata.source);\r\n            }\r\n\r\n            if (this.hasDynamicSeries) {\r\n                pushIfNotExists(metadataColumns, dynamicSeriesMetadata.column);\r\n            }\r\n\r\n            if (this.hasDynamicSeries) {\r\n                // Dynamic series\r\n                categorical.values = DataViewTransform.createValueColumns([], dynamicSeriesMetadata.identityFrom.fields, dynamicSeriesMetadata.column);\r\n\r\n                let measures = this.measureColumns;\r\n                groups = [];\r\n\r\n                // For each series value we will make one column per measure\r\n                let seriesValues = dynamicSeriesMetadata.values;\r\n                for (let seriesIndex = 0; seriesIndex < seriesValues.length; seriesIndex++) {\r\n                    let seriesValue = seriesValues[seriesIndex];\r\n                    let seriesIdentity = getScopeIdentity(dynamicSeriesMetadata.identityFrom, seriesIndex, seriesValue, dynamicSeriesMetadata.column.type);\r\n\r\n                    for (let measure of measures) {\r\n                        let column = _.clone(measure);\r\n                        column.groupName = <string>seriesValue;\r\n                        groups.push(column);\r\n\r\n                        pushIfNotExists(metadataColumns, column);\r\n                        categorical.values.push({\r\n                            source: column,\r\n                            values: [],\r\n                            identity: seriesIdentity,\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Static series / no series\r\n                categorical.values = DataViewTransform.createValueColumns();\r\n                groups = this.measureColumns;\r\n                for (let measure of groups) {\r\n                    let column = measure;\r\n                    pushIfNotExists(metadataColumns, column);\r\n                    categorical.values.push({\r\n                        source: column,\r\n                        values: [],\r\n                    });\r\n                }\r\n            }\r\n\r\n            let categories = this.categories;\r\n            if (!_.isEmpty(categories))\r\n                categorical.categories = categories;\r\n\r\n            // --- Fill in data point values ---\r\n            this.fillData(categorical.values, groups);\r\n\r\n            return {\r\n                metadata: {\r\n                    columns: metadataColumns,\r\n                },\r\n                categorical: categorical,\r\n            };\r\n        }\r\n    }\r\n\r\n    function getScopeIdentity(\r\n        source: DataViewBuilderColumnIdentitySource,\r\n        index: number,\r\n        value: PrimitiveValue,\r\n        valueType: ValueTypeDescriptor): DataViewScopeIdentity {\r\n        let identities = source.identities;\r\n        if (identities) {\r\n            return identities[index];\r\n        }\r\n\r\n        debug.assert(source.fields && source.fields.length === 1, 'Inferring identity, expect exactly one field.');\r\n\r\n        return createDataViewScopeIdentity(\r\n            SQExprBuilder.equal(\r\n                source.fields[0],\r\n                SQExprBuilder.typedConstant(value, valueType)));\r\n    }\r\n\r\n    function pushIfNotExists(items: DataViewMetadataColumn[], itemToAdd: DataViewMetadataColumn): void {\r\n        if (_.contains(items, itemToAdd))\r\n            return;\r\n\r\n        items.push(itemToAdd);\r\n    }\r\n\r\n    function applySeriesData(target: DataViewValueColumn, source: DataViewBuilderSeriesData, categoryLength: number): void {\r\n        debug.assertValue(target, 'target');\r\n        debug.assertValue(source, 'source');\r\n        debug.assertValue(categoryLength, 'categoryLength');\r\n\r\n        let values = source.values;\r\n        debug.assert(categoryLength === values.length, 'categoryLength === values.length');\r\n\r\n        target.values = values;\r\n\r\n        let highlights = source.highlights;\r\n        if (highlights) {\r\n            debug.assert(categoryLength === highlights.length, 'categoryLength === highlights.length');\r\n\r\n            target.highlights = highlights;\r\n        }\r\n\r\n        if (source.minLocal !== undefined)\r\n            target.minLocal = source.minLocal;\r\n\r\n        if (source.maxLocal !== undefined)\r\n            target.maxLocal = source.maxLocal;\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    import SQExpr = powerbi.data.SQExpr;\r\n\r\n    export function createStaticEvalContext(colorAllocatorCache?: IColorAllocatorCache): IEvalContext;\r\n    export function createStaticEvalContext(colorAllocatorCache: IColorAllocatorCache, dataView: DataView, selectTransforms: DataViewSelectTransform[]): IEvalContext;\r\n    export function createStaticEvalContext(colorAllocatorCache: IColorAllocatorCache, dataView?: DataView, selectTransforms?: DataViewSelectTransform[]): IEvalContext {\r\n        return new StaticEvalContext(\r\n            colorAllocatorCache || createColorAllocatorCache(),\r\n            dataView || { metadata: { columns: [] } },\r\n            selectTransforms);\r\n    }\r\n\r\n    /**\r\n     * Represents an eval context over a potentially empty DataView.  Only static repetition data view objects\r\n     * are supported.\r\n     */\r\n    class StaticEvalContext implements IEvalContext {\r\n        private colorAllocatorCache: IColorAllocatorCache;\r\n        private dataView: DataView;\r\n        private selectTransforms: DataViewSelectTransform[];\r\n\r\n        constructor(colorAllocatorCache: IColorAllocatorCache, dataView: DataView, selectTransforms: DataViewSelectTransform[]) {\r\n            debug.assertValue(colorAllocatorCache, 'colorAllocatorCache');\r\n            debug.assertValue(dataView, 'dataView');\r\n            debug.assertAnyValue(selectTransforms, 'selectTransforms');\r\n\r\n            this.colorAllocatorCache = colorAllocatorCache;\r\n            this.dataView = dataView;\r\n            this.selectTransforms = selectTransforms;\r\n        }\r\n\r\n        public getColorAllocator(expr: SQFillRuleExpr): IColorAllocator {\r\n            return this.colorAllocatorCache.get(expr);\r\n        }\r\n\r\n        public getExprValue(expr: SQExpr): PrimitiveValue {\r\n            let dataView = this.dataView,\r\n                selectTransforms = this.selectTransforms;\r\n            if (dataView && dataView.table && selectTransforms)\r\n                return getExprValueFromTable(expr, selectTransforms, dataView.table, /*rowIdx*/ 0);\r\n        }\r\n\r\n        public getRoleValue(roleName: string): PrimitiveValue {\r\n            return;\r\n        }\r\n    }\r\n\r\n    export function getExprValueFromTable(expr: SQExpr, selectTransforms: DataViewSelectTransform[], table: DataViewTable, rowIdx: number): PrimitiveValue {\r\n        debug.assertValue(expr, 'expr');\r\n        debug.assertValue(selectTransforms, 'selectTransforms');\r\n        debug.assertValue(table, 'table');\r\n        debug.assertValue(rowIdx, 'rowIdx');\r\n\r\n        let rows = table.rows;\r\n        if (_.isEmpty(rows) || rows.length <= rowIdx)\r\n            return;\r\n\r\n        let cols = table.columns;\r\n        for (let selectIdx = 0, selectLen = selectTransforms.length; selectIdx < selectLen; selectIdx++) {\r\n            let selectTransform = selectTransforms[selectIdx];\r\n            if (!SQExpr.equals(selectTransform.expr, expr) || !selectTransform.queryName)\r\n                continue;\r\n\r\n            for (let colIdx = 0, colLen = cols.length; colIdx < colLen; colIdx++) {\r\n                if (selectIdx !== cols[colIdx].index)\r\n                    continue;\r\n\r\n                return rows[rowIdx][colIdx];\r\n            }\r\n        }\r\n\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    export function createMatrixEvalContext(colorAllocatorProvider: IColorAllocatorCache, dataViewMatrix: DataViewMatrix): IEvalContext {\r\n        // NOTE: Matrix context-sensitive evaluation is not yet implemented.\r\n        return createStaticEvalContext(colorAllocatorProvider);\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved.\r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *\r\n *  The above copyright notice and this permission notice shall be included in\r\n *  all copies or substantial portions of the Software.\r\n *\r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi {\r\n\r\n    import StringExtensions = jsCommon.StringExtensions;\r\n    import Formatting = jsCommon.Formatting;\r\n    import RegExpExtensions = jsCommon.RegExpExtensions;\r\n\r\n    /** Culture interfaces. These match the Globalize library interfaces intentionally. */\r\n    export interface Culture {\r\n        name: string;\r\n        calendar: Calendar;\r\n        calendars: CalendarDictionary;\r\n        numberFormat: NumberFormatInfo;\r\n    }\r\n\r\n    export interface Calendar {\r\n        patterns: any;\r\n        firstDay: number;\r\n    }\r\n\r\n    export interface CalendarDictionary {\r\n        [key: string]: Calendar;\r\n    }\r\n\r\n    export interface NumberFormatInfo {\r\n        decimals: number;\r\n        groupSizes: number[];\r\n        negativeInfinity: string;\r\n        positiveInfinity: string;\r\n    }\r\n\r\n    /**\r\n     *  Creating a dummy module to declare cultureInfo string, so we could do a strongly typed usage in Visuals\r\n     */\r\n    declare module powerbi.common {\r\n        let cultureInfo: string;\r\n    }\r\n\r\n    /** Formatting Encoder */\r\n    module FormattingEncoder {\r\n        export function preserveEscaped(format: string, specialChars: string): string {\r\n            // Unicode U+E000 - U+F8FF is a private area and so we can use the chars from the range to encode the escaped sequences\r\n            let length = specialChars.length;\r\n            for (let i = 0; i < length; i++) {\r\n                let oldText = \"\\\\\" + specialChars[i];\r\n                let newText = String.fromCharCode(0xE000 + i);\r\n                format = StringExtensions.replaceAll(format, oldText, newText);\r\n            }\r\n            return format;\r\n        }\r\n\r\n        export function restoreEscaped(format: string, specialChars: string): string {\r\n            // After formatting is complete we should restore the encoded escaped chars into the unescaped chars\r\n            let length = specialChars.length;\r\n            for (let i = 0; i < length; i++) {\r\n                let oldText = String.fromCharCode(0xE000 + i);\r\n                let newText = specialChars[i];\r\n                format = StringExtensions.replaceAll(format, oldText, newText);\r\n            }\r\n            return StringExtensions.replaceAll(format, \"\\\\\", \"\");\r\n        }\r\n\r\n        export function preserveLiterals(format: string, literals: string[]): string {\r\n            // Unicode U+E000 - U+F8FF is a private area and so we can use the chars from the range to encode the escaped sequences\r\n            format = StringExtensions.replaceAll(format, \"\\\"\", \"'\");\r\n            for (let i = 0; ; i++) {\r\n                let fromIndex = format.indexOf(\"'\");\r\n                if (fromIndex < 0) {\r\n                    break;\r\n                }\r\n                let toIndex = format.indexOf(\"'\", fromIndex + 1);\r\n                if (toIndex < 0) {\r\n                    break;\r\n                }\r\n                let literal = format.substring(fromIndex, toIndex + 1);\r\n                literals.push(literal.substring(1, toIndex - fromIndex));\r\n                let token = String.fromCharCode(0xE100 + i);\r\n                format = format.replace(literal, token);\r\n            }\r\n            return format;\r\n        }\r\n\r\n        export function restoreLiterals(format: string, literals: string[]): string {\r\n            let count = literals.length;\r\n            for (let i = 0; i < count; i++) {\r\n                let token = String.fromCharCode(0xE100 + i);\r\n                let literal = literals[i];\r\n                format = format.replace(token, literal);\r\n            }\r\n            return format;\r\n        }\r\n    }\r\n\r\n    const IndexedTokensRegex = /({{)|(}})|{(\\d+[^}]*)}/g;\r\n    const ZeroPlaceholder = '0';\r\n    const DigitPlaceholder = '#';\r\n    const ExponentialFormatChar = 'E';\r\n    const NumericPlaceholders = [ZeroPlaceholder, DigitPlaceholder];\r\n    const NumericPlaceholderRegex = new RegExp(NumericPlaceholders.join('|'), 'g');\r\n\r\n    /** Formatting Service */\r\n    class FormattingService implements IFormattingService {\r\n\r\n        _currentCultureSelector: string;\r\n        _currentCulture: Culture;\r\n        _dateTimeScaleFormatInfo: DateTimeScaleFormatInfo;\r\n\r\n        public formatValue(value: any, format?: string, culture?: string): string {\r\n            // Handle special cases\r\n            if (value === undefined || value === null) {\r\n                return '';\r\n            }\r\n            let gculture = this.getCulture(culture);\r\n\r\n            if (DateTimeFormat.canFormat(value)) {\r\n                // Dates\r\n                return DateTimeFormat.format(value, format, gculture);\r\n            } else if (NumberFormat.canFormat(value)) {\r\n                // Numbers\r\n                return NumberFormat.format(value, format, gculture);\r\n            } else {\r\n                // Other data types - return as string\r\n                return value.toString();\r\n            }\r\n        }\r\n\r\n        public format(formatWithIndexedTokens: string, args: any[], culture?: string): string {\r\n            if (!formatWithIndexedTokens) {\r\n                return \"\";\r\n            }\r\n            let result = formatWithIndexedTokens.replace(IndexedTokensRegex, (match: string, left: string, right: string, argToken: string) => {\r\n                if (left) {\r\n                    return \"{\";\r\n                } else if (right) {\r\n                    return \"}\";\r\n                } else {\r\n                    let parts = argToken.split(\":\");\r\n                    let argIndex = parseInt(parts[0], 10);\r\n                    let argFormat = parts[1];\r\n                    return this.formatValue(args[argIndex], argFormat, culture);\r\n                }\r\n            });\r\n\r\n            return result;\r\n        }\r\n\r\n        public isStandardNumberFormat(format: string): boolean {\r\n            return NumberFormat.isStandardFormat(format);\r\n        }\r\n\r\n        public formatNumberWithCustomOverride(value: number, format: string, nonScientificOverrideFormat: string, culture?: string): string {\r\n            let gculture = this.getCulture(culture);\r\n\r\n            return NumberFormat.formatWithCustomOverride(value, format, nonScientificOverrideFormat, gculture);\r\n        }\r\n\r\n        public dateFormatString(unit: DateTimeUnit): string {\r\n            if (!this._dateTimeScaleFormatInfo)\r\n                this.initialize();\r\n            return this._dateTimeScaleFormatInfo.getFormatString(unit);\r\n        }\r\n\r\n        /**\r\n         * Sets the current localization culture\r\n         * @param cultureSelector - name of a culture: \"en\", \"en-UK\", \"fr-FR\" etc. (See National Language Support (NLS) for full lists. Use \"default\" for invariant culture).\r\n         */\r\n        private setCurrentCulture(cultureSelector: string): void {\r\n            if (this._currentCultureSelector !== cultureSelector) {\r\n                this._currentCulture = this.getCulture(cultureSelector);\r\n                this._currentCultureSelector = cultureSelector;\r\n                this._dateTimeScaleFormatInfo = new DateTimeScaleFormatInfo(this._currentCulture);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Gets the culture assotiated with the specified cultureSelector (\"en\", \"en-US\", \"fr-FR\" etc).\r\n         * @param cultureSelector - name of a culture: \"en\", \"en-UK\", \"fr-FR\" etc. (See National Language Support (NLS) for full lists. Use \"default\" for invariant culture).\r\n         * Exposing this function for testability of unsupported cultures\r\n         */\r\n        public getCulture(cultureSelector?: string): Culture {\r\n            if (cultureSelector == null) {\r\n                if (this._currentCulture == null) {\r\n                    this.initialize();\r\n                }\r\n                return this._currentCulture;\r\n            } else {\r\n                let culture = Globalize.findClosestCulture(cultureSelector);\r\n                if (!culture)\r\n                    culture = Globalize.culture(\"en-US\");\r\n                return culture;\r\n            }\r\n        }\r\n\r\n        /** By default the Globalization module initializes to the culture/calendar provided in the language/culture URL params */\r\n        private initialize() {\r\n            let cultureName = this.getCurrentCulture();\r\n            this.setCurrentCulture(cultureName);\r\n            let calendarName = this.getUrlParam(\"calendar\");\r\n            if (calendarName) {\r\n                let culture = this._currentCulture;\r\n                let c = culture.calendars[calendarName];\r\n                if (c) {\r\n                    culture.calendar = c;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         *  Exposing this function for testability \r\n         */\r\n        public getCurrentCulture(): string {\r\n            let urlParam = this.getUrlParam(\"language\");\r\n\r\n            if (urlParam) {\r\n                return urlParam;\r\n            }\r\n\r\n            if (powerbi && powerbi.common && powerbi.common.cultureInfo) {\r\n                // Get cultureInfo set in powerbi\r\n                return powerbi.common.cultureInfo;\r\n            }\r\n\r\n            return window.navigator.userLanguage || window.navigator[\"language\"] || Globalize.culture().name;\r\n        }\r\n\r\n        /**\r\n         *  Exposing this function for testability\r\n         *  @param name: queryString name\r\n         */\r\n        public getUrlParam(name: string): string {\r\n            let param = window.location.search.match(RegExp(\"[?&]\" + name + \"=([^&]*)\"));\r\n            return param ? param[1] : undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * DateTimeFormat module contains the static methods for formatting the DateTimes.\r\n     * It extends the JQuery.Globalize functionality to support complete set of .NET\r\n     * formatting expressions for dates.\r\n     */\r\n    module DateTimeFormat {\r\n\r\n        let _currentCachedFormat: string;\r\n        let _currentCachedProcessedFormat: string;\r\n\r\n        /** Evaluates if the value can be formatted using the NumberFormat */\r\n        export function canFormat(value: any) {\r\n            let result = value instanceof Date;\r\n            return result;\r\n        }\r\n\r\n        /** Formats the date using provided format and culture */\r\n        export function format(value: Date, format: string, culture: Culture): string {\r\n            format = format || \"G\";\r\n            let isStandard = format.length === 1;\r\n            try {\r\n                if (isStandard) {\r\n                    return formatDateStandard(value, format, culture);\r\n                } else {\r\n                    return formatDateCustom(value, format, culture);\r\n                }\r\n            } catch (e) {\r\n                return formatDateStandard(value, \"G\", culture);\r\n            }\r\n        }\r\n\r\n        /** Formats the date using standard format expression */\r\n        function formatDateStandard(value: Date, format: string, culture: Culture) {\r\n            // In order to provide parity with .NET we have to support additional set of DateTime patterns.\r\n            let patterns = culture.calendar.patterns;\r\n            // Extend supported set of patterns\r\n            ensurePatterns(culture.calendar);\r\n            // Handle extended set of formats\r\n            let output = Formatting.findDateFormat(value, format, culture.name);\r\n            if (output.format.length === 1)\r\n                format = patterns[output.format];\r\n            else\r\n                format = output.format;\r\n            //need to revisit when globalization is enabled\r\n            culture = Globalize.culture(\"en-US\");\r\n            return Globalize.format(output.value, format, culture);\r\n        }\r\n\r\n        /** Formats the date using custom format expression */\r\n        function formatDateCustom(value: Date, format: string, culture: Culture): string {\r\n            let result: string;\r\n            let literals: string[] = [];\r\n            format = FormattingEncoder.preserveEscaped(format, \"\\\\dfFghHKmstyz:/%'\\\"\");\r\n            format = FormattingEncoder.preserveLiterals(format, literals);\r\n            format = StringExtensions.replaceAll(format, \"\\\"\", \"'\");\r\n            if (format.indexOf(\"F\") > -1) {\r\n                // F is not supported so we need to replace the F with f based on the milliseconds\r\n                // Replace all sequences of F longer than 3 with \"FFF\"\r\n                format = StringExtensions.replaceAll(format, \"FFFF\", \"FFF\");\r\n                // Based on milliseconds update the format to use fff\r\n                let milliseconds = value.getMilliseconds();\r\n                if (milliseconds % 10 >= 1) {\r\n                    format = StringExtensions.replaceAll(format, \"FFF\", \"fff\");\r\n                }\r\n                format = StringExtensions.replaceAll(format, \"FFF\", \"FF\");\r\n                if ((milliseconds % 100) / 10 >= 1) {\r\n                    format = StringExtensions.replaceAll(format, \"FF\", \"ff\");\r\n                }\r\n                format = StringExtensions.replaceAll(format, \"FF\", \"F\");\r\n                if ((milliseconds % 1000) / 100 >= 1) {\r\n                    format = StringExtensions.replaceAll(format, \"F\", \"f\");\r\n                }\r\n                format = StringExtensions.replaceAll(format, \"F\", \"\");\r\n                if (format === \"\" || format === \"%\")\r\n                    return \"\";\r\n            }\r\n            format = processCustomDateTimeFormat(format);\r\n            result = Globalize.format(value, format, culture);\r\n            result = localize(result, culture.calendar);\r\n            result = FormattingEncoder.restoreLiterals(result, literals);\r\n            result = FormattingEncoder.restoreEscaped(result, \"\\\\dfFghHKmstyz:/%'\\\"\");\r\n            return result;\r\n        }\r\n\r\n        /** Translates unsupported .NET custom format expressions to the custom expressions supported by JQuery.Globalize */\r\n        function processCustomDateTimeFormat(format: string): string {\r\n            if (format === _currentCachedFormat) {\r\n                return _currentCachedProcessedFormat;\r\n            }\r\n            _currentCachedFormat = format;\r\n            format = Formatting.fixDateTimeFormat(format);\r\n            _currentCachedProcessedFormat = format;\r\n            return format;\r\n        }\r\n\r\n        /** Localizes the time separator symbol */\r\n        function localize(value: string, dictionary: any): string {\r\n            let timeSeparator = dictionary[\":\"];\r\n            if (timeSeparator === \":\") {\r\n                return value;\r\n            }\r\n            let result = \"\";\r\n            let count = value.length;\r\n            for (let i = 0; i < count; i++) {\r\n                let char = value.charAt(i);\r\n                switch (char) {\r\n                    case \":\":\r\n                        result += timeSeparator;\r\n                        break;\r\n                    default:\r\n                        result += char;\r\n                        break;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        function ensurePatterns(calendar: GlobalizeCalendar) {\r\n            let patterns = calendar.patterns;\r\n            if (patterns[\"g\"] === undefined) {\r\n                patterns[\"g\"] = patterns[\"f\"].replace(patterns[\"D\"], patterns[\"d\"]);  // Generic: Short date, short time\r\n                patterns[\"G\"] = patterns[\"F\"].replace(patterns[\"D\"], patterns[\"d\"]);  // Generic: Short date, long time\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * NumberFormat module contains the static methods for formatting the numbers.\r\n     * It extends the JQuery.Globalize functionality to support complete set of .NET\r\n     * formatting expressions for numeric types including custom formats.\r\n     */\r\n    export module NumberFormat {\r\n\r\n        const NonScientificFormatRegex = /^\\{.+\\}.*/;\r\n        const NumericalPlaceHolderRegex = /\\{.+\\}/;\r\n        const ScientificFormatRegex = /e[+-]*[0#]+/i;\r\n        const StandardFormatRegex = /^[a-z]\\d{0,2}$/i; // a letter + up to 2 digits for precision specifier\r\n        const TrailingZerosRegex = /0+$/;\r\n        const DecimalFormatRegex = /\\.([0#]*)/g;\r\n        const NumericFormatRegex = /[0#,\\.]+[0,#]*/g;\r\n        const LastNumericPlaceholderRegex = /(0|#)([^(0|#)]*)$/;\r\n        const DecimalFormatCharacter = '.';\r\n\r\n        export const NumberFormatComponentsDelimeter = ';';\r\n\r\n        export interface NumericFormatMetadata {\r\n            format: string;\r\n            hasEscapes: boolean;\r\n            hasQuotes: boolean;\r\n            hasE: boolean;\r\n            hasCommas: boolean;\r\n            hasDots: boolean;\r\n            hasPercent: boolean;\r\n            hasPermile: boolean;\r\n            precision: number;\r\n            scale: number;\r\n        }\r\n\r\n        export interface NumberFormatComponents {\r\n            hasNegative: boolean;\r\n            positive: string;\r\n            negative: string;\r\n            zero: string;\r\n        }\r\n\r\n        function getNonScientificFormatWithPrecision(baseFormat: string, numericFormat: string): string {\r\n            if (!numericFormat || baseFormat === undefined)\r\n                return baseFormat;\r\n\r\n            let newFormat = \"{0:\" + numericFormat + \"}\";\r\n\r\n            return baseFormat.replace(\"{0}\", newFormat);\r\n        }\r\n\r\n        export function getNumericFormat(value: number, baseFormat: string): string {\r\n            if (baseFormat == null)\r\n                return baseFormat;\r\n\r\n            if (hasFormatComponents(baseFormat)) {\r\n                let {positive, negative, zero} = NumberFormat.getComponents(baseFormat);\r\n\r\n                if (value > 0)\r\n                    return getNumericFormatFromComponent(value, positive);\r\n                else if (value === 0)\r\n                    return getNumericFormatFromComponent(value, zero);\r\n\r\n                return getNumericFormatFromComponent(value, negative);\r\n            }\r\n\r\n            return getNumericFormatFromComponent(value, baseFormat);\r\n        }\r\n\r\n        function getNumericFormatFromComponent(value: number, format: string): string {\r\n            let match = RegExpExtensions.run(NumericFormatRegex, format);\r\n            if (match)\r\n                return match[0];\r\n\r\n            return format;\r\n        }\r\n\r\n        export function addDecimalsToFormat(baseFormat: string, decimals: number, trailingZeros: boolean): string {\r\n            if (decimals == null)\r\n                return baseFormat;\r\n\r\n            // Default format string\r\n            if (baseFormat == null)\r\n                baseFormat = ZeroPlaceholder;\r\n\r\n            if (hasFormatComponents(baseFormat)) {\r\n                let {positive, negative, zero} = NumberFormat.getComponents(baseFormat);\r\n                let formats = [positive, negative, zero];\r\n                for (let i = 0; i < formats.length; i++) {\r\n                    // Update format in formats array\r\n                    formats[i] = addDecimalsToFormatComponent(formats[i], decimals, trailingZeros);\r\n                }\r\n\r\n                return formats.join(NumberFormat.NumberFormatComponentsDelimeter);\r\n            }\r\n\r\n            return addDecimalsToFormatComponent(baseFormat, decimals, trailingZeros);\r\n        }\r\n\r\n        function addDecimalsToFormatComponent(format: string, decimals: number, trailingZeros: boolean): string {\r\n            decimals = Math.abs(decimals);\r\n\r\n            if (decimals >= 0) {\r\n                let placeholder = trailingZeros ? ZeroPlaceholder : DigitPlaceholder;\r\n                let decimalPlaceholders = StringExtensions.repeat(placeholder, Math.abs(decimals));\r\n\r\n                let match = RegExpExtensions.run(DecimalFormatRegex, format);\r\n                if (match) {\r\n                    let beforeDecimal = format.substr(0, match.index);\r\n                    let formatDecimal = format.substr(match.index + 1, match[1].length);\r\n                    let afterDecimal = format.substr(match.index + match[0].length);\r\n\r\n                    if (trailingZeros)\r\n                        // Use explicit decimals argument as placeholders\r\n                        formatDecimal = decimalPlaceholders;\r\n                    else {\r\n                        let decimalChange = decimalPlaceholders.length - formatDecimal.length;\r\n                        if (decimalChange > 0)\r\n                            // Append decimalPlaceholders to existing decimal portion of format string\r\n                            formatDecimal = formatDecimal + decimalPlaceholders.slice(-decimalChange);\r\n                        else if (decimalChange < 0)\r\n                            // Remove decimals from formatDecimal\r\n                            formatDecimal = formatDecimal.slice(0, decimalChange);\r\n                    }\r\n\r\n                    if (formatDecimal.length > 0)\r\n                        formatDecimal = DecimalFormatCharacter + formatDecimal;\r\n\r\n                    return beforeDecimal + formatDecimal + afterDecimal;\r\n                }\r\n                else if (decimalPlaceholders.length > 0)\r\n                    // Replace last numeric placeholder with decimal portion\r\n                    return format.replace(LastNumericPlaceholderRegex, '$1' + DecimalFormatCharacter + decimalPlaceholders);\r\n            }\r\n\r\n            return format;\r\n        }\r\n\r\n        export function hasFormatComponents(format: string): boolean {\r\n            return format.indexOf(NumberFormat.NumberFormatComponentsDelimeter) !== -1;\r\n        }\r\n\r\n        export function getComponents(format: string): NumberFormatComponents {\r\n            let signFormat: NumberFormatComponents = {\r\n                hasNegative: false,\r\n                positive: format,\r\n                negative: format,\r\n                zero: format,\r\n            };\r\n\r\n            let signSpecificFormats = format.split(NumberFormatComponentsDelimeter);\r\n            let formatCount = signSpecificFormats.length;\r\n            debug.assert(!(formatCount > 3), 'format string should be of form positive[;negative;zero]');\r\n\r\n            if (formatCount > 1) {\r\n                signFormat.hasNegative = true;\r\n\r\n                signFormat.positive = signFormat.zero = signSpecificFormats[0];\r\n                signFormat.negative = signSpecificFormats[1];\r\n\r\n                if (formatCount > 2)\r\n                    signFormat.zero = signSpecificFormats[2];\r\n            }\r\n\r\n            return signFormat;\r\n        }\r\n\r\n        let _lastCustomFormatMeta: NumericFormatMetadata;\r\n\r\n        /** Evaluates if the value can be formatted using the NumberFormat */\r\n        export function canFormat(value: any) {\r\n            let result = typeof (value) === \"number\";\r\n            return result;\r\n        }\r\n\r\n        export function isStandardFormat(format: string): boolean {\r\n            debug.assertValue(format, 'format');\r\n            return StandardFormatRegex.test(format);\r\n        }\r\n\r\n        /** Formats the number using specified format expression and culture */\r\n        export function format(\r\n            value: number,\r\n            format: string,\r\n            culture: Culture): string {\r\n            format = format || \"G\";\r\n            try {\r\n                if (isStandardFormat(format))\r\n                    return formatNumberStandard(value, format, culture);\r\n\r\n                return formatNumberCustom(value, format, culture);\r\n            } catch (e) {\r\n                return Globalize.format(value, undefined, culture);\r\n            }\r\n        }\r\n\r\n        /** Performs a custom format with a value override.  Typically used for custom formats showing scaled values. */\r\n        export function formatWithCustomOverride(\r\n            value: number,\r\n            format: string,\r\n            nonScientificOverrideFormat: string,\r\n            culture: Culture): string {\r\n            debug.assertValue(value, 'value');\r\n            debug.assertValue(format, 'format');\r\n            debug.assertValue(nonScientificOverrideFormat, 'nonScientificOverrideFormat');\r\n            debug.assertValue(culture, 'culture');\r\n            debug.assert(!isStandardFormat(format), 'Standard format');\r\n\r\n            return formatNumberCustom(value, format, culture, nonScientificOverrideFormat);\r\n        }\r\n\r\n        /** Formats the number using standard format expression */\r\n        function formatNumberStandard(value: number, format: string, culture: Culture): string {\r\n            let result: string;\r\n            let precision = <number>(format.length > 1 ? parseInt(format.substr(1, format.length - 1), 10) : undefined);\r\n            let numberFormatInfo = culture.numberFormat;\r\n            let formatChar = format.charAt(0);\r\n            switch (formatChar) {\r\n                case \"e\":\r\n                case \"E\":\r\n                    if (precision === undefined) {\r\n                        precision = 6;\r\n                    }\r\n                    let mantissaDecimalDigits = StringExtensions.repeat(\"0\", precision);\r\n                    format = \"0.\" + mantissaDecimalDigits + formatChar + \"+000\";\r\n                    result = formatNumberCustom(value, format, culture);\r\n                    break;\r\n                case \"f\":\r\n                case \"F\":\r\n                    result = precision !== undefined ? value.toFixed(precision) : value.toFixed(numberFormatInfo.decimals);\r\n                    result = localize(result, numberFormatInfo);\r\n                    break;\r\n                case \"g\":\r\n                case \"G\":\r\n                    let abs = Math.abs(value);\r\n                    if (abs === 0 || (1E-4 <= abs && abs < 1E15)) {\r\n                        // For the range of 0.0001 to 1,000,000,000,000,000 - use the normal form\r\n                        result = precision !== undefined ? value.toPrecision(precision) : value.toString();\r\n                    } else {\r\n                        // Otherwise use exponential\r\n                        // Assert that value is a number and fall back on returning value if it is not\r\n                        debug.assert(typeof (value) === \"number\", \"value must be a number\");\r\n                        if (typeof (value) !== \"number\")\r\n                            return String(value);\r\n                        result = precision !== undefined ? value.toExponential(precision) : value.toExponential();\r\n                        result = result.replace(\"e\", \"E\");\r\n                    }\r\n                    result = localize(result, numberFormatInfo);\r\n                    break;\r\n                case \"r\":\r\n                case \"R\":\r\n                    result = value.toString();\r\n                    result = localize(result, numberFormatInfo);\r\n                    break;\r\n                case \"x\":\r\n                case \"X\":\r\n                    result = value.toString(16);\r\n                    if (formatChar === \"X\") {\r\n                        result = result.toUpperCase();\r\n                    }\r\n                    if (precision !== undefined) {\r\n                        let actualPrecision = result.length;\r\n                        let isNegative = value < 0;\r\n                        if (isNegative) {\r\n                            actualPrecision--;\r\n                        }\r\n                        let paddingZerosCount = precision - actualPrecision;\r\n                        let paddingZeros = undefined;\r\n                        if (paddingZerosCount > 0) {\r\n                            paddingZeros = StringExtensions.repeat(\"0\", paddingZerosCount);\r\n                        }\r\n                        if (isNegative) {\r\n                            result = \"-\" + paddingZeros + result.substr(1);\r\n                        } else {\r\n                            result = paddingZeros + result;\r\n                        }\r\n                    }\r\n                    result = localize(result, numberFormatInfo);\r\n                    break;\r\n                default:\r\n                    result = Globalize.format(value, format, culture);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        /** Formats the number using custom format expression */\r\n        function formatNumberCustom(\r\n            value: number,\r\n            format: string,\r\n            culture: Culture,\r\n            nonScientificOverrideFormat?: string): string {\r\n            let result: string;\r\n            let numberFormatInfo = culture.numberFormat;\r\n            if (isFinite(value)) {\r\n                // Split format by positive[;negative;zero] pattern\r\n                let formatComponents = getComponents(format);\r\n\r\n                // Pick a format based on the sign of value\r\n                if (value > 0) {\r\n                    format = formatComponents.positive;\r\n                } else if (value === 0) {\r\n                    format = formatComponents.zero;\r\n                } else {\r\n                    format = formatComponents.negative;\r\n                }\r\n\r\n                // Normalize value if we have an explicit negative format\r\n                if (formatComponents.hasNegative)\r\n                    value = Math.abs(value);\r\n\r\n                // Get format metadata\r\n                let formatMeta = getCustomFormatMetadata(format, true /*calculatePrecision*/);\r\n\r\n                // Preserve literals and escaped chars\r\n                if (formatMeta.hasEscapes) {\r\n                    format = FormattingEncoder.preserveEscaped(format, \"\\\\0#.,%‰\");\r\n                }\r\n                let literals: string[] = [];\r\n                if (formatMeta.hasQuotes) {\r\n                    format = FormattingEncoder.preserveLiterals(format, literals);\r\n                }\r\n\r\n                // Scientific format\r\n                if (formatMeta.hasE && !nonScientificOverrideFormat) {\r\n                    let scientificMatch = RegExpExtensions.run(ScientificFormatRegex, format);\r\n                    if (scientificMatch) {\r\n                        // Case 2.1. Scientific custom format\r\n                        let formatM = format.substr(0, scientificMatch.index);\r\n                        let formatE = format.substr(scientificMatch.index + 2); // E(+|-)\r\n                        let precision = getCustomFormatPrecision(formatM, formatMeta);\r\n                        let scale = getCustomFormatScale(formatM, formatMeta);\r\n                        if (scale !== 1) {\r\n                            value = value * scale;\r\n                        }\r\n                        // Assert that value is a number and fall back on returning value if it is not\r\n                        debug.assert(typeof (value) === \"number\", \"value must be a number\");\r\n                        if (typeof (value) !== \"number\")\r\n                            return String(value);\r\n                        let s = value.toExponential(precision);\r\n                        let indexOfE = s.indexOf(\"e\");\r\n                        let mantissa = s.substr(0, indexOfE);\r\n                        let exp = s.substr(indexOfE + 1);\r\n                        let resultM = fuseNumberWithCustomFormat(mantissa, formatM, numberFormatInfo);\r\n                        let resultE = fuseNumberWithCustomFormat(exp, formatE, numberFormatInfo);\r\n                        if (resultE.charAt(0) === \"+\" && scientificMatch[0].charAt(1) !== \"+\") {\r\n                            resultE = resultE.substr(1);\r\n                        }\r\n                        let e = scientificMatch[0].charAt(0);\r\n                        result = resultM + e + resultE;\r\n                    }\r\n                }\r\n\r\n                // Non scientific format\r\n                if (result === undefined) {\r\n                    let valueFormatted: string;\r\n                    let isValueGlobalized: boolean = false;\r\n                    let precision = getCustomFormatPrecision(format, formatMeta);\r\n                    let scale = getCustomFormatScale(format, formatMeta);\r\n\r\n                    if (scale !== 1)\r\n                        value = value * scale;\r\n\r\n                    // Rounding\r\n                    value = parseFloat(toNonScientific(value, precision));\r\n\r\n                    if (nonScientificOverrideFormat) {\r\n                        // Get numeric format from format string\r\n                        let numericFormat = NumberFormat.getNumericFormat(value, format);\r\n\r\n                        // Add separators and decimalFormat to nonScientificFormat\r\n                        nonScientificOverrideFormat = getNonScientificFormatWithPrecision(nonScientificOverrideFormat, numericFormat);\r\n\r\n                        // Format the value\r\n                        valueFormatted = formattingService.format(nonScientificOverrideFormat, [value], culture.name);\r\n                        isValueGlobalized = true;\r\n                    }\r\n                    else\r\n                        valueFormatted = toNonScientific(value, precision);\r\n\r\n                    result = fuseNumberWithCustomFormat(valueFormatted, format, numberFormatInfo, nonScientificOverrideFormat, isValueGlobalized);\r\n                }\r\n                if (formatMeta.hasQuotes) {\r\n                    result = FormattingEncoder.restoreLiterals(result, literals);\r\n                }\r\n                if (formatMeta.hasEscapes) {\r\n                    result = FormattingEncoder.restoreEscaped(result, \"\\\\0#.,%‰\");\r\n                }\r\n\r\n                _lastCustomFormatMeta = formatMeta;\r\n            } else {\r\n                return Globalize.format(value, undefined);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        /** Returns string with the fixed point respresentation of the number */\r\n        function toNonScientific(value: number, precision: number): string {\r\n            let result = \"\";\r\n            let precisionZeros = 0;\r\n            // Double precision numbers support actual 15-16 decimal digits of precision.\r\n            if (precision > 16) {\r\n                precisionZeros = precision - 16;\r\n                precision = 16;\r\n            }\r\n            let digitsBeforeDecimalPoint = Double.log10(Math.abs(value));\r\n            if (digitsBeforeDecimalPoint < 16) {\r\n                if (digitsBeforeDecimalPoint > 0) {\r\n                    let maxPrecision = 16 - digitsBeforeDecimalPoint;\r\n                    if (precision > maxPrecision) {\r\n                        precisionZeros += precision - maxPrecision;\r\n                        precision = maxPrecision;\r\n                    }\r\n                }\r\n                result = value.toFixed(precision);\r\n            } else if (digitsBeforeDecimalPoint === 16) {\r\n                result = value.toFixed(0);\r\n                precisionZeros += precision;\r\n                if (precisionZeros > 0) {\r\n                    result += \".\";\r\n                }\r\n            } else { // digitsBeforeDecimalPoint > 16\r\n                // Different browsers have different implementations of the toFixed().\r\n                // In IE it returns fixed format no matter what's the number. In FF and Chrome the method returns exponential format for numbers greater than 1E21.\r\n                // So we need to check for range and convert the to exponential with the max precision.\r\n                // Then we convert exponential string to fixed by removing the dot and padding with \"power\" zeros.\r\n                // Assert that value is a number and fall back on returning value if it is not\r\n                debug.assert(typeof (value) === \"number\", \"value must be a number\");\r\n                if (typeof (value) !== \"number\")\r\n                    return String(value);\r\n                result = value.toExponential(15);\r\n                let indexOfE = result.indexOf(\"e\");\r\n                if (indexOfE > 0) {\r\n                    let indexOfDot = result.indexOf(\".\");\r\n                    let mantissa = result.substr(0, indexOfE);\r\n                    let exp = result.substr(indexOfE + 1);\r\n                    let powerZeros = parseInt(exp, 10) - (mantissa.length - indexOfDot - 1);\r\n                    result = mantissa.replace(\".\", \"\") + StringExtensions.repeat(\"0\", powerZeros);\r\n                    if (precision > 0) {\r\n                        result = result + \".\" + StringExtensions.repeat(\"0\", precision);\r\n                    }\r\n                }\r\n            }\r\n            if (precisionZeros > 0) {\r\n                result = result + StringExtensions.repeat(\"0\", precisionZeros);\r\n            }\r\n            return result;\r\n        }\r\n\r\n        /**\r\n         * Returns the formatMetadata of the format\r\n         * When calculating precision and scale, if format string of\r\n         * positive[;negative;zero] => positive format will be used\r\n         * @param (required) format - format string\r\n         * @param (optional) calculatePrecision - calculate precision of positive format\r\n         * @param (optional) calculateScale - calculate scale of positive format\r\n         */\r\n        export function getCustomFormatMetadata(format: string, calculatePrecision?: boolean, calculateScale?: boolean): NumericFormatMetadata {\r\n            if (_lastCustomFormatMeta !== undefined && format === _lastCustomFormatMeta.format) {\r\n                return _lastCustomFormatMeta;\r\n            }\r\n\r\n            let result = {\r\n                format: format,\r\n                hasEscapes: false,\r\n                hasQuotes: false,\r\n                hasE: false,\r\n                hasCommas: false,\r\n                hasDots: false,\r\n                hasPercent: false,\r\n                hasPermile: false,\r\n                precision: undefined,\r\n                scale: undefined,\r\n            };\r\n\r\n            for (let i = 0, length = format.length; i < length; i++) {\r\n                let c = format.charAt(i);\r\n                switch (c) {\r\n                    case \"\\\\\":\r\n                        result.hasEscapes = true;\r\n                        break;\r\n                    case \"'\":\r\n                    case \"\\\"\":\r\n                        result.hasQuotes = true;\r\n                        break;\r\n                    case \"e\":\r\n                    case \"E\":\r\n                        result.hasE = true;\r\n                        break;\r\n                    case \",\":\r\n                        result.hasCommas = true;\r\n                        break;\r\n                    case \".\":\r\n                        result.hasDots = true;\r\n                        break;\r\n                    case \"%\":\r\n                        result.hasPercent = true;\r\n                        break;\r\n                    case \"‰\":\r\n                        result.hasPermile = true;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            // Use positive format for calculating these values\r\n            let formatComponents = getComponents(format);\r\n\r\n            if (calculatePrecision)\r\n                result.precision = getCustomFormatPrecision(formatComponents.positive, result);\r\n            if (calculateScale)\r\n                result.scale = getCustomFormatScale(formatComponents.positive, result);\r\n\r\n            return result;\r\n        }\r\n\r\n        /** Returns the decimal precision of format based on the number of # and 0 chars after the decimal point\r\n          * Important: The input format string needs to be split to the appropriate pos/neg/zero portion to work correctly */\r\n        function getCustomFormatPrecision(format: string, formatMeta: NumericFormatMetadata): number {\r\n            if (formatMeta.precision > -1) {\r\n                return formatMeta.precision;\r\n            }\r\n            let result = 0;\r\n            if (formatMeta.hasDots) {\r\n                let dotIndex = format.indexOf(\".\");\r\n                if (dotIndex > -1) {\r\n                    let count = format.length;\r\n                    for (let i = dotIndex; i < count; i++) {\r\n                        let char = format.charAt(i);\r\n                        if (char.match(NumericPlaceholderRegex))\r\n                            result++;\r\n                        // 0.00E+0 :: Break before counting 0 in\r\n                        // exponential portion of format string\r\n                        if (char === ExponentialFormatChar)\r\n                            break;\r\n                    }\r\n                    result = Math.min(19, result);\r\n                }\r\n            }\r\n\r\n            formatMeta.precision = result;\r\n            return result;\r\n        }\r\n\r\n        /** Returns the scale factor of the format based on the \"%\" and scaling \",\" chars in the format */\r\n        function getCustomFormatScale(format: string, formatMeta: NumericFormatMetadata): number {\r\n            if (formatMeta.scale > -1) {\r\n                return formatMeta.scale;\r\n            }\r\n            let result = 1;\r\n            if (formatMeta.hasPercent && format.indexOf(\"%\") > -1) {\r\n                result = result * 100;\r\n            }\r\n            if (formatMeta.hasPermile && format.indexOf(\"‰\") > -1) {\r\n                result = result * 1000;\r\n            }\r\n            if (formatMeta.hasCommas) {\r\n                let dotIndex = format.indexOf(\".\");\r\n                if (dotIndex === -1) {\r\n                    dotIndex = format.length;\r\n                }\r\n                for (let i = dotIndex - 1; i > -1; i--) {\r\n                    let char = format.charAt(i);\r\n                    if (char === \",\") {\r\n                        result = result / 1000;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            formatMeta.scale = result;\r\n            return result;\r\n        }\r\n\r\n        function fuseNumberWithCustomFormat(value: string, format: string, numberFormatInfo: GlobalizeNumberFormat, nonScientificOverrideFormat?: string, isValueGlobalized?: boolean): string {\r\n            let suppressModifyValue = !!nonScientificOverrideFormat;\r\n            let formatParts = format.split(\".\", 2);\r\n            if (formatParts.length === 2) {\r\n                let wholeFormat = formatParts[0];\r\n                let fractionFormat = formatParts[1];\r\n                let displayUnit = \"\";\r\n\r\n                // Remove display unit from value before splitting on \".\" as localized display units sometimes end with \".\"\r\n                if (nonScientificOverrideFormat) {\r\n                    debug.assert(NonScientificFormatRegex.test(nonScientificOverrideFormat), \"Number should always precede the display unit\");\r\n                    displayUnit = nonScientificOverrideFormat.replace(NumericalPlaceHolderRegex, \"\");\r\n                    value = value.replace(displayUnit, \"\");\r\n                }\r\n\r\n                let globalizedDecimalSeparator = numberFormatInfo[\".\"];\r\n                let decimalSeparator = isValueGlobalized ? globalizedDecimalSeparator : \".\";\r\n                let valueParts = value.split(decimalSeparator, 2);\r\n                let wholeValue = valueParts.length === 1 ? valueParts[0] + displayUnit : valueParts[0];\r\n                let fractionValue = valueParts.length === 2 ? valueParts[1] + displayUnit : \"\";\r\n                fractionValue = fractionValue.replace(TrailingZerosRegex, \"\");\r\n\r\n                let wholeFormattedValue = fuseNumberWithCustomFormatLeft(wholeValue, wholeFormat, numberFormatInfo, suppressModifyValue);\r\n                let fractionFormattedValue = fuseNumberWithCustomFormatRight(fractionValue, fractionFormat, suppressModifyValue);\r\n\r\n                if (fractionFormattedValue.fmtOnly || fractionFormattedValue.value === \"\")\r\n                    return wholeFormattedValue + fractionFormattedValue.value;\r\n\r\n                return wholeFormattedValue + globalizedDecimalSeparator + fractionFormattedValue.value;\r\n            }\r\n            return fuseNumberWithCustomFormatLeft(value, format, numberFormatInfo, suppressModifyValue);\r\n        }\r\n\r\n        function fuseNumberWithCustomFormatLeft(value: string, format: string, numberFormatInfo: GlobalizeNumberFormat, suppressModifyValue?: boolean): string {\r\n            let groupSymbolIndex = format.indexOf(\",\");\r\n            let enableGroups = groupSymbolIndex > -1 && groupSymbolIndex < Math.max(format.lastIndexOf(\"0\"), format.lastIndexOf(\"#\")) && numberFormatInfo[\",\"];\r\n            let groupDigitCount = 0;\r\n            let groupIndex = 0;\r\n            let groupSizes = numberFormatInfo.groupSizes || [3];\r\n            let groupSize = groupSizes[0];\r\n            let groupSeparator = numberFormatInfo[\",\"];\r\n            let sign = \"\";\r\n            let firstChar = value.charAt(0);\r\n            if (firstChar === \"+\" || firstChar === \"-\") {\r\n                sign = numberFormatInfo[firstChar];\r\n                value = value.substr(1);\r\n            }\r\n            let isZero = value === \"0\";\r\n            let result = \"\";\r\n            let leftBuffer = \"\";\r\n            let vi = value.length - 1;\r\n            let fmtOnly = true;\r\n            // Iterate through format chars and replace 0 and # with the digits from the value string\r\n            for (let fi = format.length - 1; fi > -1; fi--) {\r\n                let formatChar = format.charAt(fi);\r\n                switch (formatChar) {\r\n                    case ZeroPlaceholder:\r\n                    case DigitPlaceholder:\r\n                        fmtOnly = false;\r\n                        if (leftBuffer !== \"\") {\r\n                            result = leftBuffer + result;\r\n                            leftBuffer = \"\";\r\n                        }\r\n                        if (!suppressModifyValue) {\r\n                            if (vi > -1 || formatChar === ZeroPlaceholder) {\r\n                                if (enableGroups) {\r\n                                    // If the groups are enabled we'll need to keep track of the current group index and periodically insert group separator,\r\n                                    if (groupDigitCount === groupSize) {\r\n                                        result = groupSeparator + result;\r\n                                        groupIndex++;\r\n                                        if (groupIndex < groupSizes.length) {\r\n                                            groupSize = groupSizes[groupIndex];\r\n                                        }\r\n                                        groupDigitCount = 1;\r\n                                    } else {\r\n                                        groupDigitCount++;\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (vi > -1) {\r\n                                if (isZero && formatChar === DigitPlaceholder) {\r\n                                    // Special case - if we need to format a zero value and the # symbol is used - we don't copy it into the result)\r\n                                } else {\r\n                                    result = value.charAt(vi) + result;\r\n                                }\r\n                                vi--;\r\n                            } else if (formatChar !== DigitPlaceholder) {\r\n                                result = formatChar + result;\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \",\":\r\n                        // We should skip all the , chars\r\n                        break;\r\n                    default:\r\n                        leftBuffer = formatChar + leftBuffer;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            // If the value didn't fit into the number of zeros provided in the format then we should insert the missing part of the value into the result\r\n            if (!suppressModifyValue) {\r\n                if (vi > -1 && result !== \"\") {\r\n                    if (enableGroups) {\r\n                        while (vi > -1) {\r\n                            if (groupDigitCount === groupSize) {\r\n                                result = groupSeparator + result;\r\n                                groupIndex++;\r\n                                if (groupIndex < groupSizes.length) {\r\n                                    groupSize = groupSizes[groupIndex];\r\n                                }\r\n                                groupDigitCount = 1;\r\n                            } else {\r\n                                groupDigitCount++;\r\n                            }\r\n                            result = value.charAt(vi) + result;\r\n                            vi--;\r\n                        }\r\n                    } else {\r\n                        result = value.substr(0, vi + 1) + result;\r\n                    }\r\n                }\r\n                // Insert sign in front of the leftBuffer and result\r\n                return sign + leftBuffer + result;\r\n            }\r\n\r\n            if (fmtOnly)\r\n                // If the format doesn't specify any digits to be displayed, then just return the format we've parsed up until now.\r\n                return sign + leftBuffer + result;\r\n\r\n            return sign + leftBuffer + value + result;\r\n        }\r\n\r\n        function fuseNumberWithCustomFormatRight(value: string, format: string, suppressModifyValue?: boolean): { value: string; fmtOnly?: boolean } {\r\n            let vi = 0;\r\n            let fCount = format.length;\r\n            let vCount = value.length;\r\n\r\n            if (suppressModifyValue) {\r\n                debug.assert(fCount > 0, \"Empty formatting string\");\r\n\r\n                let lastChar = format.charAt(fCount - 1);\r\n                if (!lastChar.match(NumericPlaceholderRegex))\r\n                    return {\r\n                        value: value + lastChar,\r\n                        fmtOnly: value === \"\",\r\n                    };\r\n\r\n                return {\r\n                    value: value,\r\n                    fmtOnly: value === \"\",\r\n                };\r\n            }\r\n\r\n            let result = \"\",\r\n                fmtOnly: boolean = true;\r\n            for (let fi = 0; fi < fCount; fi++) {\r\n                let formatChar = format.charAt(fi);\r\n                if (vi < vCount) {\r\n                    switch (formatChar) {\r\n                        case ZeroPlaceholder:\r\n                        case DigitPlaceholder:\r\n                            result += value[vi++];\r\n                            fmtOnly = false;\r\n                            break;\r\n                        default:\r\n                            result += formatChar;\r\n                    }\r\n                } else {\r\n                    if (formatChar !== DigitPlaceholder) {\r\n                        result += formatChar;\r\n                        fmtOnly = fmtOnly && (formatChar !== ZeroPlaceholder);\r\n                    }\r\n                }\r\n            }\r\n\r\n            return {\r\n                value: result,\r\n                fmtOnly: fmtOnly,\r\n            };\r\n        }\r\n\r\n        function localize(value: string, dictionary: any): string {\r\n            let plus = dictionary[\"+\"];\r\n            let minus = dictionary[\"-\"];\r\n            let dot = dictionary[\".\"];\r\n            let comma = dictionary[\",\"];\r\n            if (plus === \"+\" && minus === \"-\" && dot === \".\" && comma === \",\") {\r\n                return value;\r\n            }\r\n            let count = value.length;\r\n            let result = \"\";\r\n            for (let i = 0; i < count; i++) {\r\n                let char = value.charAt(i);\r\n                switch (char) {\r\n                    case \"+\":\r\n                        result = result + plus;\r\n                        break;\r\n                    case \"-\":\r\n                        result = result + minus;\r\n                        break;\r\n                    case \".\":\r\n                        result = result + dot;\r\n                        break;\r\n                    case \",\":\r\n                        result = result + comma;\r\n                        break;\r\n                    default:\r\n                        result = result + char;\r\n                        break;\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n    }\r\n\r\n    /** DateTimeScaleFormatInfo is used to calculate and keep the Date formats used for different units supported by the DateTimeScaleModel */\r\n    class DateTimeScaleFormatInfo {\r\n\r\n        // Fields\r\n        public YearPattern: string;\r\n        public MonthPattern: string;\r\n        public DayPattern: string;\r\n        public HourPattern: string;\r\n        public MinutePattern: string;\r\n        public SecondPattern: string;\r\n        public MillisecondPattern: string;\r\n\r\n        // Constructor\r\n        /**\r\n         * Creates new instance of the DateTimeScaleFormatInfo class.\r\n         * @param culture - culture which calendar info is going to be used to derive the formats.\r\n         */\r\n        constructor(culture: Culture) {\r\n            let calendar: Calendar = culture.calendar;\r\n            let patterns: any = calendar.patterns;\r\n            let monthAbbreviations: any = calendar[\"months\"][\"namesAbbr\"];\r\n            let cultureHasMonthAbbr: boolean = monthAbbreviations && monthAbbreviations[0];\r\n            let yearMonthPattern: string = patterns[\"Y\"];\r\n            let monthDayPattern: string = patterns[\"M\"];\r\n            let fullPattern: string = patterns[\"f\"];\r\n            let longTimePattern: string = patterns[\"T\"];\r\n            let shortTimePattern: string = patterns[\"t\"];\r\n            let separator: string = fullPattern.indexOf(\",\") > -1 ? \", \" : \" \";\r\n\r\n            let hasYearSymbol: boolean = yearMonthPattern.indexOf(\"yyyy'\") === 0 && yearMonthPattern.length > 6 && yearMonthPattern[6] === '\\'';\r\n            this.YearPattern = hasYearSymbol ? yearMonthPattern.substr(0, 7) : \"yyyy\";\r\n\r\n            let yearPos: number = fullPattern.indexOf(\"yy\");\r\n            let monthPos: number = fullPattern.indexOf(\"MMMM\");\r\n            this.MonthPattern = cultureHasMonthAbbr && monthPos > -1 ? (yearPos > monthPos ? \"MMM yyyy\" : \"yyyy MMM\") : yearMonthPattern;\r\n\r\n            this.DayPattern = cultureHasMonthAbbr ? monthDayPattern.replace(\"MMMM\", \"MMM\") : monthDayPattern;\r\n\r\n            let minutePos: number = fullPattern.indexOf(\"mm\");\r\n            let pmPos: number = fullPattern.indexOf(\"tt\");\r\n            let shortHourPattern: string = pmPos > -1 ? shortTimePattern.replace(\":mm \", \"\") : shortTimePattern;\r\n            this.HourPattern = yearPos < minutePos ? this.DayPattern + separator + shortHourPattern : shortHourPattern + separator + this.DayPattern;\r\n\r\n            this.MinutePattern = shortTimePattern;\r\n\r\n            this.SecondPattern = longTimePattern;\r\n\r\n            this.MillisecondPattern = longTimePattern.replace(\"ss\", \"ss.fff\");\r\n\r\n            // Special cases\r\n            switch (culture.name) {\r\n                case \"fi-FI\":\r\n                    this.DayPattern = this.DayPattern.replace(\"'ta'\", \"\"); // Fix for finish 'ta' suffix for month names.\r\n                    this.HourPattern = this.HourPattern.replace(\"'ta'\", \"\");\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // Methods\r\n\r\n        /**\r\n         * Returns the format string of the provided DateTimeUnit.\r\n         * @param unit - date or time unit\r\n         */\r\n        public getFormatString(unit: DateTimeUnit): string {\r\n            switch (unit) {\r\n                case DateTimeUnit.Year:\r\n                    return this.YearPattern;\r\n                case DateTimeUnit.Month:\r\n                    return this.MonthPattern;\r\n                case DateTimeUnit.Week:\r\n                case DateTimeUnit.Day:\r\n                    return this.DayPattern;\r\n                case DateTimeUnit.Hour:\r\n                    return this.HourPattern;\r\n                case DateTimeUnit.Minute:\r\n                    return this.MinutePattern;\r\n                case DateTimeUnit.Second:\r\n                    return this.SecondPattern;\r\n                case DateTimeUnit.Millisecond:\r\n                    return this.MillisecondPattern;\r\n            }\r\n\r\n            debug.assertFail('Unexpected unit: ' + unit);\r\n        }\r\n    }\r\n\r\n    export var formattingService: IFormattingService = new FormattingService();\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.data {\r\n    /** Serializes SQExpr in a form optimized in-memory comparison, but not intended for storage on disk. */\r\n    export module SQExprShortSerializer {\r\n        export function serialize(expr: SQExpr): string {\r\n            return JSON.stringify(expr.accept(SQExprSerializer.instance));\r\n        }\r\n\r\n        export function serializeArray(exprs: SQExpr[]): string {\r\n            let str = '[';\r\n            for (let i = 0, len = exprs.length; i < len; i++) {\r\n                if (i > 0)\r\n                    str += ',';\r\n                str += SQExprShortSerializer.serialize(exprs[i]);\r\n            }\r\n            return str + ']';\r\n        }\r\n\r\n        /** Responsible for serializing an SQExpr into a comparable string. */\r\n        class SQExprSerializer extends DefaultSQExprVisitor<{}> {\r\n            public static instance: SQExprSerializer = new SQExprSerializer();\r\n\r\n            public visitColumnRef(expr: SQColumnRefExpr): {} {\r\n                return {\r\n                    col: {\r\n                        s: expr.source.accept(this),\r\n                        r: expr.ref,\r\n                    }\r\n                };\r\n            }\r\n\r\n            public visitMeasureRef(expr: SQMeasureRefExpr): {} {\r\n                return {\r\n                    measure: {\r\n                        s: expr.source.accept(this),\r\n                        r: expr.ref,\r\n                    }\r\n                };\r\n            }\r\n\r\n            public visitAggr(expr: SQAggregationExpr): {} {\r\n                return {\r\n                    agg: {\r\n                        a: expr.arg.accept(this),\r\n                        f: expr.func,\r\n                    }\r\n                };\r\n            }\r\n\r\n            public visitEntity(expr: SQEntityExpr): {} {\r\n                debug.assertValue(expr, 'expr');\r\n                debug.assertValue(expr.entity, 'expr.entity');\r\n\r\n                return {\r\n                    e: expr.entity\r\n                };\r\n            }\r\n\r\n            public visitHierarchyLevel(expr: SQHierarchyLevelExpr): {} {\r\n                return {\r\n                    h: expr.arg.accept(this),\r\n                    l: expr.level,\r\n                };\r\n            }\r\n\r\n            public visitHierarchy(expr: SQHierarchyExpr): {} {\r\n                return {\r\n                    e: expr.arg.accept(this),\r\n                    h: expr.hierarchy,\r\n                };\r\n            }\r\n\r\n            public visitPropertyVariationSource(expr: SQPropertyVariationSourceExpr): {} {\r\n                return {\r\n                    e: expr.arg.accept(this),\r\n                    n: expr.name,\r\n                    p: expr.property,\r\n                };\r\n            }\r\n\r\n            public visitAnd(expr: SQAndExpr): {} {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                return {\r\n                    and: {\r\n                        l: expr.left.accept(this),\r\n                        r: expr.right.accept(this),\r\n                    }\r\n                };\r\n            }\r\n\r\n            public visitCompare(expr: SQCompareExpr): {} {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                return {\r\n                    comp: {\r\n                        k: expr.comparison,\r\n                        l: expr.left.accept(this),\r\n                        r: expr.right.accept(this),\r\n                    }\r\n                };\r\n            }\r\n\r\n            public visitConstant(expr: SQConstantExpr): {} {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                return {\r\n                    const: {\r\n                        t: expr.type.primitiveType,\r\n                        v: expr.value,\r\n                    }\r\n                };\r\n            }\r\n\r\n            public visitArithmetic(expr: SQArithmeticExpr): {} {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                return {\r\n                    arithmetic: {\r\n                        o: expr.operator,\r\n                        l: expr.left.accept(this),\r\n                        r: expr.right.accept(this)\r\n                    }\r\n                };\r\n            }\r\n\r\n            public visitScopedEval(expr: SQScopedEvalExpr): {} {\r\n                debug.assertValue(expr, 'expr');\r\n\r\n                return {\r\n                    scopedEval: {\r\n                        e: expr.expression.accept(this),\r\n                        s: serializeArray(expr.scope)\r\n                    }\r\n                };\r\n            }\r\n\r\n            public visitDefault(expr: SQExpr): {} {\r\n                debug.assertFail('Unexpected expression type found in DataViewScopeIdentity.');\r\n\r\n                return;\r\n            }\r\n        }\r\n    }\r\n}","/*\r\n *  Power BI Visualizations\r\n *\r\n *  Copyright (c) Microsoft Corporation\r\n *  All rights reserved. \r\n *  MIT License\r\n *\r\n *  Permission is hereby granted, free of charge, to any person obtaining a copy\r\n *  of this software and associated documentation files (the \"\"Software\"\"), to deal\r\n *  in the Software without restriction, including without limitation the rights\r\n *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n *  copies of the Software, and to permit persons to whom the Software is\r\n *  furnished to do so, subject to the following conditions:\r\n *   \r\n *  The above copyright notice and this permission notice shall be included in \r\n *  all copies or substantial portions of the Software.\r\n *   \r\n *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\n *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\n *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\n *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\n *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n *  THE SOFTWARE.\r\n */\r\n\r\nmodule powerbi.visuals {\r\n    import Selector = powerbi.data.Selector;\r\n    import SelectorsByColumn = powerbi.SelectorsByColumn;\r\n    import SelectorForColumn = powerbi.SelectorForColumn;\r\n\r\n    /**\r\n     * A combination of identifiers used to uniquely identify\r\n     * data points and their bound geometry.\r\n     */\r\n    export class SelectionId implements ISelectionId {\r\n        private selector: Selector;\r\n        // This is a new data structure to support drilling -- in the long term it should replace the 'selector' field\r\n        private selectorsByColumn: SelectorsByColumn;\r\n        private key: string;\r\n        private keyWithoutHighlight: string;\r\n\r\n        public highlight: boolean;\r\n\r\n        constructor(selector: Selector, highlight: boolean) {\r\n            this.selector = selector;\r\n            this.highlight = highlight;\r\n            this.key = JSON.stringify({ selector: selector ? Selector.getKey(selector) : null, highlight: highlight });\r\n            this.keyWithoutHighlight = JSON.stringify({ selector: selector ? Selector.getKey(selector) : null });\r\n        }\r\n\r\n        public equals(other: SelectionId): boolean {\r\n            if (!this.selector || !other.selector) {\r\n                return (!this.selector === !other.selector) && this.highlight === other.highlight;\r\n            }\r\n            return this.highlight === other.highlight &&  Selector.equals(this.selector, other.selector);\r\n        }\r\n        \r\n        /**\r\n         * Checks equality against other for all identifiers existing in this.\r\n         */\r\n        public includes(other: SelectionId, ignoreHighlight: boolean = false): boolean {\r\n            let thisSelector = this.selector;\r\n            let otherSelector = other.selector;\r\n            if (!thisSelector || !otherSelector) {\r\n                return false;\r\n            }\r\n            let thisData = thisSelector.data;\r\n            let otherData = otherSelector.data;\r\n            if (!thisData && (thisSelector.metadata && thisSelector.metadata !== otherSelector.metadata))\r\n                return false;\r\n            if (!ignoreHighlight && this.highlight !== other.highlight)\r\n                return false;\r\n            if (thisData) {\r\n                if (!otherData)\r\n                    return false;\r\n                if (thisData.length > 0) {\r\n                    for (let i = 0, ilen = thisData.length; i < ilen; i++) {\r\n                        var thisValue = <DataViewScopeIdentity>thisData[i];\r\n                        if (!otherData.some((otherValue: DataViewScopeIdentity) => DataViewScopeIdentity.equals(thisValue, otherValue)))\r\n                            return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        public getKey(): string {\r\n            return this.key;\r\n        }\r\n\r\n        public getKeyWithoutHighlight(): string {\r\n            return this.keyWithoutHighlight;\r\n        }\r\n        \r\n        /**\r\n         * Temporary workaround since a few things currently rely on this, but won't need to.\r\n         */\r\n        public hasIdentity(): boolean {\r\n            return (this.selector && !!this.selector.data);\r\n        }\r\n\r\n        public getSelector(): Selector {\r\n            return this.selector;\r\n        }\r\n\r\n        public getSelectorsByColumn(): Selector {\r\n            return this.selectorsByColumn;\r\n        }\r\n\r\n        public static createNull(highlight: boolean = false): SelectionId {\r\n            return new SelectionId(null, highlight);\r\n        }\r\n\r\n        public static createWithId(id: DataViewScopeIdentity, highlight: boolean = false): SelectionId {\r\n            let selector: Selector = null;\r\n            if (id) {\r\n                selector = {\r\n                    data: [id]\r\n                };\r\n            }\r\n            return new SelectionId(selector, highlight);\r\n        }\r\n\r\n        public static createWithMeasure(measureId: string, highlight: boolean = false): SelectionId {\r\n            debug.assertValue(measureId, 'measureId');\r\n\r\n            let selector: Selector = {\r\n                metadata: measureId\r\n            };\r\n\r\n            let selectionId = new SelectionId(selector, highlight);\r\n            selectionId.selectorsByColumn = { metadata: measureId };\r\n            return selectionId;\r\n        }\r\n\r\n        public static createWithIdAndMeasure(id: DataViewScopeIdentity, measureId: string, highlight: boolean = false): SelectionId {\r\n            let selector: powerbi.data.Selector = {};\r\n            if (id) {\r\n                selector.data = [id];\r\n            }\r\n            if (measureId)\r\n                selector.metadata = measureId;\r\n            if (!id && !measureId)\r\n                selector = null;\r\n\r\n            let selectionId = new SelectionId(selector, highlight);\r\n\r\n            return selectionId;\r\n        }\r\n\r\n        public static createWithIdAndMeasureAndCategory(id: DataViewScopeIdentity, measureId: string, queryName: string, highlight: boolean = false): SelectionId {\r\n            let selectionId = this.createWithIdAndMeasure(id, measureId, highlight);\r\n\r\n            if (selectionId.selector) {\r\n                selectionId.selectorsByColumn = {};\r\n                if (id && queryName) {\r\n                    selectionId.selectorsByColumn.dataMap = {};\r\n                    selectionId.selectorsByColumn.dataMap[queryName] = id;\r\n                }\r\n                if (measureId)\r\n                    selectionId.selectorsByColumn.metadata = measureId;\r\n            }\r\n\r\n            return selectionId;\r\n        }\r\n\r\n        public static createWithIds(id1: DataViewScopeIdentity, id2: DataViewScopeIdentity, highlight: boolean = false): SelectionId {\r\n            let selector: Selector = null;\r\n            let selectorData = SelectionId.idArray(id1, id2);\r\n            if (selectorData)\r\n                selector = { data: selectorData };\r\n            \r\n            return new SelectionId(selector, highlight);\r\n        }\r\n\r\n        public static createWithIdsAndMeasure(id1: DataViewScopeIdentity, id2: DataViewScopeIdentity, measureId: string, highlight: boolean = false): SelectionId {\r\n            let selector: Selector = {};\r\n            let selectorData = SelectionId.idArray(id1, id2);\r\n            if (selectorData)\r\n                selector.data = selectorData;\r\n\r\n            if (measureId)\r\n                selector.metadata = measureId;\r\n            if (!id1 && !id2 && !measureId)\r\n                selector = null;\r\n            return new SelectionId(selector, highlight);\r\n        }\r\n\r\n        public static createWithSelectorForColumnAndMeasure(dataMap: SelectorForColumn, measureId: string, highlight: boolean = false): SelectionId {\r\n\r\n            let selectionId: visuals.SelectionId;\r\n            let keys = Object.keys(dataMap);\r\n            if (keys.length === 2) {\r\n                selectionId = this.createWithIdsAndMeasure(<DataViewScopeIdentity>dataMap[keys[0]], <DataViewScopeIdentity>dataMap[keys[1]], measureId, highlight);\r\n            } else if (keys.length === 1) {\r\n                selectionId = this.createWithIdsAndMeasure(<DataViewScopeIdentity>dataMap[keys[0]], null, measureId, highlight);\r\n            } else {\r\n                selectionId = this.createWithIdsAndMeasure(null, null, measureId, highlight);\r\n            }\r\n\r\n            let selectorsByColumn: SelectorsByColumn = {};\r\n            if (!_.isEmpty(dataMap))\r\n                selectorsByColumn.dataMap = dataMap;\r\n            if (measureId)\r\n                selectorsByColumn.metadata = measureId;\r\n            if (!dataMap && !measureId)\r\n                selectorsByColumn = null;\r\n\r\n            selectionId.selectorsByColumn = selectorsByColumn;\r\n\r\n            return selectionId;\r\n        }\r\n\r\n        public static createWithHighlight(original: SelectionId): SelectionId {\r\n            debug.assertValue(original, 'original');\r\n            debug.assert(!original.highlight, '!original.highlight');\r\n\r\n            let newId = new SelectionId(original.getSelector(), /*highlight*/ true);\r\n            newId.selectorsByColumn = original.selectorsByColumn;\r\n\r\n            return newId;\r\n        }\r\n\r\n        private static idArray(id1: DataViewScopeIdentity, id2: DataViewScopeIdentity): DataViewScopeIdentity[] {\r\n            if (id1 || id2) {\r\n                let data = [];\r\n                if (id1)\r\n                    data.push(id1);\r\n                if (id2 && id2 !== id1)\r\n                    data.push(id2);\r\n                return data;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This class is designed to simplify the creation of SelectionId objects\r\n     * It allows chaining to build up an object before calling 'create' to build a SelectionId\r\n     */\r\n    export class SelectionIdBuilder implements ISelectionIdBuilder {\r\n        private dataMap: SelectorForColumn;\r\n        private measure: string;\r\n\r\n        public static builder(): SelectionIdBuilder {\r\n            return new SelectionIdBuilder();\r\n        }\r\n\r\n        public withCategory(categoryColumn: DataViewCategoryColumn, index: number): this{\r\n            if (categoryColumn && categoryColumn.source && categoryColumn.source.queryName && categoryColumn.identity)\r\n                this.ensureDataMap()[categoryColumn.source.queryName] = categoryColumn.identity[index];\r\n            \r\n            return this;\r\n        }\r\n\r\n        public withSeries(seriesColumn: DataViewValueColumns, valueColumn: DataViewValueColumn | DataViewValueColumnGroup): this {\r\n            if (seriesColumn && seriesColumn.source && seriesColumn.source.queryName && valueColumn)\r\n                this.ensureDataMap()[seriesColumn.source.queryName] = valueColumn.identity;\r\n\r\n            return this;\r\n        }\r\n\r\n        public withMeasure(measureId: string): this {\r\n            this.measure = measureId;\r\n\r\n            return this;\r\n        }\r\n\r\n        public createSelectionId(): SelectionId {\r\n            return SelectionId.createWithSelectorForColumnAndMeasure(this.ensureDataMap(), this.measure);\r\n        }\r\n\r\n        private ensureDataMap(): SelectorForColumn {\r\n            if (!this.dataMap)\r\n                this.dataMap = {};\r\n\r\n            return this.dataMap;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":"../ts/visualsData"}