/*
 *  Power BI Visualizations
 *
 *  Copyright (c) Microsoft Corporation
 *  All rights reserved. 
 *  MIT License
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the ""Software""), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *   
 *  The above copyright notice and this permission notice shall be included in 
 *  all copies or substantial portions of the Software.
 *   
 *  THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 */

module powerbi.visuals.telemetry {

    /**
    * Event fired when a visual is loaded through the visual adapter
    * @param name Name (guid) of the visual. 
    * @param apiVersion Api version used by the visual. 
    * @param custom Is the visual custom? 
    * @param parentId Id of the parent event 
    * @param isError True - action failed. 
    * @param errorSource Source of the error. PowerBI = PowerBI has a problem, External = External Service (e.g. on-prem AS server is down), User = User error (e.g. uploading too much and hitting resource limitations. 
    * @param errorCode PowerBI Error Code 
    *
    * Generated by: Extensibility/events.bond
    */

    export declare var ExtensibilityVisualApiUsageLoggers: number;

    export var ExtensibilityVisualApiUsage = function(name: string, apiVersion: string, custom: boolean, parentId: string, isError: boolean = false, errorSource: ErrorSource = undefined, errorCode: string = undefined): ITelemetryEventI<IPBIExtensibilityVisualApiUsage> {
        var info = {
            name: name,
            apiVersion: apiVersion,
            custom: custom,
            parentId: parentId,
            isError: isError,
            errorSource: errorSource,
            errorCode: errorCode,
        };

        var event: ITelemetryEventI<IPBIExtensibilityVisualApiUsage> = {
            name: 'PBI.Extensibility.VisualApiUsage',
            category: TelemetryCategory.CustomerAction,
            time: Date.now(),
            id: generateGuid(),
            getFormattedInfoObject: function() {
                var formattedObject = {
                    name: info.name,
                    apiVersion: info.apiVersion,
                    custom: info.custom,
                    parentId: info.parentId,
                    isError: info.isError,
                };
                if (typeof info.errorSource !== 'undefined') {
                    formattedObject['errorSource'] = ErrorSource[info.errorSource];
                }
                if (typeof info.errorCode !== 'undefined') {
                    formattedObject['errorCode'] = info.errorCode;
                }
                return formattedObject;
            },
            info: info,
            privateFields: [],
            orgInfoFields: []
        };

        if (typeof ExtensibilityVisualApiUsageLoggers !== 'undefined') {
            event.loggers = ExtensibilityVisualApiUsageLoggers;
        }

        return event;
    };

    /**
    * Event fired for uncaught exception in IVisual.
    * @param visualType Type of the visual. 
    * @param isCustom Is the visual custom? 
    * @param apiVersion Api version used by the visual 
    * @param source Source URL 
    * @param lineNumber Line number 
    * @param columnNumber Column number 
    * @param stack Stack trace 
    * @param message Error exception message. 
    *
    * Generated by JsCommon/commonTelemetryEvents.bond
    */

    export declare var VisualExceptionLoggers: number;

    export var VisualException = function(visualType: string, isCustom: boolean, apiVersion: string, source: string, lineNumber: number, columnNumber: number, stack: string, message: string): ITelemetryEventI<IPBIVisualException> {
        var info = {
            visualType: visualType,
            isCustom: isCustom,
            apiVersion: apiVersion,
            source: source,
            lineNumber: lineNumber,
            columnNumber: columnNumber,
            stack: stack,
            message: message,
        };

        var event: ITelemetryEventI<IPBIVisualException> = {
            name: 'PBI.VisualException',
            category: TelemetryCategory.CriticalError,
            time: Date.now(),
            id: generateGuid(),
            getFormattedInfoObject: function() {
                var formattedObject = {
                    visualType: info.visualType,
                    isCustom: info.isCustom,
                    apiVersion: info.apiVersion,
                    source: info.source,
                    lineNumber: info.lineNumber,
                    columnNumber: info.columnNumber,
                    stack: info.stack,
                    message: info.message,
                };
                return formattedObject;
            },
            info: info,
            privateFields: [],
            orgInfoFields: []
        };

        if (typeof VisualExceptionLoggers !== 'undefined') {
            event.loggers = VisualExceptionLoggers;
        }

        return event;
    };
}